[ { "title": "Custom Difficulty for Custom Levels", "url": "/posts/mapping_CustomDifficulty/", "categories": "Map Modding", "tags": "mapping", "date": "2025-08-17 00:00:00 +0000", "snippet": "Custom Map Difficulty OverviewWith the Los Suenos Stories update, the AILevelData.ini was refactored into three Difficulty.iniCustom difficulties can also be created and included with your map pak. This can be loaded with your map, without other map or mods conflicting. Users/other modders can also create patch _P difficulty paks specifically for your map if they want to tweak the experience.This means, optionally, you can stop using the BP_SpawnManager_v3 and instead use the game’s native spawn Min and Max configs as well as spawn groups.This also lets you configure much more such as The number of bomb actors so you don’t need a BP_BombSpawner either. Also bomb times. The number of roaming suspects or civs Open doors percentage Locked doors percentage The max amount of traps and pre-placed traps Allowed trap types Explosive vest civs and suspects AS timersSetupA) Gameplay TagsUnreal gameplay tags are used as the “key” values in the gameplay code, so we need to add one for each new difficulty. In Unreal Engine, open Project Settings &gt; Gameplay Tags Open Manage Gameplay Tags... Select CustomDifficulty and press the + plus icon. Name your new tag CustomDifficulty.MAPNAME.DIFFLEVEL If your just creating one difficulty, just use CustomDifficulty.MAPNAME.StandardIf you want one for each diff add a Standard, Casual, and Hard The name doesn’t matter, however DO NOT create your tags under the base Difficulty group as this will make it show in the selector for players in quickplay for example, which is not how we want to use it. Make sure you create the new diff in the MyCustomGameplayTags.ini source. You can find this in your configs and can migrate it when the framework updates. B) Difficulty.ini In your project’s /Config/Difficulties/ create your new difficulty either by renaming/copying the example CustomMapDifficulty_RoN_Difficulty_Standard.inior export a difficulty from the game files using FModel. Rename your new difficulty CustomMapDifficulty_MAPNAME_DIFFLEVEL.ini This name doesn’t matter, just a suggested convention. Delete the example difficulty if you don’t want to do it every time you cook your map. Open the new diff to edit. Set DifficultyGameplayTag = to the tag you created in Step A). Also edit the tag in GameplayTagList to the tag you created, within \"\". [Info] DifficultyGameplayTag = CustomDifficulty.ExampleMap.Standard DifficultyNameKey = DifficultyDescriptionKey = DO NOT USE [/Script/GameplayTags.GameplayTagsList] GameplayTagList=(Tag=\"CustomDifficulty.ExampleMap.Standard\",DevComment=\"\") At the bottom of the ini, add the file name of your custom level with square brackets []. If you copied the example ini, you can replace “[RoN_DifficultyExampleMap]” Add your map configs below this header and save the file. [RoN_DifficultyExampleMap] MinCivilians = 1 MaxCivilians = 10 MinSuspects = 1 MaxSuspects = 10 UseSpawnGroups = true MinSuspects_Group1 = 1 MinSuspects_Group1 = 3 MinCivilians_Group1 = 1 MaxCivilians_Group1 = 1 ; use semi colons for comments C) Map Setup Delete your spawn manager or set Is Editor Only Actor = True, so it won’t interfere. For AI spawns, you won’t be using Spawn with Tags for groups. Instead, set the Group ID to the number at the end of MinSuspects_Group or MinSuspects_Group etc that you defined in your CustomDifficulty.ini I’d recommend NOT using group 0, so that your sure your changes are working. If your not using groups, then nothing needs to be set. Civs and suspects will spawn according to the Min/MaxCivilians and Min/MaxSuspects values. To load your custom diff, place a /Content/Mods/Template/Blueprints/BP_LoadCustomDifficulty blueprint in your level. Set the Fallback Difficulty to the tag you created in Step A). Expand the Difficulty Map fully (shift + click). For the value of each key, add your custom gameplay tag. If you created 3 difficulties, map each to the relevant vanilla gameplay tag. This lets the user pick which they want to use based on their vanilla selection. D) CookingBy default, unreal won’t copy the /Config/Difficulties/ folder.To make things easier, we added a custom cook button to the level editor toolbar.After cooking is completed, /Config/Difficulties/ is copied to your cooked folder, next to content.To include your CustomDifficulty.ini Press the Custom cook button: You can see successful copy actions in the output log. You can disable the custom cook copy step in Project Settings &gt; Plugins &gt; Framework Plugin Settings When copying your cooked files to be paked, be sure to copy both /Content and /Config to your staged mod folder. If you want to copy without cooking, press the Copy Difficulties button: You can see successful copy actions in the output log. You can use this to make changes to your CustomDifficulty.ini if your content is unchanged. Play your map in game to confirm your config has loaded." }, { "title": "Change Log - Los Sueños Stories", "url": "/posts/changelog-LosSuenosStories/", "categories": "Change Logs", "tags": "mapping, patch, changelog, change log, los suenos stories, lss", "date": "2025-08-12 00:00:00 +0000", "snippet": "Mapping ChangesOverviewLSS Update: Soft ReferencesMesh and class variable properties were widely changed from hard referenced to soft referenced. This means those properties are not loaded automatically when the class or blueprint is loaded. This is great for load times and memory usage, but does mean a few of the template blueprints broke, as well as a few data class types which you may have made custom versions of. Door Spawners: Fix required Door Data Tables; Door Static Mesh Chunk Meshes Door Handle Meshes AISpawn_Managed: Working, but fix required for editor preview character Body + Head Mesh Class Refs in Weapon Loadouts SpawnIncap_v2 Same as AI Spawn Moved DestructiblesAlmost all destructibles such as breakable glass, bottles, vehicles etc have been moved to \\Content\\ReadyOrNot\\Level\\Destructibles\\The framework includes a breakable glass child bp in the old location with a notification so you can replace it or move it.Frame Work Update: More Native Classes &amp; DeprecationMany of the door related blueprints construction scripts have been added to the base C++ classes so that they can now be used natively like VOID would. While you don’t have to migrate an existing map to them, the old classes have been moved to an extra \"Deprecated.zip\" within the download, now that they are redundant.Old Door Spawners are still a valid method once fixed, however the related world data blueprints will have doubled up billboard components and in some cases may need a few fixes to disable the doubled up C++ logic. Only old cover point blueprints need a non cosmetic fix. See here for a fix video.Advantages; Easy to update template. Mappers don’t need to fix blueprints with game updates. Mappers don’t need to make their own copy of blueprints to avoid conflicts. Tools can point to native C++ classes so they don’t also need to be copied by mappers.Blueprints moved to Deprecated.zip BP_CoverGen &amp; BP_CoverGen_Saver Use BP_CoverGen_Framework instead. BP_Door_Spawner_v2 &amp; BP_Door_Spawner_V3 Use Door instead. BP_LightBlocker Use BP_LightBlocker_Framework instead. Everything in World Data folder Use base classes/cooked game blueprints instead. Changed Blueprints; BP_AISpawn_Managed (AISpawn): Editor Billboard and arrow added via class construction script. Actor tag “Managed” added via class construction script if missing. BP has seed added for matching preview head/body. EUW_Tool_WorldDataHelper_Framework Moved to /Mods/Tools along with /Assets Refactored to use native C++ classes. BP_CoverGen_Framework Uses native class for save game. No blueprint references. BP_CoverLandmarkProxy_Closet_Child Other landmarks can use cooked game classes now. This still has begin play code for the interaction prompt etc BP_CoverPoint_Single_Framework A single coverpoint with location lock off and an automatic rail setup. BP_LightBlocker_Framework Refactored to use native C++ doors, NOT spawners. ConversionIf you would like to convert an existing map anyway, there is a WIP tool; EUW_Tool_OldWD_ConvertThis is for Doors, Stackup Actors, Threats and Rooms and is based on actor location.For doors, only the type and world data properties are set. Doors need to be assigned to “Attached Actors” on portals.Look At Points are not converted.Even if you don’t have world data, you should be able to use this also for BP_Door_Spawner_V2 to set the door type in bulk.See video guide for usage.DifficultiesWith the LSS update the AILevelData.ini was refactored into three Difficulty.iniWhat is interesting for us mappers, is that custom difficulties can also be created, included with your map pak and loaded with your map, without map or mods conflicting. Users/other modders can also create patch difficulty paks specifically for your map if they want to tweak the experience.This means, optionaly, you can not use the BP_SpawnManager_v3 anymore and instead use the game’s native spawn Min and Max configs as well as spawn groups. This also lets you configure the number of bomb actors so you don’t need a BP_BombSpawner either.Any configs like timing for bombs, AS timers, Stress, Roamers, Locked Door %, Trap Count etc are fully customizable. The new custom Cook button automates the copying of the \\Config\\Difficulties folder to your cooked content.There is an example level; RoN_DifficultyExampleMapand /Config/Difficulties/CustomMapDifficulty_RoN_Difficulty_Standard.inias an example. Check out the guide for custom levels.Quality of Life C++ class tweaks and additions.Many other Ready or Not classes have had editor only billboard components added to them for easier selection and id. Brushes and boxes have unique line colors where possible and construction scripts have been added for some classes like the landmarks so that child BP’s are not needed to vizulize their setups.On the editor toolbar there is a new custom Cook button next to platforms, which automates temporarily disabling ShareShaderCode, Cooking and copying difficulty configs.Also up there are shortcuts for the map build functions as well as some folder shortcuts you can customize.Additionally because of the change to soft references, cooking should succeed on the first run, due to the class with a broken mat/ref (I think one of the weapons) no longer being loaded.Mapping Fix GuidesDoor Spawners If you have an existing map and intend to fix old blueprint copies, be sure to extract “Deprecated.zip”.Old copies of BP_Door_Spawner_v2 and BP_Door_Spawner_v3 will be broken in game and need to be fixed for existing maps.For BP_Door_Spawner_v2, in Windows Explorer you can copy the fixed version (from /content/mods/template/blueprints/ to your existing map copy and overwrite it (with the editor closed).Old copies of BP_Door_Spawner_v3 will need to be fixed manually due to other copied assets referencing it, and it referencing others.See the video below for how to copy the fixes from the template blueprint to your old one.AI SpawnOld copies BP_AISpawn_Managed will still function in game but old copies’ character preview won’t work. You can just copy the fixed version from the template to your existing map folder in windows if it’s not been modified.Cover Point Fix + World Data Blueprint visual fixesExisting cover points need a construction script edit to fix their location. Old cover point single bps also need a class default change.See the video for guidance.Old World data BPs will still work, but have doubled debug visulizers.See the video on how to optionally fix them.WIP EUW_Tool_OldWD_Convert conversion Tool UsageNot really recommended unless you want to redo some stuff. Not all properties are going to be copied. Door type and world data values are only set for example. Custom door data tables still need to use a child BP to fix a hardcoded bug. See BP_Door_Framework.Other Modding changes /Config/AILevelData.ini was refactored into three Difficulties.ini in /Config/Difficulties/ /VO voice line folder was moved into the game paks as /Content/VO_PC/ Mod Spawn Actor Data asset class was added to load mod blueprint actors on map loads. Widespread changes to classes changing media assets and classes from hard to soft references." }, { "title": "World Data Authoring Guide Old", "url": "/posts/mapping_worlddata_old/", "categories": "Map Modding", "tags": "maps, world data", "date": "2025-03-10 00:00:00 +0000", "snippet": " This is for the Dark Waters version of the Framework or the door spawner and blueprints in the Deprecated.zip of the LSS framework.If you are making a new level, do not follow this guide and instead use the guide for the base Door class.Temporary DownloadAll the needed files will be included in a future Framework version, but for now you can download this “Patch.zip” which you can extract into a DarkWaters version of the framework, overwriting when prompted.OverviewWorld data is the info needed by AI to know about rooms. It is intertwined with doors to let SWAT know how to stack up, clear rooms, know where to look as-well-as by the suspects and civilians for fleeing and retreating.An example of world data for 3 roomsThis is a brief overview of the contents of /Content/Mods/Template/Blueprints/WorldData/which you will be using to author your level’s World Data. As these blueprints have interlinked references, they should be used in place, or, as assets in the above /Blueprints folder are also referenced, you should Move or Advanced Copy the entire /Content/Mods/Template/Blueprints/ folder if you wish to make a unique copy for your level.Overview: World Data Actor The core of the world data in your level is contained in a single actor in your level based on the “WorldDataGenerator” Ready Or Not class.This World Data actor contains an array of Room Data which contains a reference to their Doors and Threat Awareness Actors, along with a unique name, location and other linked rooms.To make this work with the Framework’s door spawners you will use a child class called the BP_WorldDataGen_ModdedRoomData along with visual helper actors called BP_RoomProxy which will populate the Room Data at run-time. Placing one in your level will disable automatic world data generation in game due to “Has World Ever Been Generated” being automatically set to True.Overview: Room Proxy BP_RoomProxyThis is a Framework only blueprint which is used to contain a single room’s Room Data in a visual form, so that you’re less likely to make mistakes when setting things up.It has selection based visuals for assigned doors and linked rooms, as well as an automatic name check so you can’t create conflicts.The rooms’ “Threats” arrays will also be auto-populated based on the name.Overview: Threat Awareness Actors These are scattered throughout a room, usually at a 250x250 grid interval, but tighter in narrow nav areas.They have 3 main functions. When clearing a room, SWAT needs to clear each by getting line-of-sight to it’s position. They are used by SWAT to determine where to stand in a room based on the Threat Level. The nearest Threat will have an array of Swat Look At Points so they have an appropriate angle to cover when not in combat.You will use the child class BP_ThreatAwarenessActor which has loads of helpful construction script logic and visuals. Notably, the essential Pathable Threat Awareness Actors array will be auto-populated based on the assigned “Owning Room” and “Pathable Group ID”Overview: Look At Proxy BP_LookAtProxyThis is a Framework only helper blueprint which is used to auto-populate and/or auto-trace additional “Swat Look at Points” when using the World Data Helper toolSetting Up World DataThis guide will cover setting up a simple map with 3 rooms, but can be extrapolated to any sized map.Most blueprints which I say “drag” or “place” into the level will be found at /Content/Mods/Template/Blueprints/WorldData/Keep in mind, in vanilla RoN maps, world data is mostly automatically generated, so manually setting this up isn’t an exact science concerning measurements/spacing.ToolThis guide makes heavy use of the Editor Utility Widget called BPW_WorldDataHelper.It’s also used to display extra actor visuals when they are selected. If I refer to “the Tool” in the guide, I’m referencing this widget.To run it; find it in /Content/Mods/Template/Blueprints/WorldData/ and press Right-Click | Run Editor Utility Widget1. World Data Generator Place a single BP_WorldDataGen_ModdedRoomData anywhere in your level. Make sure Has World Ever Been Generated is True. This will skip the game’s auto-generation at run-time. Make sure there are no other World Data Generator placed in your level After placing a World Data Generator with Has World Ever Been Generated = True, your map will no longer have any cover point generation.To remedy this you should place a BP_CoverGen_Saver and RoN Cover Gen Override Volumes in your level.2. Rooms I’d suggest just setting up two rooms to begin with, even if you have placed all your doors already. You can expand later. A room should always have it’s nav-mesh separated by a door or doorway Outdoor areas should also be rooms. Large spaces should be split at thresholds to limit how much SWAT needs to clear, but it’s not required. Place two BP_RoomProxy on either side of a threshold where there is/will be a door or doorway. The “Location Offset” visual, should be at the height of the nav mesh. The Room | Location will be auto-calculated from this offset location. Room XY position isn’t too critical, just try to make it centred and visible for yourself. Each room needs a unique Room | Name. The construction script will give a new one if a conflict is found in the level. Room | Connecting Rooms needs to be populated with each room directly connected with a door in the current room. To avoid mistakes, you should use the Quick Add Connecting Rooms picker to do this, as it will also populate the other room’s list with the currently selected room. If the Tool is running, you should see a large arrow pointing at connected rooms when a room is selected. Room | RootDoorSpawner needs to be assigned. This can be shared between other rooms. See Doors Placement briefly if you don’t have doors yet. Room | AdditionalRootDoorSpawners All other doors for the room should be assigned. This needs the RootDoorSpawner assigned too. Construction script will try to add it. Root Door and Additional Root Doors If you are duplicating rooms and changed the RootDoorSpawner, be sure to remove it from AdditionalRootDoorSpawners if needed. Room | Threats needs to be populated, but we will come back to this laterExample Room Details View3. ThreatsFor each room; Place a BP_ThreatAwarenessActor in the room. It should have nav mesh near it, placed just above nav-mesh height. Set the Owning Room This can be set with the Quick Add Room picker to avoid typos. Each room name will generate a randomly coloured cone that should match the other’s in the room. Check Is Outside if applicable. Keep duplicating your threats to cover the entire nav-mesh of your room. See placement; Auto generation spaces them at 150-250u with closer points when nav-mesh edges are closer.Meth Outside Threats Threats are points that the SWAT has to visually check in order to clear a room. If SWAT can see all points from their clear path, they will stop following the path and resume their other activities. Keep that in mind for corners, you may want to offset a threat closer to an inside wall or behind an obstruction of a corner so that SWAT has to check more of an angle in that location. Threats are also used to determine where the SWAT should stand to minimise their perceived threat. Most maps have a single default threat level with one safer threat level to mark preferred safe standing locations in a room. Doors always have extra TL Extreme threats placed in front/back of them. They are almost always off place from the main grid spacing, about 80 units away from each side.Meth Door Threat Placement Stair threats use the TL Stairs threat level and should be; Placed on one side of the nav-mesh boundary (or both if wide enough) Elevated much higher, usually above any ballistrades or rails so that look-at-traces have clearer line-of-sights to doors and proxies for tracing. Placed much tighter together, about 60 units. This is probably to give more accurate SWAT look-at-points.Meth Stair Threats You can mark a single threat per room as Preferred Exit for use in the later sync step. Exits are supposed to be used by suspects and civs in some capacity when fleeing or retreating. I don’t have much more info beyond that, most RON maps seem pretty random where this is placed in each room, but I’d imagine somewhere with cover or a corner would be preferred. If one isn’t manually assigned for a room, it will be randomly chosen for each room later. Example Threats for 3 rooms Pathable Threat Awareness Actors will need to be populated with all the other room’s threats.This is done by the BP’s construction script so long as the Owning Room matches, the Pathable Group ID matches and Setup Pathable Automatically is enabled.However a construction script is only ran when the placed actor is modified, so in a later step we will use the Tool’s Sync Threat Awareness button to ensure all the threats are linked. If the Tool is running, you should see arrows pointed at nearby pathable threats when a threat is selected. Just keep in mind, for editor responsiveness, this wont show EVERY linked threat if there’s many in the same room or they are too far. This button can be pressed whenever, if you would like to see its effects as you set things up.You should see your Room Proxies’ Room | Threats arrays also populate after pressing. You can use the Select by Pathable Tool button when you have a threat selected, to add all the other room’s threats to your selected actors.SWAT Look At Points Each Threat can have an array of Swat Look at Points which is usually populated with world-space locations of visible doors.Instead of directly editing that, the BP_ThreatAwarenessActor class has an array called Swat Look at Point Proxy which will populate that other array at run time. Locations in this array are in local-space, so you can use the 3D gizmo to edit/visulize them. The proxy structure used can also optionally link to a Door Spawner or BP_LookAtProxy which the construction uses to keep the locations relative. To populate the Swat Look at Point Proxy, you should use the Tool’s Do Look At Traces with the Threats selected that you want to edit.Without needing to do any additional setup, this will trace to nearby door spawners and add them to the Swat Look at Point Proxy array if there is a clear line-of-sight. If you want a door to be ignored for tracing (for a doorway for example), in the door spawner’s details you can enable the Ignore for Look At variable. If the trace line previews don’t fade, you can press the Clear Debug Lines button at the top of the Tool. You can also manually add extra locations to the Swat Look at Point Proxy for each Threat that the Do Look At Traces will ignore when running. But to help with automating that instead, you can use the Framework’s BP_LookAtProxy actors.BP_LookAtProxy Place these at extra locations you’d like SWAT to look at. You can add Threats to the Forced Linked Threat Awareness array which will add this proxies’ location to them when Do Look At Traces is pressed. Selecting a proxy after Do Look At Traces is run will show where it’s used (unless it was forced, then it’s always shown) The selection-only debug previews only work/update when the Tool is open.Selected Proxy with Forced ThreatsYou can also switch the proxy to an automatic mode which will perform a trace by enabling Use for Auto Trace. This will make the proxy’s icon blue instead of purple and show radius previews for the Auto Min Distance and Auto Max Distance Auto Min Distance and Auto Max Distance can be used to constrain the trace. Not too close so the SWAT doesn’t twist weirdly and not too far for optimisation. Use Clip Plane will use the Clip Plane transform to further constrain valid Threats. You can use this make SWAT look at upstairs balconies from below but not above or at a corner from one side, but not the other etc. Clip Plane can be selected in the view-port to be moved or rotated. The plane is infinite, with Threats on the green side being kept. If you’ve already ran Do Look At Traces, you will see a temporary debug coloured point as you adjust the plane. Selected Proxy with Auto Trace and a Clip Plane4. Doors The selection-only debug previews only work/update when the Tool is open. That includes Front/Back text, clear-points and stack-up point info.Placement A room should always have it’s nav-mesh separated by a door or doorway Large spaces should be split at thresholds (usually with a doorway) to limit how much SWAT needs to clear, but it’s not required. Doors should NOT be scaled, instead you should select the DoorWayBox component and edit it’s Box Extent variable. DO NOT scale it. The DoorWayBox can be moved on the Y and Z axis. The actor’s root seems to usually be in the corner or towards the centre of a doors threshold. Using a custom door mesh smaller than the RoN door sizes is not recommended. Often this will lead to AI being able to path normally through a door, but SWAT not being able to do clear activities (probably due to the swung door’s nav modifier blocking the small threshold)A Doorway Box on Meth that is offset slightly from the actor rootFront &amp; Back Threats Front Threat should be assigned to an TL Extreme threat placed right in front of the door with the correct room. Back Threat should be assigned to an TL Extreme threat placed right in back of the door with the correct room. When you select a door spawner with the tool open, you will see front/back left/right texts which indicate what side you are facing.When the text is readable, you are on that side of the door. Once assigned, a green arrow (front) and red arrow (back) will be permanently visible to indicate assigned threats. In the tool, press the Sync Threat Awareness button.This will populate the Front/Back Threat Awareness Points arrays on ALL your door spawners based on the two above assigned threats. These are super critical. Your SWAT will stack, but not clear if these are missing.If these are assigned to the wrong room your game will crash when SWAT tries to clear the door, so be careful when duplicating already configured doors.Stack-Up Actors We will use the BP_StackUpActor class based on the RoN class “StackUpActor”. This contains some helpful debug previews and compatibility with door spawners. There should be 4 for each position; Front/Back left/Right Stack Up Points. These are variable arrays on the door spawner, in the World Gen &gt; Stackup category. Depth and Stack Up Position need to match on the Stackup actors. 0 = SP Alpha,1 = SP Beta etc Door Spawner should be linked on each BP_StackUpActor to it’s owning door. To avoid manually doing this, you should use the Tool. Select a door spawner. In the tool, press the Add Stackup Points button. Adjust the location of each BP_StackUpActor as needed. Make sure it is above valid nav-mesh Keep in mind the swing of the Door When selected, you will see the capsule size of the player/SWAT so you can place them far enough apart. You can rotate (usually the last two) points so SWAT covers more angles. Add Stackup Points The text box below that button is the folder location the new actors will be placed in the Outliner. The selector box to the right let’s you choose the initial offset of the new stackup actors. Place in Front can be more useful for corners or doorways placed 90° against a wall. You can use Undo to remove the added stackup actors, but double-check that there are not empty references left in your door spawner’s stackup arrays.Stackup Points when selected show assigned door and capsule size Room position can be used to limit stack-up points to one side in the command menu, but SWAT may not always respect it or may still “Pie it” or “Check the threshold”.In that case, you should delete the undesired side’s BP_StackUpActors from the level and assign the desired side’s array to the undesired now empty array in the door spawner’s properties. You can copy a variable quickly by Shift + Right Mouse Button clicking on the source and Shift + Left Mouse Button clicking on the target.Stackup Points in a Corner, with room position indicating undesired [X] stackupsClear Points There are 4 clear point arrays for each door spawner; Front/Back left/Right Stack Up Points. These are in the World Gen &gt; Clear Points category. For the arrow and sprite previews to be visible when selected, the Tool needs to be running. For each clear point added to the array; The first clear point in each array, index [0] should usually be right in front of the door’s swing and Direction MUST be set to None The next Clear Points’ Directions should be Right and incrementing Stage. Clear Point Trace Door LOS can be run from the tool with door/s selected to set the Has Line of Sight to Door bool variable on each clear point. Each clear point has a diamond-shaped gizmo to control it’s location in the viewport. I’d recommend using the Add Clear Point and Remove Clear Point buttons in the tool, since it will set all of this automatically and give a nice offset based on the last point.Add Clear Point Select a door spawner. In the tool, under the Add Clear Point button, chose which side and face to work on, such as Front Left To the right of the working side drop down selector, there is a check-box. This will change the sprite previews of the clear points when the door spawner is selected, showing only the currently “active” clear point array with colours. In the tool, press the Add Clear Point button. I’d recommend adding the first clear point for each side and face, as it will be added at an offset, indicating which way the clear path should head off in. Clear Points [0] added with the Tool button. Each will have slight offset The first point [0] should be placed in front of the door. It can be offset (along the doors threshold) for very long doorways, closer to the stackup actors. For double doors, it should be near the centre of the overall threshold, but offset to the relevant side. See Wide Doorway Image Keep using the Add Clear Point button to add to the clear path, following the outer edge of your room usually. Keep in mind; You should try to visit every Threat Awareness Actor in the room with either the Left or Right clear path for that face of the door. The first clear points should be close (~100 units) to the stack up points, so that the 2nd SWAT isn’t waiting for the 1st to reach his first clear point to enter the room and start their own clear. Clear points should be above nav-mesh and the clear path shouldn’t leave the room. Usually for the final element on each clear path, you should add the nearest Cover Landmarks to the relevant array. Each landmark should be added to one clear point element. Repeat the same process for the other 3 sides/faces. After placing or editing your clear points, in the tool with the door selected, press the Clear Point Trace LOS button. And also after editing your clear points, in the tool with the door selected, press the Clear Point Direction by Angle button.The 4 clear paths of a single door. Note that for each room, the clear points will take the SWAT along a path where they can see every threat.A wide doorway, with the first clear points moved closer to the stackup actors, on the opposite sidesAdd Clear Point (by Nav)If you want a more rapid process for this you can use the Add Clear Point (by Nav) in the tool. This is more useful for large areas like outdoors. Select a door spawner. In the tool, above the Add Clear Point (by Nav) button, chose which side and face to work on, such as Front Left Ensure at least the first clear point [0] has been added for the side/face you are working on. Press the Add Clear Point button if not, and adjust position if needed. To the right of the Add Clear Point (by Nav) button, use the number input to define your final clear point spacing. 100 is what the auto-gen spaces and is good for small rooms. 150 for medium rooms and 200/250 is great for large spaces. The selection numbered sprite previews only go up to 34, so you should probably adjust your spacing if you reach that many clear points 😉 Hold shift and select an additional actor (like a Threat) where you would like your path to navigate to. Add additional actors to your selection as needed to define a path all at once. Finally press the Add Clear Point (by Nav) button. This will try to attempt to find a path from the last element in the clear point array to each additional selected actor. A spline will temporarily be created and sampled along it’s path based on the spacing set in step #4. For each sampled point, a clear point will be added to the array you currently have selected in step #2 When done, with the door selected press the Clear Point Trace LOS and Clear Point Direction by Angle buttons like in #9 and #10 from the above section.Room PositionWorld Gen &gt; Room PositionRoom position has a minor effect on SWAT clearing but mainly effects stack up behaviour.The main differences of Centre vs Hallway are; Centre - Allows stack ups on either side of the door Front and Back. Hallway - Allows one stack, Front/Back (Not tested. Can Issue Orders on Front/Back Side may be more reliable if needed).When clearing, after passing the threshold, they will skip corner checks and focus/aim at further distances. SWAT voice lines will also be different when clearing and mirroring.As mentioned in #Stack-Ups the main purpose I’ve found for room position is to limit the command menu so there is only one stackup option.However SWAT may not always respect a left/right only room position if a stack-up is on the wrong side, or in front of the opening and may also still “PIE it” or “Check the threshold” if both stack-up arrays use separate actors.In that case, you should delete the undesired side’s BP_StackUpActors from the level and assign the desired side’s array to the undesired now empty array in the door spawner’s properties. When selecting a left or right room position, a red [X] will overlay the “disabled” stack-up actors. If the left and right arrays are set to the same actors these are always shown, so just ignore them.Double DoorsNote, traps don’t cover both doors and should be disabled for double doors.The basic setup for interactions on doors A and B; Set Sub Door Spawner on door A to door B Set Sub Door Spawner on door B to door A Pick one door, and enable Main Sub Door. Ensure this is disabled on the other door.For World Data related values; Stack-Up Actors are shared Because one door has 180° of yaw rotation, the arrays will need to be re-ordered. Room Position would need to be swapped if relevant. Clear Points will want to be copied but are going to be 180° in the wrong direction. Front and Back threat ABSOULUTELY needs to be re-assigned to the correct Threat actors.Therefore you can use the Tool to quickly fix this up; Start with only one door. Delete the sub-door if it exists. Setup stack up actors and clear points as usual for Door A. Stack up actors should be moved to the sides of the threshold for the side with the sub-door. The Stack-Up Actors’ Door Spawner variable can remain pointed at Door A for every side. Duplicate Door A and rotate/offset the new Door B as needed. Set the Sub Door Spawner references and Main Sub Door variables on door A and B. Don’t forget to untick Main Sub Door on door B if it was enabled for door A when you duplicated it! For the new door B, be sure to set the new correct Front Threat and Back Threat and run the Sync Threat Awareness Tool function at some point. If you forget this, your game will probably crash when SWAT interacts with the door. Select Door B. In the Tool, press the Flip Stackup Points button. This should flip the door’s Stack Up Points arrays so that they are correct for a 180° yaw rotation. To check this, use the select button by one of the arrays’ elements to confirm the stack up actor matches the Front/Back Left/Right texts. In the Tool, find the Flip Clear Points button and ensure the selector box to it’s right is set to 2x In the Tool, press the Flip Clear Points button. Adjust each clear point [0] element’s position so it’s at the centre of the threshold or at least nearer the side of Door B. You can also use these buttons if you want to flip a single door around and keep your setup stack-ups and clear points.Just be sure to set the offset in step #7 to 1x before running, Flip Stackup PointsAlso don’t forget to flip the Front Threat and Back Threat and run Sync Threat Awareness5. Rooms FinalNow that our Door’s and Threats are placed and referencing each other and assigned to Rooms, we want to ensure our Rooms’ variables are configured correctly. For each Room Proxy, select it and; Check that each of the Room’s doors are assigned to the Room | AdditionalRootDoorSpawners. A large orange bounds box and arrow should be surrounding them if the Tool is running. Check that Room | Connecting Rooms is populated with the names of the other Rooms which have shared doors with assigned Front/Back threats. A big orange arrow should link them if the Tool is running. Finally, in the Tool, run the Sync Threat Awareness button.Nothing needs to be selected when doing so.This function will; For Door Spawners; based on the Front/Back Threat populate the Front/Back Threat Awareness Points arrays, by matching Owning Room and Pathable Group ID. For Threats; populate the Pathable Threat Awareness Actors elements based on Owning Room and Pathable Group ID For Room Proxies; populate the Threats array by matching Room | Name to each threat’s Owning Room For Threats also; pick a Preferred Exit for each Owning Room if missing and add it’s world location to each threat’s Exits element [0] You much re-run this button once before launching your game if you; Delete or add a Threat Actor. Change a threats Owning Room or Pathable ID. Change a Door’s Front or Back Threat variables. Change Threat Actor’s Preferred Exit variable. Cover PointsCover Points are locations that Civs or Suspects can use to take cover. They are auto generated, pretty well, as long as your collisions are clean or you have helper blocking volumes set to the Cover collision profile. They are generated as an element of a collection called a Rail. Each rail has a Start and End world location and a struct array of the other cover point actors world location and a global unique ID number. Cover point actors for that reason, usually have a meta-data tag to prevent manual placement (disabled in newer framework builds) and have their transforms/location locked. Civilians will crouch/lean against cover. Suspects can shoot over or lean around cover based on it’s type.Cover Point OverviewFor the framework, you will be using the BP_CoverPoint blueprint based on the “CoverPoint” DynamicCoverSystem class.You should never manually place, copy or duplicate a BP_CoverPoint. If you need to add a single cover point, use the BP_CoverPoint_Single actor. If you want a new Rail of cover points, you will use a BP_CoverPointRailPreview and the Tool, as explained later. The location of a cover point is locked and shouldn’t be manually edited along with it’s rotation. You can edit it’s transform with the Tool’s Cover Rails section, covered in #Cover Rails Index: A unique number that needs to be unique across the whole level. This is the number shown in the view-port. Is Crouch Only Cover: Crouch or Crouch+Standing cover. If true, will only show the bottom Type sprite and direction arrows. Also changes the yellow box preview when selected. Stand Cover Type: Whether the user considers this a middle wall section, or if they have the option to lean based on a selected direction. This is shown by the top sprite, which is hidden if Crouch-Only is True. Crouch Cover Type: The same as above, but with the added combination option of Up if Crouch-Only is True. This is shown by the bottom sprite. Type sprites sizes are based on their location in a rail. First and Last elements are bigger than the elements in between. (You may require selecting with the Tool open to update this preview sometimes) Stand Cover Direction/ Crouch Cover Direction: Used when the user leans. The Direction is always just the Rail Start to Rail End vector or inverted, based on Left/Right. This is previewed by the Green Arrow (Left) and Blue arrow (Right) Cover Rail: A struct with the World Position Start and End, Direction and World Position + Index array of self and other Cover Point actors contributing to the rail. The Start and End are previewed by a 3D gizmo when selected. When selected and the Tool is open, the Rail will also be previewed with a yellow box with a height based on Crouch-Only. This doesn’t actually represent any surface, it’s just a preview I based on how far and high imported generated cover points are usually from the floor/wall. Automatic Generation Place a BP_CoverGen_Saver Place one or multiple Cover Gen Override Volumes to cover the playable nav mesh you want cover points to generate on. Don’t change any settings. When generating, sample traces will “walk” along the edge of the nav-mesh testing for a hit in the Cover channel at crouch and standing height. For better generation you should plug holes between props where you may want suspects to take cover behind.Regular Blocking Volumes can be used or they can also be set to Cover to not affect character collisions. You can cover gaps in balustrades, low car engine blocks, barricades of crates, tables and chairs etc. An example of how a ballistrade may be sampled when generating cover which may cause a cover point to not be generated, or an incorrect lean angle to be set An example of a blocking volume with Cover collision profile, placed over a static mesh to provide cleaner generation. Nothing more needs to be done if you want to just use automatic cover generation, which I’d recommend when iterating on your level. However, if your level geometry is locked-in you may wish to export out what is being generated and to edit and include with your level.Importing Automatic Generation Make sure a BP_CoverGen_Saver and or supporting actors are in the level as per above section. On the placed BP_CoverGen_Saver, set Save Cover Points to True (and also make sure Enabled is True). Save, Cook and Pak your level to your game install. Open the game and load your level. Wait for the countdown to finish and for you to spawn in game. Wait 4 to 10 seconds for the cover points to generate and save to disk. Close the game and navigate to %localappdata%\\ReadyOrNot\\Saved\\SaveGames\\Cover\\ in windows explorer. In the Tool, there is a button shortcut; You should find a .Cover.sav file that has your level name prefixed. Copy it. In your Framework Project’s directory, navigate to ...\\Saved\\, from here create a SaveGames folder if missing and within, a Cover folder if missing. In the Tool, there is another button shortcut, which also makes the folders if missing; Paste your LEVELNAME.cover.sav file into the project’s \\Saved\\SaveGames\\Cover\\ folder. Back in Unreal Engine, with your level open, in the Tool, press the Load Cover Point Save button.You should see below the number of Cover Point’s that have been read. If “No save file loaded/found.” is displayed, check that the correct level is loaded. You can see what .sav file is trying to be loaded in the text field to the left of the button. You can now press the Create Cover Point from Save button. A task will start and actors will start to be placed. Keep the editor focused until it completes. After importing and creating the cover points, the Tool will set any BP_CoverGen_Saver's Enabled variable to False effectively disabling it to avoid user error. If you want to iterate making changes for generation and visualising them in editor, you should delete every cover point in your level and set the Enabled to True before cooking, paking and loading your map. The BP_CoverGen_Saver should be disabled and can be deleted from the level once cover points have been created/imported. Editing Cover PointsClean-upAfter importing there may be some overlapping cover points/rails. To quickly find these, press the Select Next Overlap button. This will compare every cover point’s location in the level and find overlaps.It will select one set of cover points by the rail and focus the camera on them. You can usually press Delete to remove the selected cover points rail, then repeat from step #1 until Select Next Overlap is no longer selecting anything. BUG: Make sure you have no cover point selected before pressing the button. Looks like I forgot to clear your selection, so rails are still selected if nothing overlapping is found. Type ChangingCover Point typesYou’ll probably come across a few cover points which you may want to tweak the type on.Your free to do so, however keep in mind types that didn’t generate with a direction (ie Walls), will have no Direction vectors set. You can fix this by selecting the cover point/s and pressing the Guess Cover Direction button in the Tool which will pull the direction from the rail locations. Honestly you can probably just select every cover point (Ctrl + Shift + A) and run this if you want, since it seems to match what is generated normally.Removing Cover Point/s If you want to remove a cover point that is a part of a remaining rail, you should use use the Delete Cover Point &amp; Update button in the tool.If you want to remove an entire rail set of cover points, with them all selected, you can use the regular Delete key since there will be no remaining references. You can use Select Cover Points by Rail Group for quick selecting.Appending Cover Point You can add a cover point to a rail using the Append Cover Point &amp; Update button.This is based on the location of the selected cover point in a rail, determining which side of the rail it will be placed.You edit it’s location you can use the Tools #Cover Rails section.Cover RailsGizmo BlueprintThe BP_CoverPointRailGizmo is a custom Framework blueprint which is for manipulating the transforms of cover points in a rail. It’s NOT meant to be manually placed.Usage: Select a cover point or multiple. Press Create Rail Gizmo from Point to create a rail gizmo. If multiple points from the same rail was selected, only one gizmo will be created.If a rail gizmo already exists for that cover point’s rail, it will be selected instead.Therefore, if you wanted to create gizmos for the whole level, it is safe to just select every cover point and create rail gizmos. Rail gizmos can be freely deleted and remade. Rail gizmos are selected via the now always visible blue mesh preview, or the &lt;--- Rail Gizmo ---&gt; text. Rail gizmos can be moved or rotated to move every cover point in the rail set that it has been assigned. Don’t scale. Individual cover point locations can now be manipulated by first selecting the rail gizmo, then using the diamond gizmos to edit. Be sure to select the gizmo’s wire-frame and not the cover point sprite so you don’t change your actor selection. The Delete and Append cover point Tool buttons will update rail gizmos when used, but work best on the start and end cover points of a rail. Even then, the logic isn’t great, so you may end up with some weird behaviour with new points on the wrong side or the need to delete and remake a rail gizmo.Preview BlueprintPreview Rail gizmo handlesThe BP_CoverPointRailPreview is a preparation tool. It can be used to create a completely new rail and set of cover actors.Usage: Place a BP_CoverPointRailPreview in the level. Adjust it’s location so the points are above the ground. The preview wall offset will match what you see when you select a regular cover point. You can use the Rail Start and End diamond wire-frame gizmos to size your rail and preview your cover points. You can edit various variables to automatically set properties on the cover point actors that will be created as-well-as spacing options. When ready, press Convert Rail Preview to create your new cover point actors and delete the preview blueprint. The Convert Rail Preview performs the actor creation then preview deletion as two separate “Transactions”.This means if you want to reuse the preview blueprint, you can run Undo once to get the blueprint while also retaining the new actors.Press Undo twice to fully undo the operation if needed.Cover Point SingleIt’s single, not meant to mingle.The BP_CoverPoint_Single blueprint is also based on the “CoverPoint” DynamicCoverSystem class, however, it has no transform locks. It’s rail is set relative to itself. It’s rail is not meant to be expanded with other cover points. While the Tool does work with it, you shouldn’t ever use it with this blueprint to append etc. Great when you just need an extra cover point somewhere on it’s own, like around a tree trunk or column etc." }, { "title": "World Data Authoring Guide", "url": "/posts/mapping_worlddata/", "categories": "Map Modding", "tags": "maps, world data", "date": "2025-03-10 00:00:00 +0000", "snippet": " The Los Suenos Stories update to the Community Framework, reworked the following world gen related assets to the base game Door class rather than Door Spawners.The old guide is hidden, but available here. You can still use that guide to create world data for your existing door spawner copies or those in the Deprecated.zip If you are making a new map or are reworking to use the base Doors, DO NOT use that linked guide.OverviewWorld data is the info needed by AI to know about rooms. It is intertwined with doors to let SWAT know how to stack up, clear rooms, know where to look as-well-as by the suspects and civilians for fleeing and retreating.An example of world data for 3 roomsThis is a brief overview of the classes which you will be using to author your level’s World Data.Overview: World Data Actor The core of the world data in your level is contained in a single actor in your level; the World Data Generator Ready Or Not class.This World Data actor contains an array of Room Data which contains a reference to their Doors and Threat Awareness Actors, along with a unique name, location and other linked rooms.Rather than trying to manually populate the room values, the Framework instead provides the Editor Only actor class Editor Only Room Proxy which will populate the Room Data|Rooms in the data generator when it’s construction script is run. Placing one in your level will disable automatic world data generation in game due to “Has World Ever Been Generated” being automatically set to True.Overview: Editor Only Room Proxy Editor Only Room ProxyThis is a Framework only class which is used to contain a single room’s Room Data in a visual form, so that you’re less likely to make mistakes when setting things up.It has selection based visuals for assigned doors and linked rooms, as well as an automatic name check so you can’t create conflicts.The rooms’ “Threats” arrays will also be auto-populated based on the name.Overview: Threat Awareness Actors These are scattered throughout a room, usually at a 250x250 grid interval, but tighter in narrow nav areas.They have 3 main functions. When clearing a room, SWAT needs to clear each by getting line-of-sight to it’s position. They are used by SWAT to determine where to stand in a room based on the Threat Level. The nearest Threat will have an array of Swat Look At Points so they have an appropriate angle to cover when not in combat.The Framework’s Threat Awareness Actor has loads of helpful construction script logic and visuals. Notably, the essential Pathable Threat Awareness Actors array will be auto-populated based on the assigned “Owning Room” and “Pathable Group ID”Overview: Editor Only Look At Proxy Editor Only Look At ProxyThis is a Framework, Editor Only helper actor which is used to auto-populate and/or auto-trace additional “Swat Look at Points” when using the World Data Helper toolSetting Up World DataThis guide will cover setting up a simple map with 3 rooms, but can be extrapolated to any sized map.Keep in mind, in vanilla RoN maps, world data is mostly automatically generated, so manually setting this up isn’t an exact science concerning measurements/spacing.ToolThis guide makes heavy use of the Editor Utility Widget called EUW_Tool_WorldDataHelper_Framework.It’s also used to display extra actor visuals when they are selected. If I refer to “the Tool” in the guide, I’m referencing this widget.To run it; find it in /Content/Game/Mods/Tools/EUW_Tool_WorldDataHelper_Framework and press Right-Click | Run Editor Utility Widget In the DarkWaters framework, this was in /Content/Game/Mods/Tempalte/Blueprints/WorldData/With the Door update, this tool is no longer hard-coded to reference door spawners and other bps and instead works with the base game classes.1. World Data Generator Place a single World Data Generator anywhere in your level. Make sure Has World Ever Been Generated is True. This will skip the game’s auto-generation at run-time. Make sure there are no other World Data Generator placed in your level After placing a World Data Generator with Has World Ever Been Generated = True, your map will no longer have any cover point generation. To remedy this you should place a BP_CoverGen_Framework and RoN Cover Gen Override Volumes in your level.2. Rooms I’d suggest just setting up two rooms to begin with, even if you have placed all your doors already. You can expand later. A room should always have it’s nav-mesh separated by a door or doorway Outdoor areas should also be rooms. Large spaces should be split at thresholds to limit how much SWAT needs to clear, but it’s not required. Place two Editor Only Room Proxy on either side of a threshold where there is/will be a door or doorway. The “Location Offset” visual, should be at the height of the nav mesh. The Room | Location will be auto-calculated from this offset location. Room XY position isn’t too critical, just try to make it centred and visible for yourself. Each room needs a unique Name. The construction script will give a new one if a conflict is found in the level. Connecting Rooms needs to be populated with each room directly connected with a door in the current room. (Rooms that share doors) To avoid mistakes, you should use the Quick Add Connecting Rooms picker to do this, as it will also populate the other room’s list with the currently selected room. If the Tool is running, you should see a large arrow pointing at connected rooms when a room is selected. Root Door needs to be assigned. This can be shared between other rooms. See Doors Placement briefly if you don’t have doors yet. Additional Root Doors All other doors for the room should be assigned. This needs the Root Door assigned too. Construction script will try to add it. Root Door and Additional Root Doors If you are duplicating rooms and changed the Root Door, be sure to remove it from Additional Root Doors if needed. Threats will need to be populated, but we will come back to this laterExample Room Details View3. ThreatsFor each room; Place a Threat Awareness Actor in the room. It should have nav mesh near it, placed just above nav-mesh height. Set the Owning Room This can be set with the Quick Add Room picker to avoid typos. Each room name will generate a randomly coloured cone that should match the other’s in the room. Check Is Outside if applicable. Keep duplicating your threats to cover the entire nav-mesh of your room. See placement; Auto generation spaces them at 150-250u with closer points when nav-mesh edges are closer.Meth Outside Threats Threats are points that the SWAT has to visually check in order to clear a room. If SWAT can see all points from their clear path, they will stop following the path and resume their other activities. Keep that in mind for corners, you may want to offset a threat closer to an inside wall or behind an obstruction of a corner so that SWAT has to check more of an angle in that location. Threats are also used to determine where the SWAT should stand to minimise their perceived threat. Most maps have a single default threat level with one safer threat level to mark preferred safe standing locations in a room. Doors always have extra TL Extreme threats placed in front/back of them. They are almost always off place from the main grid spacing, about 80 units away from each side.Meth Door Threat Placement Stair threats use the TL Stairs threat level and should be; Placed on one side of the nav-mesh boundary (or both if wide enough) Elevated much higher, usually above any balustrades or rails so that look-at-traces have clearer line-of-sights to doors and proxies for tracing. Placed much tighter together, about 60 units. This is probably to give more accurate SWAT look-at-points.Meth Stair Threats You can mark a single threat per room as Preferred Exit for use in the later sync step. Exits are supposed to be used by suspects and civs in some capacity when fleeing or retreating. I don’t have much more info beyond that, most RON maps seem pretty random where this is placed in each room, but I’d imagine somewhere with cover or a corner would be preferred. If one isn’t manually assigned for a room, it will be randomly chosen for each room later. Example Threats for 3 rooms Pathable Threat Awareness Actors will need to be populated with all the other room’s threats.This is done by the BP’s construction script so long as the Owning Room matches, the Pathable Group ID matches and Setup Pathable Automatically is enabled.However a construction script is only ran when the placed actor is modified, so in a later step we will use the Tool’s Sync Threat Awareness button to ensure all the threats are linked. If the Tool is running, you should see arrows pointed at nearby pathable threats when a threat is selected. Just keep in mind, for editor responsiveness, this wont show EVERY linked threat if there’s many in the same room or they are too far. This button can be pressed whenever, if you would like to see its effects as you set things up.You should see your Room Proxies’ Room | Threats arrays also populate after pressing. You can use the Select by Pathable Tool button when you have a threat selected, to add all the other room’s threats to your selected actors.SWAT Look At Points Each Threat can have an array of Swat Look at Points which is usually populated with world-space locations of visible doors.Instead of directly editing that, the BP_ThreatAwarenessActor class has an array called Swat Look at Point Proxy which will populate that other array at run time. Locations in this array are in local-space, so you can use the 3D gizmo to edit/visulize them. The proxy structure used can also optionally link to a Door or Editor Only Look At Proxy which the construction script uses to keep the locations up to date. To populate the Swat Look at Point Proxy, you should use the Tool’s Do Look At Traces with the Threats selected that you want to edit.Without needing to do any additional setup, this will trace to nearby doors and add them to the Swat Look at Point Proxy array if there is a clear line-of-sight. If you want a door to be ignored for tracing (for a doorway for example), in the door’s details you can enable the Ignore for Look At variable. If the trace line previews don’t fade, you can press the Clear Debug Lines button at the top of the Tool. You can also manually add extra locations to the Swat Look at Point Proxy for each Threat that the Do Look At Traces will ignore when running. But to help with automating that instead, you can use the Framework’s Editor Only Look At Proxy actors.Editor Only Look At Proxy Place these at extra locations you’d like SWAT to look at. You can add Threats to the Forced Linked Threat Awareness array which will add this proxies’ location to them when Do Look At Traces is pressed. Selecting a proxy after Do Look At Traces is run will show where it’s used (unless it was forced, then it’s always shown) The selection-only debug previews only work/update when the Tool is open.Selected Proxy with Forced ThreatsYou can also switch the proxy to an automatic mode which will perform a trace by enabling Use for Auto Trace. This will make the proxy’s icon blue instead of purple and show radius previews for the Auto Min Distance and Auto Max Distance Auto Min Distance and Auto Max Distance can be used to constrain the trace. Not too close so the SWAT doesn’t twist weirdly and not too far for optimisation. Use Clip Plane will use the Clip Plane transform to further constrain valid Threats. You can use this make SWAT look at upstairs balconies from below but not above or at a corner from one side, but not the other etc. Clip Plane can be selected in the view-port to be moved or rotated. The plane is infinite, with Threats on the green side being kept. If you’ve already ran Do Look At Traces, you will see a temporary debug coloured point as you adjust the plane. Selected Proxy with Auto Trace and a Clip Plane4. Doors The selection-only debug previews only work/update when the Tool is open. That includes Front/Back text, clear-points and stack-up point info.Placement A room should always have it’s nav-mesh separated by a door or doorway Large spaces should be split at thresholds (usually with a doorway) to limit how much SWAT needs to clear, but it’s not required. Doors should NOT be scaled, instead you should select the Door Way component and edit it’s Box Extent variable. DO NOT scale it. The Door Way can be moved on the Y and Z axis. The actor’s root seems to usually be in the corner or towards the centre of a doorways threshold. Using a custom door mesh smaller than the RoN door sizes is not recommended. Often this will lead to AI being able to path normally through a door, but SWAT not being able to do clear activities (probably due to the swung door’s nav modifier blocking the small threshold)A Doorway box component on Meth that is offset slightly from the actor rootFront &amp; Back Threats Front Threat should be assigned to an TL Extreme threat placed right in front of the door with the correct room. Back Threat should be assigned to an TL Extreme threat placed right in back of the door with the correct room. When you select a door with the tool open, you will see front/back left/right texts which indicate what side you are facing.When the text is readable, you are on that side of the door. Once assigned, a green arrow (front) and red arrow (back) will be permanently visible to indicate assigned threats. In the tool, press the Sync Threat Awareness button.This will populate the Front/Back Threat Awareness Points arrays on ALL your door based on the two above assigned threats. These are super critical. Your SWAT will stack, but not clear if these are missing.If these are assigned to the wrong room your game will crash when SWAT tries to clear the door, so be careful when duplicating already configured doors.Stack-Up Actors There should be 4 for each position; Front/Back left/Right Stack Up Points. These are variable arrays on the door, in the World Data &gt; Stack Up category. Depth and Stack Up Position need to match on the Stack Up actors. 0 = SP Alpha,1 = SP Beta etc Door should be linked on each BP_StackUpActor to it’s owning door. To avoid manually doing this, you should use the Tool. Select a door. In the tool, press the Add Stackup Points button. Adjust the location of each Stack Up Actor as needed. Make sure it is above valid nav-mesh Keep in mind the swing of the Door When selected, you will see the capsule size of the player/SWAT so you can place them far enough apart. You can rotate (usually the last two) points so SWAT covers more angles. Add Stackup Points The text box below that button is the folder location the new actors will be placed in the Outliner. The selector box to the right let’s you choose the initial offset of the new stack up actors. Place in Front can be more useful for corners or doorways placed 90° against a wall. You can use Undo to remove the added stack up actors, but double-check that there are not empty references left in your door’s stack up arrays.Stackup Points when selected show assigned door and capsule size Room position can be used to limit stack-up points to one side in the command menu, but SWAT may not always respect it or may still “Pie it” or “Check the threshold”.In that case, you should delete the undesired side’s Stack Up Actors from the level and assign the desired side’s array to the undesired now empty array in the door’s properties. You can copy a variable quickly by Shift + Right Mouse Button clicking on the source and Shift + Left Mouse Button clicking on the target.Stackup Points in a Corner, with room position indicating undesired [X] stack up actorsClear Points There are 4 clear point arrays for each door; Front/Back left/Right Stack Up Points. These are in the World Data &gt; Clear Points category. For the arrow and sprite previews to be visible when selected, the Tool needs to be running. For each clear point added to the array; The first clear point in each array, index [0] should usually be right in front of the door’s swing and Direction MUST be set to None The next Clear Points’ Directions should be Right and incrementing Stage. Clear Point Trace Door LOS can be run from the tool with door/s selected to set the Has Line of Sight to Door bool variable on each clear point. Each clear point has a diamond-shaped gizmo to control it’s location in the viewport. I’d recommend using the Add Clear Point and Remove Clear Point buttons in the tool, since it will set all of this automatically and give a nice offset based on the last point.Add Clear Point Select a door. In the tool, under the Add Clear Point button, chose which side and face to work on, such as Front Left To the right of the working side drop down selector, there is a check-box. This will change the sprite previews of the clear points when the door is selected, showing only the currently “active” clear point array with colours. In the tool, press the Add Clear Point button. I’d recommend adding the first clear point for each side and face, as it will be added at an offset, indicating which way the clear path should head off in. Clear Points [0] added with the Tool button. Each will have slight offset The first point [0] should be placed in front of the door. It can be offset (along the doors threshold) for very long doorways, closer to the stack up actors. For double doors, it should be near the centre of the overall threshold, but offset to the relevant side. See Wide Doorway Image Keep using the Add Clear Point button to add to the clear path, following the outer edge of your room usually. Keep in mind; You should try to visit every Threat Awareness Actor in the room with either the Left or Right clear path for that face of the door. The first clear points should be close (~100 units) to the stack up points, so that the 2nd SWAT isn’t waiting for the 1st to reach his first clear point to enter the room and start their own clear. Clear points should be above nav-mesh and the clear path shouldn’t leave the room. Usually for the final element on each clear path, you should add the nearest Cover Landmarks to the relevant array. Each landmark should be added to one clear point element. Repeat the same process for the other 3 sides/faces. After placing or editing your clear points, in the tool with the door selected, press the Clear Point Trace LOS button. And also after editing your clear points, in the tool with the door selected, press the Clear Point Direction by Angle button.The 4 clear paths of a single door. Note that for each room, the clear points will take the SWAT along a path where they can see every threat.A wide doorway, with the first clear points moved closer to the stack up actors, on the opposite sidesAdd Clear Point (by Nav)If you want a more rapid process for this you can use the Add Clear Point (by Nav) in the tool. This is more useful for large areas like outdoors. Select a door. In the tool, above the Add Clear Point (by Nav) button, chose which side and face to work on, such as Front Left Ensure at least the first clear point [0] has been added for the side/face you are working on. Press the Add Clear Point button if not, and adjust position if needed. To the right of the Add Clear Point (by Nav) button, use the number input to define your final clear point spacing. 100 is what the auto-gen spaces and is good for small rooms. 150 for medium rooms and 200/250 is great for large spaces. The selection numbered sprite previews only go up to 34, so you should probably adjust your spacing if you reach that many clear points 😉 Hold shift and select an additional actor (like a Threat) where you would like your path to navigate to. Add additional actors to your selection as needed to define a path all at once. Finally press the Add Clear Point (by Nav) button. This will try to attempt to find a path from the last element in the clear point array to each additional selected actor. A spline will temporarily be created and sampled along it’s path based on the spacing set in step #4. For each sampled point, a clear point will be added to the array you currently have selected in step #2 When done, with the door selected press the Clear Point Trace LOS and Clear Point Direction by Angle buttons like in #9 and #10 from the above section.Room PositionWorld Data &gt; Room PositionRoom position has a minor effect on SWAT clearing but mainly effects stack up behaviour.The main differences of Centre vs Hallway are; Centre - Allows stack ups on either side of the door Front and Back. Hallway - Allows one stack, Front/Back (Not tested. Can Issue Orders on Front/Back Side may be more reliable if needed).When clearing, after passing the threshold, they will skip corner checks and focus/aim at further distances. SWAT voice lines will also be different when clearing and mirroring.As mentioned in #Stack-Ups the main purpose I’ve found for room position is to limit the command menu so there is only one stack up option.However SWAT may not always respect a left/right only room position if a stack-up is on the wrong side, or in front of the opening and may also still “PIE it” or “Check the threshold” if both stack-up arrays use separate actors.In that case, you should delete the undesired side’s Stack Up Actors from the level and assign the desired side’s array to the undesired now empty array in the door’s properties. When selecting a left or right room position, a red [X] will overlay the “disabled” stack-up actors. If the left and right arrays are set to the same actors these are always shown, so just ignore them.Double DoorsNote, traps don’t cover both doors and should be disabled for double doors.The basic setup for interactions on doors A and B; Set Drive Sub Door on door A to door B Set Drive Sub Door on door B to door A Pick one door, and enable Main Sub Door. Ensure this is disabled on the other door.For World Data related values; Stack-Up Actors are shared Because one door has 180° of yaw rotation, the arrays will need to be re-ordered. Room Position would need to be swapped if relevant. Clear Points will want to be copied but are going to be 180° in the wrong direction. Front and Back threat ABSOULUTELY needs to be re-assigned to the correct Threat actors.Therefore you can use the Tool to quickly fix this up; Start with only one door. Delete the sub-door if it exists. Setup stack up actors and clear points as usual for Door A. Stack up actors should be moved to the sides of the threshold for the side with the sub-door. The Stack-Up Actors’ Door variable can remain pointed at Door A for every side. Duplicate Door A and rotate/offset the new Door B as needed. Set the Drive Sub Door references and Main Sub Door variables on door A and B. Don’t forget to untick Main Sub Door on door B if it was enabled for door A when you duplicated it! For the new door B, be sure to set the new correct Front Threat and Back Threat and run the Sync Threat Awareness Tool function at some point. If you forget this, your game will probably crash when SWAT interacts with the door. Select Door B. In the Tool, press the Flip Stackup Points button. This should flip the door’s Stack Up Points arrays so that they are correct for a 180° yaw rotation. To check this, use the select button by one of the arrays’ elements to confirm the stack up actor matches the Front/Back Left/Right texts. In the Tool, find the Flip Clear Points button and ensure the selector box to it’s right is set to 2x In the Tool, press the Flip Clear Points button. Adjust each clear point [0] element’s position so it’s at the centre of the threshold or at least nearer the side of Door B. You can also use these buttons if you want to flip a single door around and keep your setup stack-ups and clear points.Just be sure to set the offset in step #7 to 1x before running, Flip Stackup PointsAlso don’t forget to flip the Front Threat and Back Threat and run Sync Threat Awareness5. Rooms FinalNow that our Door’s and Threats are placed and referencing each other and assigned to Rooms, we want to ensure our Rooms’ variables are configured correctly. For each Room Proxy, select it and; Check that each of the Room’s doors are assigned to the Additional Root Doors. A large orange bounds box and arrow should be surrounding them if the Tool is running. Check that Connecting Rooms is populated with the names of the other Rooms which have shared doors with assigned Front/Back threats. A big orange arrow should link them if the Tool is running. Finally, in the Tool, run the Sync Threat Awareness button.Nothing needs to be selected when doing so.This function will; For Doors; based on the Front/Back Threat populate the Front/Back Threat Awareness Points arrays, by matching Owning Room and Pathable Group ID. For Threats; populate the Pathable Threat Awareness Actors elements based on Owning Room and Pathable Group ID For EO Room Proxies; populate the Threats array by matching Name to each threat’s Owning Room For Threats also; pick a Preferred Exit for each Owning Room if missing and add it’s world location to each threat’s Exits element [0] You must re-run this button once before launching your game if you; Delete or add a Threat Actor. Change a threats Owning Room or Pathable ID. Change a Door’s Front or Back Threat variables. Change Threat Actor’s Preferred Exit variable. Add, remove or update an Editor Only Room Proxy. Cover PointsCover Points are locations that Civs or Suspects can use to take cover. They are auto generated, pretty well, as long as your collisions are clean or you have helper blocking volumes set to the Cover collision profile. They are generated as an element of a collection called a Rail. Each rail has a Start and End world location and a struct array of the other cover point actors world location and a global unique ID number. Cover point actors for that reason, usually have a meta-data tag to prevent manual placement (disabled in newer framework builds) and have their transforms/location locked. Civilians will crouch/lean against cover. Suspects can shoot over or lean around cover based on it’s type.Cover Point OverviewYou should never manually place, copy or duplicate a Cover Point. If you need to add a single cover point, use the BP_CoverPoint_Single_Framework actor. If you want a new Rail of cover points, you will use a Editor Only Cover Point Rail Preview and the Tool, as explained later. The location of a cover point is locked and shouldn’t be manually edited along with it’s rotation. You can edit it’s transform with the Tool’s Cover Rails section, covered in #Cover Rails Index: A unique number that needs to be unique across the whole level. This is the number shown in the view-port. Is Crouch Only Cover: Crouch or Crouch+Standing cover. If true, will only show the bottom Type sprite and direction arrows. Also changes the yellow box preview when selected. Stand Cover Type: Whether the user considers this a middle wall section, or if they have the option to lean based on a selected direction. This is shown by the top sprite, which is hidden if Crouch-Only is True. Crouch Cover Type: The same as above, but with the added combination option of Up if Crouch-Only is True. This is shown by the bottom sprite. Type sprites sizes are based on their location in a rail. First and Last elements are bigger than the elements in between. (You may require selecting with the Tool open to update this preview sometimes) Stand Cover Direction/ Crouch Cover Direction: Used when the user leans. The Direction is always just the Rail Start to Rail End vector or inverted, based on Left/Right. This is previewed by the Green Arrow (Left) and Blue arrow (Right) Cover Rail: A struct with the World Position Start and End, Direction and World Position + Index array of self and other Cover Point actors contributing to the rail. The Start and End are previewed by a 3D gizmo when selected. When selected and the Tool is open, the Rail will also be previewed with a yellow box with a height based on Crouch-Only. This doesn’t actually represent any surface, it’s just a preview I based on how far and high imported generated cover points are usually from the floor/wall. Automatic Generation Place a BP_CoverGen_Framework Place one or multiple Cover Gen Override Volumes to cover the playable nav mesh you want cover points to generate on. Don’t change any settings. When generating, sample traces will “walk” along the edge of the nav-mesh testing for a hit in the Cover channel at crouch and standing height. For better generation you should plug holes between props where you may want suspects to take cover behind.Regular Blocking Volumes can be used or they can also be set to Cover to not affect character collisions. You can cover gaps in balustrades, low car engine blocks, barricades of crates, tables and chairs etc. An example of how a ballistrade may be sampled when generating cover which may cause a cover point to not be generated, or an incorrect lean angle to be set An example of a blocking volume with Cover collision profile, placed over a static mesh to provide cleaner generation. Nothing more needs to be done if you want to just use automatic cover generation, which I’d recommend when iterating on your level. However, if your level geometry is locked-in you may wish to export out what is being generated and to edit and include with your level.Importing Automatic Generation Make sure a BP_CoverGen_Framework and or supporting actors are in the level as per above section. On the placed BP_CoverGen_Framework, set Save Cover Points to True (and also make sure Enabled is True). Save, Cook and Pak your level to your game install. Open the game and load your level. Wait for the countdown to finish and for you to spawn in game. Wait 4 to 10 seconds for the cover points to generate and save to disk. Close the game and navigate to %localappdata%\\ReadyOrNot\\Saved\\SaveGames\\Cover\\ in windows explorer. In the Tool, there is a button shortcut; You should find a .Cover.sav file that has your level name prefixed. Copy it. In your Framework Project’s directory, navigate to ...\\Saved\\, from here create a SaveGames folder if missing and within, a Cover folder if missing. In the Tool, there is another button shortcut, which also makes the folders if missing; Paste your LEVELNAME.cover.sav file into the project’s \\Saved\\SaveGames\\Cover\\ folder. Back in Unreal Engine, with your level open, in the Tool, press the Load Cover Point Save button.You should see below the number of Cover Point’s that have been read. If “No save file loaded/found.” is displayed, check that the correct level is loaded. You can see what .sav file is trying to be loaded in the text field to the left of the button. You can now press the Create Cover Point from Save button. A task will start and actors will start to be placed. Keep the editor focused until it completes. After importing and creating the cover points, the Tool will set any BP_CoverGen_Framework's Enabled variable to False effectively disabling it to avoid user error. If you want to iterate making changes for generation and visualising them in editor, you should delete every cover point in your level and set the Enabled to True before cooking, paking and loading your map. The BP_CoverGen_Framework should be disabled and can be deleted from the level once cover points have been created/imported. Editing Cover PointsClean-upAfter importing there may be some overlapping cover points/rails. To quickly find these, press the Select Next Overlap button. This will compare every cover point’s location in the level and find overlaps.It will select one set of cover points by the rail and focus the camera on them. You can usually press Delete to remove the selected cover points rail, then repeat from step #1 until Select Next Overlap is no longer selecting anything. BUG: Make sure you have no cover point selected before pressing the button. Looks like I forgot to clear your selection, so rails are still selected if nothing overlapping is found. Type ChangingCover Point typesYou’ll probably come across a few cover points which you may want to tweak the type on.Your free to do so, however keep in mind types that didn’t generate with a direction (ie Walls), will have no Direction vectors set. You can fix this by selecting the cover point/s and pressing the Guess Cover Direction button in the Tool which will pull the direction from the rail locations. Honestly you can probably just select every cover point (Ctrl + Shift + A) and run this if you want, since it seems to match what is generated normally.Removing Cover Point/s If you want to remove a cover point that is a part of a remaining rail, you should use use the Delete Cover Point &amp; Update button in the tool.If you want to remove an entire rail set of cover points, with them all selected, you can use the regular Delete key since there will be no remaining references. You can use Select Cover Points by Rail Group for quick selecting.Appending Cover Point You can add a cover point to a rail using the Append Cover Point &amp; Update button.This is based on the location of the selected cover point in a rail, determining which side of the rail it will be placed.You edit it’s location you can use the Tools #Cover Rails section.Cover RailsGizmo actorThe Editor Only Cover Point Rail Gizmo is a custom Framework actor which is for manipulating the transforms of cover points in a rail. It’s NOT meant to be manually placed.Usage: Select a cover point or multiple. Press Create Rail Gizmo from Point to create a rail gizmo. If multiple points from the same rail was selected, only one gizmo will be created.If a rail gizmo already exists for that cover point’s rail, it will be selected instead.Therefore, if you wanted to create gizmos for the whole level, it is safe to just select every cover point and create rail gizmos. Rail gizmos can be freely deleted and remade. Rail gizmos are selected via the now always visible blue mesh preview, or the &lt;--- Rail Gizmo ---&gt; text. Rail gizmos can be moved or rotated to move every cover point in the rail set that it has been assigned. Don’t scale. Individual cover point locations can now be manipulated by first selecting the rail gizmo, then using the diamond gizmos to edit. Be sure to select the gizmo’s wire-frame and not the cover point sprite so you don’t change your actor selection. The Delete and Append cover point Tool buttons will update rail gizmos when used, but work best on the start and end cover points of a rail. Even then, the logic isn’t great, so you may end up with some weird behaviour with new points on the wrong side or the need to delete and remake a rail gizmo.Preview ActorPreview Rail gizmo handlesThe Editor Only Cover Point Rail Preview is a preparation tool. It can be used to create a completely new rail and set of cover actors.Usage: Place a Editor Only Cover Point Rail Preview in the level. Adjust it’s location so the points are above the ground. The preview wall offset will match what you see when you select a regular cover point. You can use the Rail Start and End diamond wire-frame gizmos to size your rail and preview your cover points. You can edit various variables to automatically set properties on the cover point actors that will be created as-well-as spacing options. When ready, press Convert Rail Preview to create your new cover point actors and delete the preview actor. The Convert Rail Preview performs the actor creation then preview deletion as two separate “Transactions”.This means if you want to reuse the preview a, you can run Undo once to get the preview actor while also retaining the new actors.Press Undo twice to fully undo the operation if needed.Cover Point SingleIt’s single, not meant to mingle.The BP_CoverPoint_Single_Framework blueprint is also based on the “CoverPoint” DynamicCoverSystem class, however, it has no transform locks. It’s rail is set relative to itself. It’s rail is not meant to be expanded with other cover points. While the Tool does work with it, you shouldn’t ever use it with this blueprint to append etc. Great when you just need an extra cover point somewhere on it’s own, like around a tree trunk or column etc." }, { "title": "The Basics", "url": "/posts/thebasics/", "categories": "General Information", "tags": "essential, batch", "date": "2025-02-27 00:00:00 +0000", "snippet": "Important InformationUnderstanding the File StructureWhen creating a project in Unreal Engine 5, the project will be saved to a directory. Within that directory will be the project. For example: &lt;SaveDirectory&gt;/&lt;ProjectName&gt;/…. &lt;ProjectName&gt; houses all of the contents of the Unreal Engine 5 project. In that project folder, there will be a subfolder named Content. That folder houses all of the assets and blueprints within a game.In the case of Ready or Not, the project name is ReadyOrNot. Within that folder, there is a folder called Content. Again, this houses everything inside a game except for configuration files. However, when you open the game files in UModel, there may not be a Content folder, instead, it’ll have been replaced with a Game folder. When .paking your mod, you should replace Game with Content. Any of the sub folders will remain the same.The majority of the modding that you will do will be under the Content folder. If a file that you are looking to override is in .../ReadyOrNot/Game/ReadyOrNot/Assets/Weapons/Python, the file path to copy would be .../Content/ReadyOrNot/Assets/Weapons/Python. Failure to copy the exact path of Ready or Not will result in a broken mod.File FormatsThere are multiple different file formats that you may encounter while modding. Here is a list of most of them, and what each of them are. .psk - A skeletal or static mesh. May contain the skeleton. .psa - An animation for a specific mesh. .uasset - Two types. Raw .uasset files are the ones created after cooking a UE5 project. UE5 .uasset files are the ones that are taken directly from a UE5 project, they are uncooked and can be transferred between projects. .uexp - An raw complementary file to uassets, usually containing import and export maps. .ubulk - Another data storage file that UE5 uses. .umap - A level/map file, similar to .uasset in the way that there is an uncooked and cooked version.EssentialsExtracting Game FilesThere are three methods of extracting games files, both have important differences: FModel This is the most supported for engine versions beyond UE5, but requires some setup and a RoN specific mapping file (See Mappings). FModel can save original cooked assets for editing in programs like UAssetGUI as-well-as export resources like textures, static meshes and skeletal meshes into editable formats. UModel. This program can export non-raw files, allowing you to gain access to textures, models, and animations. To use it, direct it towards the location of the .pak files within Ready or Not: &lt;GameInstallLocation&gt;\\Ready Or Not\\ReadyOrNot\\Content\\Paks. You’ll be able to extract individual assets once loaded. However, it’s main source has been unsupported for versions of Unreal Engine beyond UE5. There is a community build linked above for UE5+, but use it at your own risk. Manual unpaking. This can be done simply by setting up an unpak batch script. You can only extract raw cooked files this way. Create a .bat file in your UnrealPak install location (located within your Unreal Engine 5 install), usually &lt;InstallLocation&gt;\\UE_5.3\\Engine\\Binaries\\Win64\\UnrealPak.exe. In the .bat file, paste the following lines in and save: @if \"%~1\"==\"\" goto skip @setlocal enableextensions @pushd %~dp0 md \"%~dpn1\\\" .\\UnrealPak.exe %1 -extract \"%~dpn1\\\\\" -extracttomountpoint @popd @pause :skip Drag the .pak file you want to unpak, for example pakchunk0-Windows, directly onto the .bat file you just created. This will extract the pak’s files in the same location as the pak file, in a new folder with its name. Now that the game is split into multiple paks, this method isn’t really recommended except for debugging your own mod pak files. You should usually use umodel or fmodel for extracting specific assets (umodel has a better flat view search, fmodel is better supported and lets you directly scoop through assets json).Usually you’d use fmodel if you want to export the entire game’s pak content. Cooking Modified FilesIn order to override any assets within the game or add new content, the files must be in a format that the game can recognize. The files you extracted via UModel will be in a format that is easily accessible by you, not the game. You will first need to cook these before PAKing the files. Install the latest version of Unreal Engine 5.3. The current latest version is 5.3.2. Import all the files you want to pack with your mod into a new blank project. Any other template can work, but will result in significantly longer cooking times. Go to File &gt; Cook Content for Windows. This converts the files into a UE5 exported format (*.uasset, *.uexp, *.ubulk). Retrieve the cooked files in &lt;ProjectLocation/&gt;&lt;ProjectName&gt;/Saved/Cooked/WindowsNoEditor/.Creating a PAK File Make sure the folder you are paking, for example pakchunk99-Mods_MyMod_P, contains the same file structure as Ready or Not. Also ensure that _P is at the end of your pak name. Not doing so will likely result in the mod not loading. The number after pakchunk indicates the load order of the .pak. Make sure to understand the directory structure first, before paking your mod. Incorrect directory structure will lead to issues. Your structure should mimic something like this: pakchunk99-Mods_MyMod/Content/ReadyOrNot/Assets/…. Create a .bat file in your UnrealPak install location (located within your Unreal Engine 5 install), usually &lt;InstallLocation&gt;\\UE_5.3\\Engine\\Binaries\\Win64\\UnrealPak.exe. In the .bat file, paste the following lines in and save: @setlocal ENABLEDELAYEDEXPANSION@if \"%~1\"==\"\" goto skip@setlocal enableextensions@pushd %~1(for /R %%f in (*) do @set \"filePath=%%f\" &amp; set \"relativePath=!filePath:%~1=!\" &amp; @echo \"%%f\" \"../../../ReadyOrNot!relativePath!\")&gt;\"%~dp0/filelist.txt\"@pushd %~dp0::-compresslevel=4 for Normal, -compresslevel=-4 for uncompressed hyperfast paking.\\UnrealPak.exe \"%~1.pak\" -create=filelist.txt -compress -compressionformats=Oodle -compressmethod=Kraken -compresslevel=4@popd@pause:skip Do not include any symbols besides - _ in your full folder paths.Broken Folder Structure Example: C:\\Mods, Bats &amp; Stuff\\pakchunk99-Mod_ExampleMod_P\\ See more info and downloads for batch scripts @Batch Files This pak script needed to be updated for UE5, so if you modded before on UE4.27, be sure to update it. Drag the folder you want to PAK, for example pakchunk99-Mods_MyMod_P, directly onto the .bat file you just created. This will create a .pak file in the same directory as the folder you just dragged. If the .pak file size is 1 KB, change the locations of the contents you are attempting to pak.Additional InformationMod InstallationAll .pak mods go here. &lt;GameInstallLocation&gt;\\Ready Or Not\\ReadyOrNot\\Content\\Paks. Ensure that the .pak load order is correct.Example ModTo see if your PAKing is working, download this example mod. This will turn your logo on the main menu pink if the .pak is correctly PAKed. Download and extract the .zip file before PAKing. Replaces the Ready or Not main menu title logo with a pink textureDebuggingIf your mod is not working, make sure to check these common error points: Check the file structure. This must perfectly match the files within the game, otherwise it will not load. No _P at the end of the mod name. This is needed when a patch pak is used for the main game files. Load order. Incorrectly load order may cause issues between mods, change the numerical elements of the pak name to change the load order. Mount point (The best way to debug any issues is to use the builtin UnrealPak.exe. Simply open this with cmd with the line: unreakpak.exe -List This_Is_A_Pak.pak. Look at the mounting point. The mounting point will be the deepest folder that encapsulates all of your content. If it is not, you may have an issue.)" }, { "title": "Mod Level Data", "url": "/posts/mapping_ModLevelData/", "categories": "Map Modding", "tags": "maps, mod level data, brief, briefing, description, objective, entry points", "date": "2024-08-23 00:00:00 +0000", "snippet": "OverviewA Mod Level Data (MLD) is a data asset you can include in your pak to customize the following for a level; Show in mission Select true/false Level Display Name, Nickname and Designation Level Picture Level Description Mission Select Preview Map Objectives Entry Points Briefing Images and Map Image Briefing Biographies Briefing Timeline By default, if you don’t include a MLD for your level, the game will create one at run time based on the file name and display it in the levels list.That auto MLD also includes the default Objectives; BringOrderToChaos and RescueAllCivilians.Basic MLD Setup1.) CreationTo create a MLD you can use two methods:A) Manual In the content browser navigate to your level’s content directory and optionally add a ModLevelData folder Within your folder, press the + Add button in the top left, and create a Miscellaneous &gt; Data Asset In the popup window, search for mod level data and chose the Mod Level Data class, then press Select to create it. Naming isn’t essential, however, usually you want to use: MLD_YourLevelFileNameB) Scripted Asset ActionThis is the same process as above, but is automated. Optionally add a ModLevelData folder to your level directory. Select your level/s and right-click it. Press Scripted Asset Actions -&gt; Create Mod Level Data For the first/only level selected; In the file selector, chose a location in your level directory, like the folder you created in step 1.) Don’t change the name. For the first/only level selected; In the popup window, search for mod level data and chose the Mod Level Data class, then press Select to create it. Find your MLD in the chosen folder and save them. This action will work with multiple levels selected Create data asset and set MLD file name automatically Set Level Name automatically to level file name + Friendly, Nickname and Designation. Set default Objectives When run with multiple levels selected, the folder path is based on the first level’s popup choice in step 2.)2.) Configuration Open your new Mod Level Data asset Set the very, very top Level Name variable to the file name of your level. There are some hard-coded forbidden names you must avoid such as house and any vanilla Ready Or Not map names. Example Map MLD “Level Name” set to the level’s file name Expand Data if not already and set values for Friendly Level Name, Level Nickname and Level Designation. These are the user-facing display names, so can differ from your file name. If missing entries; find the Objectives array and add + two entries. Set one to BringOrderToChaos Set the second to RescueAllOfTheCivilians By default, after creating a custom MLD for your level, these are missing, so your mission will auto complete if you do not add them now. 3.) CookingBy default when you specify your level to be included in the build (in Packaging Settings) there is no reference chain to your Mod Level Data assets.Some basic solutions to this are to include the MLD containing folder in the extra directories to be cooked (project settings) or by referencing the MLD in your level blueprint.The Los Suenos Stories Framework update includes a simple blueprint actor that you can also now use. Open your level which is set in the Project Settings to be cooked. Go to /Content/Mods/Template/Blueprints/ (or your copy) Place a BP_ModLevelDataReferencer in your level. Add an entry to Mod Level Datas and then use the picker to find and add the MLD you created earlier. If you have many MLD that you want to reference, you can select them all in the Content Browser, then drag them onto the Mod Level Datas property to quickly add them all. That’s it! There’s now a reference chain to your MLD so they will be automatically included in your cook when your map is set to cook.Mission Select Image and Preview LevelScreen ShotsCaptureWe’ll need an image for the MLD and for our mission selector level later. You can either take this in game or in editor.For in game; Use a mod like “Console Unlocker - Camera Mod” to free cam Set your resolution to 16x9 if you have a ultra-widescreen. Set any upscaling to off or native. Set game resolution to &gt;= 100% Take your screenshot with steam ( F12 ), Print Screen key, Windows Snipping Tool ( Windows Key + Shift + S ) or even better; If you have a console enabled (via UE4SS etc) you can run highresshot 2 This will output to ...\\Ready Or Not\\ReadyOrNot\\Ready Or Not\\Saved\\Screenshots\\ The 2 means double your resolution so you can downscale the image with much better anti-aliasing. For in editor; Create a camera actor in your level. Ensure Constrain Aspect Ratio = True and Aspect Ratio is set to 1.777778 (16/9) In the top left of your 3D viewport, click the (usually named) Perspective drop menu and select your new camera. Enable game view by pressing G and fullscreen (F11) Again in the top left of your 3D viewport, click the hamburger icon Click High Resolution Screenshot... Set Screen Shot Multiplier so it will create a 4k+ image based on your current resolution. 1080p would be 2.0+ 1440P would be 1.5+ 4k could use 1.2+ for better anti-aliasing. Pilot your camera into the desired location and click Capture Use the pop-up in the bottom right to open your project’s screenshot folder or find it at .\\Saved\\Screenshots\\WindowsEditor\\Process and Import In Photoshop or a free alternative, scale your image to 2048x2048 pixels. Save as a .png or .tga 24bit. File naming is optional but T_UI_MissionSelect_YourLevelName is a recommended format In UE5, in your level folder create a /UI folder Import your screenshot to this folder, via the content browser. Open your newly imported texture and set: Texture Group to UI Mip Gen Settings to NoMipmaps Save your texture.Example Map screenshot texture settingsMission Selector LevelWhile you can create one from scratch, copying the ExampleMap’s and using it as a template is recommended. Open a second content browser if one isn’t open. Navigate the first to your level asset directory. Navigate the second to /Content/Mods/Template/Levels/ Copy the RoN_ExampleMap_MissionSelect level to your folder by dragging it and choosing Copy Here from the prompt. Rename the copied level to YOURLEVELNAME_MissionSelect Naming is option, but this format is recommended. Ensure the renamed level is saved, then, right-click your folder and run Fix Up Redirects Open the level.Screenshot Texture SetupMission Select levels are meant to be extremely light-weight so they load quickly. Most levels are going to consist of an image plane mesh, assigned an unlit material with a screenshot texture. A camera is pointed at it with the actor tag LosSuenosCamera added to indicate to the game which camera to view.Since you have a copy of the example mission select map, you just need to swap the material to show your new screenshot texture. Open your second content browser if one isn’t open. Navigate one to your levels /UI folder from before Navigate the other to /Content/Mods/Template/Levels/UI/ Select both M_MissionSelect_Template and MI_MissionSelect_ExampleMap With both selected, drag both to your /UI folder IMPORTANT: Select Advanced Copy Here then OK in the pop-up window. Do not use the regular copy! Otherwise the Material Instance will have it’s parent and reference still set to the original material in the template folder,which you DO NOT want in order to stop conflicts with other mappers. Optionally rename both the material and instance with _YourLevelName appended (instead of “ExampleMap” or “Template”), then on your /UI folder run Fix Up Redirects Open your copy of M_MissionSelect_Template Find the Texture Sample node to the left and select it. Assign your new screenshot texture via the details panel on the left. In the top left of the window press Apply and save. Close the window. Material texture node assignment Open your _MissionSelect level if it’s not open. Select the Plane static mesh actor that has the template’s screenshot material assigned. From the details window, change the assigned material to your material instance. Adjust the level as needed. You can view the camera via the top-left menu in the viewport, just be careful not to move it. Remove the TextRenderActor in front of the plane static mesh actor since it will be in the way. You can customize the view with basic particles or animated materials for water etc. You may need to add lights such as a moveable spotlight if you add actors to the scene which you want to see. Save your LevelMLD Level Picture, Mission Select Map and extra MLD Open your MLD Assign your new screen shot texture to Level Picture This is used in the top-left lobby HUD when a level has been chosen, as well as on the projector screen in the HQ lobby. Assign Mission Select Map to your _MissionSelect level.Example Map MLD assigned screenshot texture and _missionSelect levelNow that you have another level, by default, it will be selectable as a playable level in game, which you don’t want. To fix this; Create a new Mod Level Data data asset for your _MissionSelect level using the same methods in #basic-mld-setup. This MLD does not require any objectives to be set etc. Only the Level Name MUST be set In the new _MissionSelect MLD change Show in Mission Select to false Open your actual, playable Level In your BP_ModLevelDataReferencer actor, add an entry and assign your new MLD for the _MissionSelect level so that it is included in your cook.Example Map MLD and the mission select level’s MLD (“MLD_ExampleMap_MS”)Entry pointsTBDObjectivesTBDUsing Vanilla Levels for ReferenceReady or Not’s vanilla levels now use a similar data asset class to fulfill the same purpose that the MLD does for modded levels.If there’s something you want to know that the guide doesn’t cover, you can often check out how it’s done in vanilla levels.However with UE5 you can no longer even open the read-only cooked game assets.Instead you can use the EUW_Tool_ObjectViewer widget located in /Content/Mods/Tools/With this you can drag in any cooked game asset that doesn’t crash when loaded (and isn’t a data TABLE), and see what properties have been configured in a GUI format. Although it will let you edit values, they will not be saved/saveable and often crash your editor so don’t do that ;)Briefing AudioBecause the briefing audios are hard-coded to FMOD events there’s no direct way to customize this for your level.There is the old /Content/Mods/Template/Blueprints/Audio/BP_BriefingAudioSpawner which uses the Mod Sound event and FMOD programmer sounds to hackily play audio somewhat unreliably.Guide/Rework of that TBD" }, { "title": "Getting Started With UAssetGUI", "url": "/posts/uassetmodding/", "categories": "UAsset Modding", "tags": "ue4ss, uassetgui", "date": "2024-08-19 00:00:00 +0000", "snippet": "Getting Started With UAssetGUIIntroductionThis guide will give you a general overview on how to use UAssetGUI, so that you can edit games files (such as creating cosmetic additions, weapon/attachment mods, in-depth AI mods, and more).UAssetGUI SetupDownload: https://github.com/atenfyr/UAssetGUI is the official source for UAssetGUI Sometimes the most recent version does not have a full binary release (standalone .exe) download. If you need the absolute most recent version, follow the instructions at the bottom of the page to compile it yourself. After doing so, the .exe and other required files are in C:/Users/UserName/UAssetGUI/UAssetGUI/bin/Debug/net8.0-windows. You can copy paste the contents of this folder into elsewhere on your computer if you wish, and run it from there.Download Mappings file: Mapping File Open UAssetGUI and set the Engine version to 5.3 at the top right drop-down. If you don’t see the current version, then you don’t have the most recent version of UAssetGUI. Go to Utils &gt; Import mappings… and select and open the mapping file downloaded from above and give it a name. Finally next to the drop-down where you set the engine version - select the mapping file you just opened from the drop-down.FModel SetupThe first step to modifying cooked assets is to extract them from the game files. The recommended method currently is FModel for targeted extractions.Download FModel: https://fmodel.app/If this is your first time using FModel start from 1, if not skip to 5: Launch FModel, on the window, click the arrows for ADD UNDETECTED GAME and select C:\\SteamLibrary\\steamapps\\common\\Ready Or Not\\ReadyOrNot (or the corresponding location in your custom library) as your directory AND press the + button. Select the UE Version to be GAME_UE5_3 and press OK Go to Settings and under General &gt; Advanced, Enable Local Mapping File and set the Mapping File Path to the downloaded Mappings file. (This will allow you to view the cooked content in FModel) Take note of your export “Output Directory” On the Archives Tab, select all the .paks from the game and click Load. Find the asset you wish to modify by navigating through the folders. Once found, right click on the file name and select Export Raw Data (.uasset). The Console on the bottom of FModel should let you know when the export has completed. Click on the underlined link in the console which takes you to the export directory it saved in. Otherwise just navigate to it as you would usually do for any file. The asset will have at minimum a .uasset file, but it also very likely have a .uexp and possibly a .ubulk file. These extra files are necessary components for the data storage format that cooked assets use. They must be kept in the same folder and named the same as the corresponding .uasset that they belong to. This applies for editing assets with UAssetGUI, as well as including them in the mod (and ending .pak file) so that the asset works in game. It is recommended that you copy and then paste the relevant asset files for the one you are modifying into another directory that you make yourself. This way you can keep a copy of the original for you to fall back onto if you mess up editing your working copy (quite likely when you are starting out). This allows you to avoid having to extract the asset again.Opening an AssetTo open an asset, drag the .uasset file onto the open UAssetGUI window or do File &gt; Open and point it towards the .uasset file.Once you open the file, there are some potential errors to be aware of: If it says “System.ArgumentOutOfRangeException”, then you likely didn’t include the .uexp or .ubulk components of the asset in the folder. If it says “File format not recognized”, then you likely are trying to open something that isn’t a .uasset (the only type that can be opened in UAssetGUI). If it says “Failed to parse x export!” and then provides a list of assets that it could not access, then it means those assets are not present in the folder/structure you are opening the asset from. It depends on what you are modifying and what you need to do, but sometimes you can ignore the error if you don’t need to change anything about the export that is broken. If you do need to change the export that is broken with this error, then you need to extract the referenced asset and place them in the folder structure that the game files use and are expecting.There are more potential errors, such as “Failed to serialize”, that have various causes. You should not experience this particular error when opening unmodified game assets, as they should only happen when someone has made an error when modifying the asset.General File OverviewOnce you get in, here is some relevant info on the parts of the file: The Name Map is a registry of sorts for data within your file. This is used on the back-end of your file to know what goes into certain entries. The items here can be changed, and it will change the corresponding items elsewhere in the file automatically (do so with caution). The Import Data is a list of references to parts of other things (other assets or C++) that your file needs to work. You don’t need to include these in your mod unless it is part of the list of assets that GUI specifically requests, and is one you need to modify. The import list can be added to in order to facilitate referencing more game assets (such as using more models). To do so, follow the formatting of similar imports. This may be 1-3 separate entries on the list. The Export Data is the list of data stored within your file, where it has properties that the game uses. This is where you will be doing most of the modding. Every asset is different, so have a look around. Not everything you might want can be changed, but some of the exposed data can be changed, added to, or redirected to change what the asset does (to a degree).Modifying EntriesGeneral guidelines for modifying entries in the file: Double click on an entry to modify it. Press tab to confirm and move to the right, or enter to confirm and move down. Number swaps are the easiest thing to do. Do note that the same value (that you need to change) may appear in more than one location, it just depends on the asset. If you are trying to change references to other assets within your asset (example of a model swap), it is usually better to change the references on the name map (which it will most likely be on). Such a reference will have an entry for the file name itself, plus one for the file-path as a whole. Both need to be changed accordingly to what you need. After saving and reloading the file, all references to these will be changed elsewhere in the file. The reference to “/Game/…” in file-paths is equivalent to the “Content” folder in the game files. This is a carryover of how UE works in general. Not every entry on an export may do things. RoN has many artifacts of development that may or may not have been used at some time, but no longer do anything. There is no way to tell unless someone tells you, or you try yourself. It is recommended that you press Enter to confirm that you are done editing after finishing on a row. It is unknown if it is necessary, but sometimes edits have not saved properly if Enter was not pressed. Make sure you are spelling and capitalizing, as well as using symbols correctly. The game is expecting very specific rules, so you need to match what it wants. File names may not be internally consistent, so be diligent when typing. Copy paste works from within the text boxes, so you can use it. If you are having difficulty understanding an asset, you can also use FModel for reference on assets. It will show most of the things on the exports list, although they may not be formatted the same or in the same order. But it may be more readable for you than UAssetGUI. VERY IMPORTANT: follow the formatting that similar entries use. The game/another file is expecting things to be a certain way, so give it what it is looking for. Free-forming entries will likely result in an error, or the file not working. The order that things appear (or the lack thereof) in columns on an entry is important.Saving Once you are done modifying the file, do File &gt; Save. If it gives you an error here, it most likely did not save. You will need to address the error before it will let you save. It is not possible to list all potential errors as they can change depending on version and what is wrong with the file. When you are able to save, be sure to try to re-open the file again. If it gives a new error, then something is wrong with the file, and it will most likely not work in game. You may have modified something wrong or made a bad reference. All components of the file (.uasset and possibly .uexp and .ubulk) need to be included in the .pak for your mod. Don’t forget to copy them over when doing that. By default, UAssetGUI is set to create .bak files when you save. These are just archived versions of the previous version (when the file was opened or from before the most recent save). To be able to use them again, just edit the filename to remove “.bak” and they will work as normal. You can also disable this feature as a whole in the settings in Edit &gt; Settings. Including these in your mod will have no effect, but it is doubling the file size of the assets you modified.Using JSON This section describes an optional feature, which is (at least at the time of writing) not required.UAssetGUI has the capability to save the file to UAssetAPI JSON (UAssetAPI is a foundation that UAssetGUI is built on). You can do this as an alternative to editing one entry at a time in UAssetGUI, or for large changes.Notepad++ or Visual Studio Code, with some good plugins for JSON and the ability to compare files is (very useful for inspecting other mods to see what they changed).As the UAssetGUI software and game engine changes, it may or may not become necessary to use JSON to make certain changes.As always, follow formatting for similar entries if you want things to work. You can consult similar asset files (from the game or mods) to get a more comprehensive idea of what to do.Any error at all in JSON formatting will likely break the file upon trying to import it back into UAssetGUI, and it may not be obvious why.Adding DataThe following was written by QuantumNuke75 on how to use the JSON formatting to modify files:This can be a very complicated portion of modding. Make sure to read all of this very carefully. This section will be specific in what to do and what to not do, but will not explain everything, as each file can be a little different. As long as you make sure the imports are correct and that you added the data correctly, the file should work. Open the UAsset file in UAssetGUI. Export the JSON file, and open that file in a text editor of your choice. I would suggest using Notepad++ and the JSON Parser plugin. This will let you auto-format the JSON file. When adding data, you’ll need to copy and paste whatever data you’re trying to add more of. If if this is a new item in ItemDataTable.uasset, then you’ll need to copy another item in the datatable. Copy and paste whatever you would like to duplicate into the correct location. Keep in mind all of the commas and brackets. If you see a negative number that doesn’t correlate to coordinates, or scale, or rotation, this is an import reference. If you open Import Data located in the left pane of UAssetGUI, you’ll see a bunch of negative numbers in the first column and other data stored in rows. This is the \t portion of the file that contains all the references and imports the file uses. Also within this file, you’ll see a column label called OuterIndex. This column will also contain a bunch of negative nunber and 0s. The 0s indicate that the row is not a child of another row. If this row contains a negative number within that column, then that row depends on another dependency. You can find this dependency as you would any other import, locatin the row with said negative number. When adding a reference from the game, it’s a good idea to copy and paste similar references and then change the strings slightly. This ensures that you will retain the correct formatting. You can add this reference either in the JSON file or in UAssetGUI. Both are better in different scenarios. If you’re going to add a bunch of imports, use the JSON file, otherwise use UAssetGUI. Save the JSON file with all your edits and open that JSON file in UAssetGUI. If you get an error, you messed up the JSON formatting. If you have made all your data additions and made sure to have the proper imports (you may need to import multiple times for just one thing), then the mod should work. You can tell if it’s working if the game does’t freeze or crash on launch (wait until the intro screen ends). If this occurs there is a high chance you messed up something with the imports.Ask For Help!UAssetGUI is a complex thing to work with. You will likely have some learning curve issues if you are doing anything beyond an easy number change. The Ready Or Mod server (https://discord.gg/9AHSaF6dNM) has a tech-support channel where someone can answer questions you may have, about UAssetGUI or other aspects of modding.Otherwise, hopefully elsewhere on this site will have something that will help you out on other aspects of making mods for RoN." }, { "title": "Getting Started with Ready or Not Mapping in UE5", "url": "/posts/mapping_gettingstartedue5/", "categories": "Map Modding", "tags": "maps, essential, introduction", "date": "2024-08-08 00:00:00 +0000", "snippet": "Getting Started with Ready or Not Mapping in UE5 [POST DLC1 Home Invasion] If you already have a map made in UE4 for Ready or Not we have a Migration Guide into UE5 for you.IntroductionReady or Not is currently Unofficially supported by dedicated modders. Due to the hard work of them we are currently able to get around 80-90% of the experience that Official Maps have; there is expected to be a little bit of Jank when creating maps.This guide will step you through the basic set of requirements needed to build custom levels for Ready or Not and complete your first iteration by getting your map into the game. Ready or Not mapping REQUIRES that you download and use Unreal Engine 5.3.2. Do not download or use any other version. If this is your first time creating a map, be aware that the level of experience to create something functioning is considered Intemediate. It is recommended that you spend some time watching and learning some beginner videos for Unreal Engine on youtube before you start asking too many newbie questions.If you need help or have any questions, don’t hesitate to join the RoN Custom Maps Discord!The Level Design Cycle for RoNWe currently provide a template project that contains all the gameplay features/blueprints needed to make RoN maps here: Installation.For the Level Design process, you pretty much do it all within Unreal Engine, and can use whatever (reasonable) method you want to create your level.It is important to note that currently we cannot test gameplay within Unreal Engine and can only do it within the Game. To actually play the level you need to pack your level into a deployable .PAK file. More info here: Cooking &amp; Packaging &amp; InstallingDevelopment ExampleIf you would like to see what it’s like to make a map for Ready or Not, I recorded my entire development for Hell Comes to the Hills.YouTube Playlist: Ready or Not: Custom Map Development by DeltaInstallationUnreal Engine Download and install the Epic Launcher. Open the Launcher, go Unreal Engine on the left side bar, then Library along the top toolbar Under Engine Versions press the + icon and next to the Version Number, click the drop down and select 5.3.2 and InstallThe Template Project Download the Template from Nexus and extract it to your preferred location: Ready Or Not Community Mapping Framework Open the extracted ReadyOrNot folder and run ReadyOrNot.uprojectIf you open the Content Browser (Ctrl+Spacebar) and navigate to Content &gt; Mods &gt; Template &gt; Levels, there are 3 levels here: RoN_ExampleMap This is as the name suggests an Example Map which shows how the different mechanics of the game need to be implemented: Including Spawning, Doors, AI, Lighting, QSM and Ambient Sounds. It’s meant as a learning and reference level if you need to check how things should be implemented. RoN_ExampleMap_MissionSelect A very basic level that is only used when you are selecting a level in the Station. RoN_Template This is a barebones level that will cook and play in the game. You can use this as a template if you are making a new map, but we will make one from scratch in a little bit below to explain the requirements. RoN_WorldGen This is an advanced example map made showcasing what can be done with the World Data Guide RoN_DifficultyExampleMap This is an intermediate example map made showcasing what can be done with Custom Map Difficulties Your First Map If you have seen previous YouTube tutorials it may have said you need to set up the Render Settings, or modify the Packaging settings. With the latest version of the Template, you do not need to change or extract any settings. You should be good to go from the first time you launch.The Folder StructureBefore we continue, it is very important to understand the folder structure of an Unreal Project.Unreal uses this concept of a Content folder, this is where all the game content and maps for the game reside (located at: ...\\ReadyOrNot\\Content).When you install a .PAK file you are essentially adding or overriding assets in Content. Any change you make here will likely affect other mods that people use. This a more common occurance when a lot of us are using the same Marketplace or Quixel/Megascans assets.More importantly, it can also cause conflicts with the core Blueprints required for gameplay!To prevent us from stepping on each other’s work and causing game crashing conflicts: Create a directory for yourself within the Mods folder using your username and place ALL your assets (including 3rd Party/Marketplace/Quixel/Megascans) there. Drag the Mods &gt; Template &gt; Blueprints folder into your newly created folder from Step 1. Within the Content Browser, right click on the Mods folder and select “Fix Up Redirectors” Within your folder from Step 1, create a empty folder called “ModLevelData” We will use this later on to put our Mission Select and Level Select data The Mods folder should now look like the following:Content Mods ModLevelData Template Tools YourUserName Blueprints ModLevelData You may want to copy the Mods folder back into your project from the Framework.7z for future reference. The reason we move the Blueprints folder into our own is because as development continues newer version of the Blueprints may come out that fix bugs or improve functionality. If we just overwrite the previous version within the Template directory, it WILL cause issues for other mappers. Since you will be visiting your folder frequently I would consider changing the the folder color and adding it your favourites within the Content Browser. You can do this by simply right-clicking the folder here.Bare Essentials for Gameplay Before proceeding: It is CRITICAL that you have read the previous section on Folder Structure. Do not proceed until you have completed the steps above. Following the previous steps in Folder Structure, go to your ...\\Mod\\YourUsername directory in the Content Browser and create a new Level then open it Whatever you name it will be what it shows up as in-game But do not name it “House” - it is a restricted namespace and will not load in game Once opened, on the toolbar click Blueprints button and click Open Level Blueprint Under Class Settings, check the details panel and change the Parent Class to ReadyOrNotLevelScript Click Compile, and you can save and exit the window On the toolbar select Window &gt; Place Actors Within the new Place Actors window select the Geometry Tab and chuck down a couple of boxes to make a floor and a couple of walls to act as a space to play in. If everything is black, press Alt+3 to switch to Unlit Mode Back in the Place Actors window, search for, and place down the following: 1 Player Start Actor This is where your Player and Team Spawn Nav Mesh Bounds Volume Required for your AI to function, whatever this covers will be where your AI can walk Roster Scenario Spawner Actor This creates your gameplay objectives and spawns In the Content Browser, navigate to ...\\Content\\YourUserName\\Blueprints and place down the following: 2 BP_AISpawn_Managed Spawn points for AI - we will come back to this in a little bit Also move them up from the ground about 50uu - Sometimes AI will not spawn if flush with the ground AI are technically not needed, but without it the map will automatically complete when you play it and you wont be able to test it. BP_SpawnManager_V3 Required to spawn AI BP_CoverGen Required for the AI to actually be active and move around the map during combat After you place down these Blueprints in your map you can search it in the Place Actors tab.Additional ThingsLightingCurrently your level doesn’t have any light, so we should set up the basic stuff so we can actually see when we playtest it. Add the following: On the toolbar select Window &gt; Env. Lighting Mixer and in the new window click on: Create Sky Light In the Outliner select it and set the Mobility to Static Create Atmosphereic Light (our Directional Light) In the Outliner select the DirectionalLight it and set the Mobility to Stationary With it still selected, Go to Cascaded Shadow Maps and set the Dynamic Shadow Distance StationaryLight to 4000 and set the Num Dynamic Shadow Cascades to 1. These values will be what you will see in game Create Sky Atmosphere Create Height Fog In the Place Actors window search for and place down: Lightmass Importance Volume and adjust it to cover the playable area 1 Sphere Reflection Probe that encompasses the map Without reflections the models/guns in game can look flat and not properly lit. If you set your Directional Light to be the Atmosphere Sun Light (done by default if you did the above), you can use Ctrl+L to change the direction of your sun nowAI SpawnsThe 2 BP_AISpawns_Managed blueprints that we placed down are not configured yet, so lets do that by adding a Civilian and Suspect: Select an AISpawn and under AISpawn &gt; Spawn Array press the + symbol Expand the new array element and also expand Spawned AI This is where you choose what AI to Spawn To begin with change the Data Table to AIDataTable_Gas &amp; the Row Name to Civilian_Gas_Woman_01 Select the other AISpawn and follow the same steps but change the Row Name to Suspect_01_Shotgun Check for both of these AISpawns that the Spawn with Tags in the Spawn AI array element is set to “group1” The Spawn with Tags allows us to use the BP_SpawnManager_V3 to control what spawns with specific tags It should be set to “group1” by default. Additionally check that for each AISpawn that under Actor &gt; Tags there is an entry of “Managed” Without this the Spawn Manager cannot find the AISpawn and will not spawn them. It should be set to “Managed” by default. You can select any Data Table and Row Name for your map and you are not restricted to 1 Data Table.Your AISpawn details should look something similar to this:Spawn ManagerThe BP_SpawnManager_V3 is required to spawn AI. By default it is set up work with any AISpawn that uses “group1”. This can be found under Default &gt; AISpawn Configs in the manager.You are free to add and change the tags on the Spawns and Manager how you see fit for you level. There are a couple of notes: You can have AISpawns with different AIDataTable and/or Row Values spawn on the same tag without any issues. (it’s how we set it up above). eg: Notice that the 2 AISpawns have Civilian_Gas_Woman_01 &amp; Suspect_01_Shotgun but share the same tag of “group1” You can use this to create a variety of scenarios for your map! If you want a set number of a specific AI tag group to spawn, set the MinimumAmount &amp; MaximumAmount to be the same number. If you want to spawn a random range of enemies of a tag, set a min and max value but also Enable RandomizeWithinRange. For now we can just leave everything as default.DoorsDoors are pretty simple to place down and edit into your map. In the Place Actors window, search for Door and place down a Door actor. This may sometimes show as BP_Door_New You can change which door you want by going to Door &gt; Type of Door and selecting the desired door from the Row Name dropdown. The basic Template includes the Static Meshes so you can preview the door but not the materials. To get them you will need to follow the steps in Using Ready or Not Game Assets and Content To use double doors, add a second door actor and rotate it 180° into position.In both door actors set Drive Sub Door to the other actor and in ONE door actor, enable Main Sub Door.Some doors have a left/right variant so the hinge/handle models are correct. However some are unfinished/unused and have the wrong rotation, so should not be used.Building / Baking DO NOT SELECT “BUILD ALL LEVELS”! Doing so will lock the editor in Texture Streaming and you will need to force close the editor through Task Manager. You have been warned!If you’ve been following along so far, then you probably have not built your map. Building parts of your map fixes up changes in Geometry &amp; Volumes, Lighting &amp; Reflections and Pathing. You should do it whenever you want to update/preview changes in your map.To build your map, on the Toolbar, drop down Build and select what is appropriate: Map Check Check for errors in your map - this will usually run if you do any build settings regardless but useful if you dont want to modify anything. Build Geometry This will rebuild your brushes and volumes after editing Usually best to do this first before any other builds Build Pathing Will update the NavMesh of any changes, best to do it after building geometry. Build Lighting Only As the name suggests, will build lighting on your map. This is what you’ll be building 90% of the time. Build Reflection Captures Self-explanatory, if you build lighting it will also usually build reflections, but if you want to save time and just update reflections use this. Build Landscapes Self-explanatory. Precompute Static Visibility NOTE: In UE5.3.2 Precomputed Visibility (PCV) is sorta broken - you cannot visualize cells in the Editor and you can never really get rid of the Error Message. You can disable the Error Message in Project Settings &gt; Engine Settings &gt; Rendering &gt; Culling and disable Warn about no precomputed visibiilty. You can STILL build PCV and the data will remain, but you will not be able to verify it. You will need to enable Precompute Visibility in World Settings to get it to build. PCV will usually build after lighting. My usual build process currently is: Build Geometery &gt; Pathing &gt; Lighting. Once the builds complete, you should File &gt; Save All Building times can vary, but the largest determining factor is usually Lighting. As map size increases and the quality of Lighting is changed, builds can take anywhere from 2mins all the way up to 6hrs and longer. At the moment the map should probably only take a couple of seconds.CookingCooking is the process of turning the project into content that can be deployed on other machines. We also only want cook content that is only important for the map to keep file size small. We need to configure this first: Go to Edit &gt; Project Settings and on the side tab select Project &gt; Packaging Under Packaging Disable Share material Shader Code We Disable it to stop us from sharing shadercode. If we cook a map with shared shadercode, it is very likely it will break other people’s map and even cause their games to crash. If you have Cooked Content installed in your project this option allows you to see materials in the Editor if enabled. However If you have it disabled when you close the Editor, the materials will be black next time you open it. You can fix it by enabling it again and restarting the Editor. Under Packaging &gt; List of maps to include in a packaged build you should see an element that shows the directory for the RoN_ExampleMap and RoN_Template. If you do not see List of maps to include in a packaged build you may need to expand the Advanced category. Delete these 2 entries for now. Press the + and create an entry and enter your map’s directory within the project folder. Press the + again but this time, use your map’s BuildData, it should be in the exact same location as your map. You do not need to change any other settings and it should look something like this: Make sure you Save All before proceeding On the Toolbar click Platforms &gt; Windows &gt; Cook Content This could take some time for your first cook as it compiles all the shaders. Just be patient. Once cooking has completed re-Enable Project Settings &gt; Packaging Share Material Shader Code You should hear it succeed, but a message will not remain on screen when it completes. If it failed the notification will stay on the screen. You will need to look at the Output log in the Editor to find out what the Errors are (you can ignore warnings - there will be a lot of them).Custom Cook With the Los Suenos Stories update to the Framework, a custom Cook button was added to the level editor toolbar.This will, by default, automatically; Write a Game.ini to /Saved/Config/WindowsEditor/ which disables Share material Shader Code, regardless of your project setting. Start a cook via UnrealEditor-Cmd.exe Remove the Game.ini after it finishes Copy the /Config/Difficulties/ folder to your cooked files. If the editor is unfocused you won’t hear the completion sound effects. However, by default the notification is set to not auto-fade. To cancel the cook, find the Unreal command prompt that opened, and close it.Packaging &amp; Installing your MapPackaging will turn our cooked content into a single compressed file that we can actually use to play in game and distribute to other people. There are a bunch of Unreal packers out in the wild, but only use the following method for maps. Create a folder somewhere to act as your staging location for packing, name doesn’t matter but I use Paking. I wouldn’t create it in your project folder however. With the LSS update there is a folder shortcut button on the toolbar which you can configure. Within this folder create a new folder using the following naming convention: pakchunk99-YOURMAPNAME the 99 after pakchunk indicates the load order of paks. We keep maps at 99. Replace YOURMAPNAME with whatever your map’s name is. This will not show up in game, but will help identify your map/mod to people downloading your mod. A lot of mods have _P appended to the end of their .paks. For maps we do not need it and should not use this namespace. Using _P in your package actually patches over files and we do not want to to this! There could be a bunch of Blueprints or shadercaches that are generated when we cook our map and it will conflict with other mods if you include them.AGAIN. DO NOT ADD _P TO YOUR PAK NAME. Go to C:\\Program Files\\Epic Games\\UE_5.3\\Engine\\Binaries\\Win64 and create a .bat file here with the following arguments: @setlocal ENABLEDELAYEDEXPANSION@if \"%~1\"==\"\" goto skip@setlocal enableextensions@pushd %~1(for /R %%f in (*) do @set \"filePath=%%f\" &amp; set \"relativePath=!filePath:%~1=!\" &amp; @echo \"%%f\" \"../../../ReadyOrNot!relativePath!\")&gt;\"%~dp0/filelist.txt\"@pushd %~dp0::-compresslevel=4 for Normal, -compresslevel=-4 for uncompressed hyperfast paking.\\UnrealPak.exe \"%~1.pak\" -create=filelist.txt -compress -compressionformats=Oodle -compressmethod=Kraken -compresslevel=4@popd@pause:skip Create a Shortcut to the .bat file you created and move it to your staging folder from step 1. Navigate to your Template/Project folder and go to: ...\\RoNTemplate\\Saved\\Cooked\\Windows\\ReadyOrNot and copy ONLY the Content folder With the LSS update there is a folder shortcut button on the toolbar for this. Paste your Content folder into your pakchunk99-YOURMAPNAME folder Drag your pakchunk99-YOURMAPNAME folder onto your .bat shortcut. A command window will pop up and tell you when it is complete. If successful you should have a new file in your staging directory named pakchunk99-YOURMAPNAME.pak Copy your pakchunk99-YOURMAPNAME.pak to C:\\SteamLibrary\\steamapps\\common\\Ready Or Not\\ReadyOrNot\\Content\\Paks With the LSS update there is a folder shortcut button on the toolbar which you can configure. Your map should now be available in the gameThis is an example of what a Staging folder can look like: You will be jumping between these folders a lot, I really recommend putting your Staging folder, Project Cooked folder Ready or Not Pak directory to your Quick Access bar.Testing your MapThe easiest way to test your map is to simply load up the game and select it from the Mission Select screen. If all works well then it should take a couple of seconds to build WorldGen and plops you into the map.Common Issues with a Map not LoadingMake sure you did the following: Using the up-to-date version of the template linked above in this guide. You are using the packing method described above in this guide. Only include the Content folder from \\RoNTemplate\\Saved\\Cooked\\WindowsNoEditor\\ReadyOrNot Disabled Share Material Shader Code You have all the actors mentioned in Bare Essentials for Gameplay.If your map is still not not launching, then you may want to reach out for help on the Mapping Discord linked above.Updating your Map after PlaytestingAnd Voilà! You’ve just gone through your first iteration of RoN Mapping!There are just some final important steps needed to know when you re-cook and package your map to test updates: After you recook your map, it is recommended that you delete the Content folder within your staged pakchunk99-YOURMAPNAME folder instead of overwriting it. Overwriting your folders may leave residual files and settings that may mess with your playtest BEFORE you launch the game. Navigate to C:\\Users\\USERNAME\\AppData\\Local\\ReadyOrNot\\Saved\\SaveGames and delete the WorldGen.sav file that has the same map name as your map (e.g. Hell Comes to the Hills filename looks like Hell_Comes_to_the_Hills_WorldGen_40173.sav). This step is critical! Each time the game launches your map for the first time, it generates World Data and stores it so the map launches faster the next time you play it. However the game does not know when your map has been changed. So you will likely be playing on a map with outdated build information resulting in quite a few bugs. The WorldGen contains information such as how doors are positions and connected, room sizes and layouts, stacking points, navigation, hiding spots and cover and a probably a lot of other things we don’t know about yet. So it is important to make sure you generate new World data with each iteration! Just like with the other folders, it is recommended you add the SaveGames directory to your quick access, as you will be visiting it quite a fair bit!Using Ready or Not Game Assets and ContentFModel Setup You will at least around 100GB free for the next part, we will be extracting the game’s cooked assets so they will show up in your map, and unfortunately require a lot of space.Download FModel: https://fmodel.app/Download Mappings file: Mapping File BEFORE PROCEEDING: Remove ALL mods from your game. FModel will load them and cause issues and materials may not load properly. If first time using, click the arrows for ADD UNDETECTED GAME and select C:\\SteamLibrary\\steamapps\\common\\Ready Or Not\\ReadyOrNot as your directory AND press the + button. Select the UE Version to be GAME_UE5_3 and press OK Go to Settings and under General &gt; Advanced, Enable Local Mapping File and set the Mapping File Path to the downloaded Mappings file. (This will allow you to view the cooked content in FModel) OPTIONAL: In Settings &gt; Models &gt; Mesh Format, change it to glTF 2.0 (binary) so you can export static meshes Take note of your Export Directory On the Archives Tab, select all the .paks from the game and click Load. On the Folders Tab, navigate to the Content folder and right-click and select Export Folder's Packages Raw Data (.uasset). This will save all the cooked content from the game and might take some time.Once complete move onto the next stepCopy Cooked Content to your Project Close the new UE5 Template before continuing. Navigate to where FModel exported the cooked assets and copy the /Content/ folder (or drag if storage space is limited) to your Project’s Content Folder. This INCLUDES all the shadercaches. Make sure you copy the extracted Content folder to your Project’s root.DO NOT copy into the Project’s Content.DO NOT end up with .../ReadyOrNot/Content/Content/ (&lt;– BAD) DO NOT overwrite any files if prompted! Just skip these files. If you overwrite them, you will need to start again from scratch with a new Project.For the DLCs you will also need to copy their content folders if you wish to use more than their AI data tables the Framework includes. You will have these even if you don’t own them. Home Invasion is included in /Content/ already. .../FmodelExports/ReadyOrNot/Plugins/GameFeatures/ReadyOrNotDLC2/Content needs to be copied to the Project’s .../ReadyOrNot/Plugins/GameFeatures/ReadyOrNotDLC2/ folder. This is DarkWaters. .../FmodelExports/ReadyOrNot/Plugins/GameFeatures/ReadyOrNotDLC3/Content needs to be copied to the Project’s .../ReadyOrNot/Plugins/GameFeatures/ReadyOrNotDLC3/ folder. This is Los Suenos Stories. All the game’s assets should be available in the project now, including working Materials, Decals and Particle Effects!Viewing DLC folders and C++ classesBy default your Unreal Engine’s content browser might not be setup to show these folders. In the top right of your content browser, click the Settings button. Ensure the following options are enabled; Show Sources panel Show Developers Content Show Engine Content Show Plugin Content In the far left of the Content Browser, you should now be able to expand the ReadyOrNot drop down and find these folders. Dark Waters content is found in /Plugins/ReadyOrNotDLC2/ Los Suenos Stories content is found in /Plugins/ReadyOrNotDLC3/ Optional: Importing FMOD EventsIf you wish to hear the QSM or ambient sounds follow these steps: Navigate to C:\\SteamLibrary\\steamapps\\common\\Ready Or Not\\ReadyOrNot\\Content\\FMOD\\ and copy the Desktop folder. Navigate to your projects ...\\Content\\FMOD\\ folder and paste the Desktop folder here.Where to Next?We have other guides that cover some more in-depth aspects of mapping that you can check out below:Setting up Audio and Working with QSMSetting up Music Events for LevelsMission Select, Objectives, Entry Points; Mod Level Data guideMap Optimization - COMING SOON" }, { "title": "UE4 to UE5 Map Migration Guide", "url": "/posts/mapping_ue5migration/", "categories": "Map Modding", "tags": "maps", "date": "2024-08-05 00:00:00 +0000", "snippet": "UE4 to UE5 Map Migration GuideIntroductionThis guide aims to help you transition your previous map from UE4.27.2 to UE5.3.2. It includes necessary steps and changes to the workflow to minimize the amount of work needed to port your map.1. UE5 TemplateDownload and Install Unreal Engine 5.3.2: https://www.unrealengine.com/en-US/downloadDownload the following new UE5 Template and extract to your preferred location: https://www.nexusmods.com/readyornot/mods/13842. UE4 Map PreparationNearly all of the previous work you have done can be ported over with exception of any Blueprints from the old Template.The following should be replaced (or deleted) with placeholder engine meshes so you can easily replace them after the migration: Landscapes (DELETE! You will need to remake these in UE5, but using a heightmap from your old Landscape can save you some time) BP_Doors_Reap BP_AISpawns_Reap BP_BreakableGlass_C FMOD Events RosterScenarioSpawner (Delete) WorldDataGenerator (Delete and no longer needed) BP_SpawnManager (Delete) BP_CoverGen (Delete)Ready Or Not Audio Volumes, Portal Volumes, Room Volumes, CoverGenOverride Volumes can remain as they are still the same actors. If they do not work convert them to a BlockingVolume (Under Actors tab in Details) temporarily to convert back after migration.Sound_ParameterTransition_V2_BP_C Blueprint can remain but it is likely you will need to reassign everything. You did organize your map already into nice folders in the Outliner right????3. FModel SetupWe no longer are using UModel anymore as it is no longer supported for UE5.Download FModel: https://fmodel.app/Download Mappings file: Mapping File BEFORE PROCEEDING: Remove ALL mods from your game. FModel will load them and cause issues and materials may not load properly. If first time using, click the arrows for ADD UNDETECTED GAME and select C:\\SteamLibrary\\steamapps\\common\\Ready Or Not\\ReadyOrNot as your directory AND press the + button. Select the UE Version to be GAME_UE5_3 and press OK Go to Settings and under General &gt; Advanced, Enable Local Mapping File and set the Mapping File Path to the downloaded Mappings file. (This will allow you to view the cooked content in FModel) OPTIONAL: In Settings &gt; Models &gt; Mesh Format, change it to glTF 2.0 (binary) so you can export static meshes Take note of your Export Directory You will need around 100GB free for the next part, we will be extracting the game’s cooked assets so they will show up in your map, and unfortunately require a lot of space. On the Archives Tab, select all the .paks from the game and click Load. On the Folders Tab, navigate to the ReadyOrNot &gt; Content folder and right-click and select Export Folder's Packages Raw Data (.uasset). This will save all the cooked content from the game and might take some time.Once complete move onto the next step4. Copy Cooked Content to your Project Close the new UE5 Template before continuing. Navigate to where FModel exported the cooked assets and copy the Content folder (or drag if storage space is limited) to your Project’s Content Folder. This INCLUDES the shadercaches. DO NOT overwrite any files if prompted! Just skip these files. If you overwrite them, you will need to start again from scratch with a new Project.All the game’s assets should be available in the project now, including working Materials, Decals and Particle Effects!Optional: Importing FMOD EventsIf you wish to hear the QSM or ambient sounds follow these steps, there are placeholders if you do not wish to make your project folder any bigger: Navigate to C:\\SteamLibrary\\steamapps\\common\\Ready Or Not\\ReadyOrNot\\Content\\FMOD and copy the Desktop folder. Navigate to your projects ...Content\\FMOD folder and paste the Desktop folder here.5. Migrating your UE4 map to the new UE5 Project Make sure the UE5 Template is closed before continuing. In your UE4 Project, right click on your Level and select Asset Actions &gt; Migrate DESELECT everything first. We do not want to copy ANY of the old Blueprints or Cooked Content Navigate to your Mods &gt; YourUsername section (where your Map SHOULD be located) and ONLY SELECT these files (or any Files YOU created and want to carry over). Hit OK. You do not need to copy over any previous contents from Mods &gt; Reap In the new Window, select the location of the Content folder of the UE5 Project and proceed. Once complete open up your map in the UE5 Project and inspect the result. If you Level wont open or crashes the Editor, I would recommend taking a more manual process to migrating the map. Following up to step 5, instead create a new Level and manually Copy-Paste assets between Editors. DO NOT copy anything RoN Specific this time. Make sure not to have any Landscapes either.6. Fixing Issues and missing AssetsFixing Inverted Collision from Migration There is a serious bug that occurs when migrating from 4.27 to 5.3, any custom Static Meshes you bring into the project will have their collisions Inverted. Thankfully VOID also encountered this and helped with the solution (major thanks to killowatt &amp; RareKiwi for this)To fix this: Select all Static Meshes that you migrated in the content browser. Easiest way to do this is just select your mod username directory and filter for Static Meshes If you turn on Player Collision view mode, you will see all the normals on the collisions of your assets are flipped if placed in a level With the meshes selected right-click and select Scripted Actor Actions &gt; Collision Fix Up. This will iterate through the meshes and correct their collision. Verify they are correct in Player Collision view mode.Alternatively, you can do the same steps on selected actors within a Scene by right-clicking them and selecting Scripted Actor Actions &gt; Collision Fix UpReassigning NULL Static MeshesIf you have followed the steps up to this point, the map should be mostly still intact. Most of the cooked assets from UE4 have remained in the same location in UE5, but now you can also view their materials!There is mostly likely going to be a few hundred missing cooked assets due to files being moved by VOID with the update. To identify what is missing, click Build &gt; Check Map.All missing assets should say “Static mesh actor has NULL StaticMesh property”. Provided you haven’t renamed any files it should be pretty straight-forward to find the same named asset in the Content Browser and replace them in the scene. Unfortunately there is not an easy/fast way to do this, so brew a cuppa and get to work. If you do Step 5 before Step 4, ALL of the references to previous cooked contents might return NULL, instead of just a few. Just to be safe, make sure the cooked content is in the project before Migrating or CopyingNew Basic Map Requirements and Changes Do not click Build All, currently doing so will lock the Editor in “Building Texture Streaming” and will require you close it via Task Manager. You unfortunately have to Build Geometry, Paths and Lighting separately now.Things mostly remain the same, however the following changes to workflow are needed to make sure that the map runs correctly: Set the Level Blueprint Parent Class type to Ready or Not Level Script Not doing so will result in things not working properly, specifically objectives, spawns and QSM/FMOD DO NOT set ItemData datatable in the Item Data field of the Blueprint Class If included, cooking will fail - there is a dummy ItemData in the project that shouldn’t cause this. But better safe than sorry. REMEMBER TO REMOVE IT after you have migrated from UE4 - it may still be assigned. Add a RosterScenarioSpawner actor Without it the map will crash on Level load BP_SpawnManager_V3 is required now (located in Mods &gt; Template &gt; Blueprints) Without it no AISpawns will not work Make sure that all BP_AISpawns_Managed have “Managed” assigned to their Details &gt; Actor &gt; Tags Without it no AI will spawn even with the Spawn Manager This may happen if you Right Click &gt; Replace Selected Actors with on placeholder actors after the migration. Add a BP_CoverGen actor Without it AI won’t really move or do anything when engaged in fights Multple PlayerSpawns are no long spawn the SWAT AI on them; they will all spawn on your PlayerSpawn. You only need 1 PlayerSpawn per actual Spawn Point (set in ModLevelData Table). QSM Changes7. New Cook &amp; Pak MethodCook and Paking remains the same process as before but there are 2 important things that have changed.Updated .bat Pak fileYou NEED to use the new updated .bat with the UE5.3 files (do not just edit your existing one):More Info@setlocal ENABLEDELAYEDEXPANSION@if \"%~1\"==\"\" goto skip@setlocal enableextensions@pushd %~1(for /R %%f in (*) do @set \"filePath=%%f\" &amp; set \"relativePath=!filePath:%~1=!\" &amp; @echo \"%%f\" \"../../../ReadyOrNot!relativePath!\")&gt;\"%~dp0/filelist.txt\"@pushd %~dp0::-compresslevel=4 for Normal, -compresslevel=-4 for uncompressed hyperfast paking.\\UnrealPak.exe \"%~1.pak\" -create=filelist.txt -compress -compressionformats=Oodle -compressmethod=Kraken -compresslevel=4@popd@pause:skipDelete Global ShaderArchivesCooking a map now produces Shadercaches, there is an extra step needed for cooking to prevent them from being cooked but still provide the necessary ones for your materials and .uassets: Before you cook, go to Edit &gt; Project Settings &gt; Packaging, and disable Share Material Shader Code - BUT DO NOT RESTART THE EDITOR! Cook your map as usual. When cook is complete, re-enabled Share Material Shader Code. The above method should be used if you are sharing/distributing your final map .pak. If you include shadercaches that aren’t just your own materials than we might run into conflicts.For faster development however - you can just cook and copy the Content folder as usual without always needing to disable/enable Share Material Shader Code. HOWEVER if you include files named similar to ShaderArchive-Global-PCD3D_SM5-PCD3D_SM5 then Ready Or Not will crash on launch. So before you Pak your map, make sure you delete the all the ones named ShaderArchive-Global... (you can leave the others) from the Content folder. If you delete the other ones some of your custom materials may not render properly in-game. However, if there are some issues with your own materials, also try deleting the files named like ””As a final resultIf you are still having issues also try deleting the ones named:JUST REMEMBER TO DO THE COOK METHOD MENTIONED FIRST FOR DISTRIBUTION!Cool stuff in the New Template!!!!11!!1!!11 In Mods &gt; Template &gt; Levels there are 2 Maps: RoN_Template is a barebones map that is the absolute bare minimum to get a level working. RoN_ExampleMap showcases how to build a map. It has information on the Spawn Manager, Objectives, QSM and working with the FMOD, along with some other interesting bits of information In general the layout of information and Blueprints we actually use is a lot cleaner now. We now have the Actor Palette Plugin enabled. This allows you to open up a level under Tools &gt; Actor Palette. Doing so allows you to drag and drop Assets from the window into you map with ease! Very cool~ There are a bunch of maps in Mods &gt; Template &gt; Levels &gt; ActorPalette that you can load to test Warning: These maps require a LOT of memory as they are loading essentially all the usable props from cooked assets. I would not open Palette_MASTER unless you have a strong PC. We can now create custom doors from our own DoorData DataTables (and there are tools to help copy over Door and AI rows from cooked assets courtesy of RareKiwi).Known Bugs Double doors do not seem to work as double doors after the first load of the game, this seems to be an issue with the World Generation that is out of our hands for now. When saving or opening a Level, the editor will ask you save changes to BP_Makarov_2Handed_AnimData and BP_Tec9_AnimData, you can ignore these. Saving wont break the project if you do.Credits and ThanksKingly credits need to go to RareKiwi for his dedication to updating the project and previous Blueprints. It is no small thing to say that without him, we would not have the new Template.Additional Credits to KITT, StenTheAwesome, Delta, Reap, The Real Sourc3 and to the beautiful VOID Interactive Devs (killowatt, Zack, QuantumNuke and Hunter)." }, { "title": "UE4SS and Mappings [UE5.3+]", "url": "/posts/ue4ss_and_mappings/", "categories": "UAsset Modding", "tags": "ue4ss, mappings, fmodel, uassetgui", "date": "2024-07-23 00:00:00 +0000", "snippet": "Mappings DownloadWith the Unreal Engine upgrade to 5.3, you will now need a Mappings.usmap for UAssetGUI and Fmodel to fully function.You can download a shared version of the Mappings.usmap for Ready Or Not below:Ready Or Mod DiscordUMG Mappings.usmap [12-September-2025 Build:94572 “Los Sueños Stories Patch # 3”]UAssetGUI Import Ensure UAssetGUI is updated for UE5.3 (Versions 1.0.1.0+) Open Utils &gt; Import mappings... Navigate to your downloaded or generated Mappings.usmap Give it a name. Happy Modding! You can find your stored mappings in the config directory, Help &gt; Open Config Directory...Or in %localappdata%\\UAssetGUIFModel Import Ensure FModel is already configured for Ready Or Not and UE5.3 Open Settings Enable the Enable Local Mapping File checkbox Press the ... and navigate to your downloaded or generated Mappings.usmap Press OK to close the settings, then restart Fmodel.UE4SSInstall Download UE4SS_v3.0.1.zip from Github UE4SS Releases Extract the contents next to the ReadyOrNot-Win64-Shipping.exe in...\\Ready Or Not\\ReadyOrNot\\Binaries\\Win64\\Generating MappingsHow to create a new Mappings.usmap Open UE4SS-settings.ini and change the following: MajorVersion = 5MinorVersion = 3ConsoleEnabled = 1GuiConsoleEnabled = 1GuiConsoleVisible = 1GraphicsAPI = dx11 Start the game, wait to load to menu, switch to the UE4SS window. If the game crashes after Epic Online Services says connected/offline, you may need to start the game with your pc disconnected from a network. Under the Dumpers tab press Generate .usmap file..... It should work instantly, but you can confirm on the Console tab.The file Mappings.usmap should be create next to your .exe You can close the game now. If you want to disable UE4SS you can rename dwmapi.dll or remove it’s files.Otherwise it’s quite handy for enabling the in game console, you may just want to hide the GUI window if your not using it GuiConsoleVisible = 0 " }, { "title": "Reference - FMOD Parameters", "url": "/posts/reference_fmod_parameters/", "categories": "Reference", "tags": "reference, maps, audio", "date": "2024-01-14 00:00:00 +0000", "snippet": "Reference - FMOD ParametersThe following tables list the different parameters to use with the Sound_ParameterTransition_V2_BP_C Blueprint to modify Ambient and Music queues within your level.[D] = Dynamic parameter: These are layers that can be toggled between different states multiple times, and transition between them freely. Usually if x parameter = 1, a layer’s volume is brought up, if 0, it’s back down again.[S] = Static parameter: These are single use events that are one and done, you cannot trigger them again after the initial firing. These are used for timelines that have some linear progression to them or trigger a sting event (eg: seeing the pictures on Streamer). Once it’s triggered, it shouldn’t be set back to 0. You cannot go backwards on the music timelines once these are called. FMOD Events Parameters are NOT case sensitive. Spaces in some names are required however.AgencyAmbience: Agency_Amb Parameter Name Type Description AgencyAmbIN [D]   AgencyAmbOUT [D]   AgencyAmbSTORE [D]   AgencyAmbWAREHOUSE [D]   AgencyAmbWAREHOUSECOVER [D] Muffles warehouse ambience. AgencyClothesRain [D] Rain on clothes volume. AmbSwitch [D] Muffles rain ambience depending on amount, 0 = unmuffled, 1 = muffled, etc. AgencyExtEventsPlay [D] This is automated by AmbSwitch, do not change. Music: Main_Agency_Timeline Parameter Name Type Description AgencyMusicIN [S] transitions the music into the inside sections AgencyMusicQUIET [D] lowers the volume of certain layers AgencyMusicMIRROR [D] Controls creepy aaaaaaaa BeachfrontAmbience: Beachfront_Amb Parameter Name Type Description BeachfrontAmbHOUSE [D] House ambience BeachfrontAmbHOUSEDEEP [D] Deeper house ambience BeachfrontAmbOUT [D] Outside ambience Music: Main_Beachfront_Timeline Parameter Name Type Description BeachfrontHOUSEENTER [D] transitions the music into the inside sections BeachfrontATTICENTER [S] allows the timeline to flow to the piano section BeachfrontHOUSECHIMES [D] If == 1, you can hear the spatial event Beachfront_Chimes_Spatial EndLoop Ambswitch Controlled 0-1 Outside non-looping, 1-9 Is inside looping Timeline will continue to play initial guitar chords until BeachfrontHOUSEENTER == 1 Timeline will continue to play muted bass hits until combat is entered Timeline will loop a combat section as long as the player stays in combat Timeline will eventually transition to a post combat loop until BeachfrontATTICENTER == 1 Timeline will play attic section with piano until reaching an ‘end loop’ that eventually transitions to a quieter loop if ambswitch &lt; 1 (Outside)Two spatial FMOD events, Beachfront_Chimes_Spatial and Beachfront_Flutes_Spatial, can be placed on your map and act as spatial accompaniments The flute spatial sounds will only trigger if AmbSwitch &gt;= 1 and is placed in your map. The chimes spatial sound will play if BeachfrontHOUSECHIMES == 1 and is placed in your map.CampusAmbience: Campus_Amb Parameter Name Type Description CampusAmbBATHROOM [D]   CampusAmbCL1 [D]   CampusAmbCL2 [D]   CampusAmbHALL1 [D]   CampusAmbHALL2 [D]   CampusAmbLECTURE [D]   CampusAmbLIBRARY [D]   CampusAmbOUT [D]   CampusAmbROOMSMALL [D]   Music: None available.ClubAmbience: Club_Amb_V2 Parameter Name Type Description ClubAmbBAR [D]   ClubAmbBIG [D]   ClubAmbDEEP [D]   ClubAmbMAIN [D]   ClubAmbMETAL [D] adds an eerie metal layer over the ambience, like metal clangs. Music: Main_Club_Timeline Parameter Name Type Description MasterZackVolume [D] transitions the music to the ‘club music turned off’ sections ClubOSTRooms [D] transitions to a variant of certain layers ClubOSTHalls [D] transitions to a variant of certain layers ClubOSTDeep [D] transitions to a variant of certain layers ClubOSTSauna [D] transitions to a variant of certain layers ClubOSTBodyRoom [D] ups the volume on a disturbing layer Timeline will remain silent until MasterZackVolume == 1CoyoteAmbience: Amb_Coyote Parameter Name Type Description CoyoteAmbBARN [D]   CoyoteAmbCAVE [D]   CoyoteAmbGARAGE [D]   CoyoteAmbHOUSE [D]   CoyoteAmbOUT [D]   CoyoteAmbROOM [D]   CoyoteAmbTUNNEL [D]   CoyoteWINDVOL [D] this controls the volume of the exterior wind. No changes needed. Music: Main_Coyote_Timeline Parameter Name Type Description CoyoteTUNNELSPOTTED [S] transitions the music past the intro section CoyoteCAVEDEPTH1 [S] transitions further into the music timeline CoyoteCAVEDEPTH2 [S] transitions further into the music timeline CoyoteCAVEDEPTH3 [S] transitions further into the music timeline CoyoteSIDECAVES [D] adds a shaker layer Coyote is a more linear timeline as you move through the tunnels, so each Depth adds more layers to the soundtrack.There is 1 spatial FMOD Event Coyote_Spatial_Drum. This is used at the entrance of the cave before you enter. As long as this is placed in your map, this will continue to play while CoyoteCAVEDEPTH1 == 0DataCenterAmbience: Data_Center_Amb Parameter Name Type Description DataAmbINT [D]   DataAmbINTCOVER [D] Muffles inside ambience DataAmbKITCHEN [D]   DataAmbOUT [D]   DataAmbSERVER [D]   DataAmbSERVERCOVER [D] Muffles server room ambience AmbSwitch [D] referenced but not used Music: Main_Data_Center_Timeline Parameter Name Type Description DataCenter Entered 1 [D] transitions the music into the inside sections AmbSwitch [D] changes certain layers coming in, having it go from 0-2 should adjust the intensity, 1 would be like the entrance and outer rooms while 2 would be inside the main server room AmbSwitch is used to add more depth as you get deeper into the map The timeline will only continue properly as long as DataCenter Entered == 1 and AmbSwitch &gt; 0 You can trigger multiple different sections depending on the value of AmbSwitch (so ambswitch 1 is a new section, ambswitch 2 new section)DealerAmbience: Dealer_Amb_V2 Parameter Name Type Description DealerAmbACHUM [D] AmbSwitch muffles this value if set to 2 DealerAmbBIGROOMHUM [D]   DealerAmbBOILERROOM [D]   DealerAmbMAINROOMHUM [D] AmbSwitch muffles this value if set to 2 DealerAmbOUTSIDE [D] AmbSwitch muffles this value if set to 1 AmbSwitch [D] see above for descriptors on what ambswitch does to each Music: Main_Dealer_Timeline_V2 Parameter Name Type Description DealerEXPReception [D] The close the value is to 1, the more muffled the game OST will be DealerEXPMurderRoom [D] makes certain layers all distorted FarmAmbience: Farm_Amb_V3 Parameter Name Type Description FarmAmbCELLAR [D]   FarmAmbCHURCH [D]   FarmAmbGRHOUSE [D]   FarmAmbHOUSE [D]   FarmAmbOUT [D]   FarmAmbOUTCOVER [D] Muffles exterior ambience FarmAmbSTAIRS [D]   FarmAmbWOODS [D]   Music: Main_Farm_Timeline Parameter Name Type Description FarmMusicENTRY [S] transitions to a sudden drum hit and continues the timeline FarmMusicENTRYAPPROACH [D] adjusts the volume of the initial entry choir sound FarmMusicDRONEINSIDE [D] volume for inside drone layer FarmMusicDRONEOUTSIDE [D] volume for outside drone layer       FarmMusicCHURCHAPPROACH [D] used when approaching church FarmMusicDRONECHURCH [D] volume for church drone / scarier rooms FarmMusicDRONECHURCHCLOSER [D] volume for more intense church drone FarmMusicCHURCHDRUMSPEED [D] Increases drum speed 0 = slow, 1 = faster FarmMusicTREE [S] triggers the tree stinger and subsequent eerie organ section There are 3 spatial events: Farm_Music_Spatial_Drum, Farm_Music_Spatial_Synth and Farm_Music_Spatial_Voice The timeline will only continue properly if FarmMusicENTRY == 1. As FarmMusicENTRYAPPROACH increases to 1, a choir layer is increased in volume - this layer only plays during the intro section. Once FarmMusicENTRY == 1, a large drum hit will play, and the timeline will continue. Using the assorted drone parameters, different layers can come in and out To have the church approach section play, set FarmMusicCHURCHAPPROACH to 1. As long as the Farm_Music_Spatial_Drum FMOD event is placed in your map, you should hear this drum play spatially now. To control the drum speed, set FarmMusicCHURCHDRUMSPEED to 0 for slow or 1 for faster To continue the timeline past the church section and fire the spooky stinger, set FarmMusicTREE to 1. The timeline will eventually return back to the third stage, where you can use the drone parameters again to control different layers.GasAmbience: Gas_Amb_V2 Parameter Name Type Description GasAmbIN [D]   GasAmbINCOVER [D] Muffles inside ambience GasAmbOUT [D] AmbSwitch lowers reverb volume for certain sounds within the ambience… Not sure… why. Oopsies. Music: Main_Gas_Timeline Parameter Name Type Description GasMainBuilding [D] transitions the music past the intro GasSideBuilding [D] muffles the music - this is unused in vanilla but still works GasDiegetic [D] muffles the music as well, this is used around diegetic music sources HospitalAmbience: Hospital_Amb_V2 Parameter Name Type Description HospitalAmbDEEP [D] if AmbSwitch &lt; 3, this ambience is muffled HospitalAmbINT [D] if AmbSwitch &lt; 3, this ambience is muffled HospitalAmbMORGUE [D]   HospitalAmbOUT [D]   Music: Main_Hospital_Timeline Parameter Name Type Description HospitalLIGHTSPOTTED [S] triggers a light stinger HospitalHEAVYSPOTTED [S] triggers a heavier stinger       HospitalDEPTH1 [S] once triggered, each step advances the timeline further and adds more layers. So the deeper you go through hospital for example, it fires 1 through 4 respectively. HospitalDEPTH2 [S] ”” HospitalDEPTH3 [S] ”” HospitalDEPTH4 [S] ””       HospitalDEPTH [D]   The SPOTTED events are meant to be used for spotting things like bullet holes, blood and dead bodies The way Hospital works, is that the Transition Volumes are set up so as you go deeper it adds more layers. Since there are different spawn locations on different sides of the map, Hospital sets up multiple Transitions, for example Depth2, so no matter which side you enter from it will always trigger. It continues to cascade Transitions in-wards from opposite sides as you continue to move deeper through the map.There are 6 FMOD events that you can place if this music is used, that have synchronized beeps to the music (Hospital_OST_Beeps_1 - 6)ImporterAmbience: Imp_Amb Parameter Name Type Description ImporterToBathroom [D]   ImporterToConveyor [D]   ImporterToPost [D]   ImporterToRoomA [D]   ImporterToRoomB [D]   AmbSwitch [D] AmbSwitch is used to lower the exterior ambience volume for this level. 0 = full volume, 1 = silent. Music: Main_Importer_Timeline Parameter Name Type Description ImporterMusicINSIDE [D] transitions the music to the inside sections ImporterMusicILLEGALACTIVITYSEEN [S] triggers certain lead lines to come in MethAmbience: Meth_Amb_V2 Parameter Name Type Description MethAmbLAUNDRY [D]   MethAmbSTREETINT [D] AmbSwitch is used to change between inside / outside ambiences. 0 = exterior, 1 = interior. MethAmbTUNNEL [D]   MethOutdoorEventsPlay [D] AmbSwitch automates this. Don’t change. Music: Main_Meth_Timeline_V2 Parameter Name Type Description AmbSwitch [D] 0 = outside sections play, 1 = inside sections play, 2 = outdated laundry section plays, 3 = tunnel section plays PenthouseAmbience: Penthouse_Amb_V2 Parameter Name Type Description PenthouseAmbBALCONY [D]   PenthouseAmbHALL [D]   PenthouseAmbROOMS [D]   PenthouseAmbSTAIRWELL [D]   Music: Main_Penthouse_Timeline_V2 No parameters to edit, Timeline will just work.PortAmbience: Port_V2_Amb Parameter Name Type Description PortAmbAUCTION [D]   PortAmbCONTAINER [D]   PortAmbOUT [D]   PortAmbOUTCOVER [D] muffles exterior ambience PortAmbRAINCLOTHES [D] Rain on clothes volume. PortAmbSHACK [D]   PortAmbTOWER [D]   PortAmbTOWEROUT [D]   PortAmbTRAFFICKINGCONTAINER_SFX [D] muffles all ambiences if value is 1. PortAmbWAREHOUSE [D]   PortAmbWAREHOUSEDEEP [D] Muffles warehouse ambience. Music: Main_Port_Timeline_V2 Parameter Name Type Description PortCRANEAREALEAFT [S] advances timeline past silence PortINTERIOR [D] plays interior layer PortWAREHOUSE [D] plays warehouse layer PortAUCTION [D] plays auction area layer PortAUCTIONDEEP [D] plays deep auction layer PortTRAFFICK [D] triggers crate section RidgelineAmbience: Ridgeline_Amb Parameter Name Type Description AmbSwitch [D] controls the ambience on this map. 0 = exterior, 1 = interior. Music: Main_Ridgeline_Timeline Parameter Name Type Description AmbSwitch [D] 1.5 = triggers basement section RidgelineTOINT [D] plays inside layers SinsAmbience: Sins_Amb Parameter Name Type Description SinsAmbBAR [D]   SinsAmbBATHROOM [D]   SinsAmbCLOTHESRAIN [D] rain on clothes volume. SinsAmbHALL [D]   SinsAmbKITCHEN [D]   SinsAmbLOBBY [D]   SinsAmbLOUNGE [D]   SinsAmbOUT [D]   SinsAmbROOM [D]   Music: Sins_Club_Timeline Parameter Name Type Description SinsENTRY [S] advances timeline past silence For this level, there are 6 special spatial events - 5 opera singer events (Sins_Opera_Pos_1 - 5) and 1 star spangled event (Sins_StarSpangled_Spatial)StationAmbience: StationV2_Amb Parameter Name Type Description StationAmbBASEMENT [D]   StationAmbBASEMENTBIG [D]   StationAmbHONOUR [D]   StationAmbIN [D]   StationAmbOFFICE [D]   StationAmbOFFICE2 [D]   StationAmbOUT [D]   StationAmbRANGE [D]   StationAmbROSTER [D]   Music: Main_Station_Timeline Parameter Name Type Description LobbyMusicKILLHOUSE [D]   LobbyMusicLOADOUT [D]   LobbyMusicMEMORIAL [D]   LobbyMusicMEMORIALSTATUE [D]   LobbyMusicMISSIONSELECT [D]   LobbyMusicMORALE [D]   LobbyMusicOUTSIDE [D]   LobbyMusicRANGE [D]   LobbyMusicREADYROOM [D]   LobbyMusicSELECT [D]   LobbyMusicSELECTED [D]   LobbyMusicUNDER [D]   LobbyMusicVOLUME [D]   Lobby_Ready [D]   A lot of these parameters for the Station OST are set in code, so be cautious if you decide to use these… Fun fact with the station OST, depending on how far through the campaign you are, if you go into the memorial room, there’s a horn section layer that plays spatially if you go straight to it when loading in. You might have to wait a few seconds to hear itStreamerAmbience: Streamer_Amb Parameter Name Type Description StreamerAmbAPARTMENT [D]   StreamerAmbBATHROOM [D]   StreamerAmbIN [D] Ambswitch lowers volume. 0 = full volume, 1 = lower volume. StreamerAmbMINING [D]   StreamerAmbOUT [D] Ambswitch lowers volume. 0 = full volume, 1 = lower volume. Music: Main_Streamer_Timeline Parameter Name Type Description StreamerENTRY [S] advances timeline past intro StreamerSERVERROOM [S] advances timeline to server section StreamerAGENCYPICSSEEN [S] plays agency stinger StreamerROOMENTERED [D] lowers volume of certain layers. If AmbSwitch &lt;= 1.35, this value will be 0. If AmbSwitch &gt;= 2, this value will be 1. StreamerMAINROOM [D] changes volume of certain layers. There are 2 spatial events, Streamer_Spatial_Server_A and Streamer_Spatial_Server_B, these play those lil server chirps that sync with the trackTrainingAmbience: Training_Amb_V2 Parameter Name Type Description AmbSwitch [D] If AmbSwitch &gt; 0, the sound becomes muffled Music: None available.ValleyAmbience: Valley_Amb_V2 Parameter Name Type Description ValleyAmbBUNKER [S]   ValleyAmbEXT [S]   ValleyAmbINT [S] Ambswitch &gt; 1 muffles this layer. Music: Main_Valley_Timeline_V2 Parameter Name Type Description ValleyAmbBUNKER [D] transitions to bunker section ValleyMusicBUNKERDEEP [D] plays disturbing bunker layer The space is part of the name and not a typo. &#8617; " }, { "title": "Setting up Music Events for Maps", "url": "/posts/mapping_music/", "categories": "Map Modding", "tags": "maps, audio", "date": "2024-01-14 00:00:00 +0000", "snippet": "Setting up Music Events for Maps Setting up Audio and Working with QSM for Maps is REQUIRED knowledge for this page. Please read it before continuing.IntroductionThis guide will step you through the requirements to get music implemented into your game. It will also discuss how to use the more dynamic elements of the OST to make your levels feel much more polished.There is an Example map provided in the Community Mapping Framework that demonstrates the use of the OST and some of the additional actors you can use with it.Level Blueprint SetupFor music to react dynamically to combat, the bare minimum you need to do is to set it up in the Level Blueprint. Open the Level Blueprint for you main Level Click on the Class Defaults button at the top and under details panel locate Ready or Not Level Script &gt; Level Data &gt; Music Data In Music Data assign the Data Asset for the music you wish to use for you level. These are located at Content &gt; ReadyOrNot &gt; Data &gt; Music Click Compile and Save. You can close the Blueprint and next time you play your Level, it should play the music assigned and dynamically change when you enter combat! If you just want some general music in your level to react to combat, this is all you need! You do not need to implement the complex sections below to get music working.Controlling the OST The information here is very nuanced and hard to explain. Not many people have worked with this, so information and support is limited. The info below should give you a general understanding of the concepts needed to start tinkering with it, but it is not comprehensive. The main bulk of information comes from Zack and he is the person to talk to if you have a specific question about the interactions.If you want to take full advantage of the OST of the game, you will need to leverage the Sound_ParameterTransition_V2_BP_C Blueprint (T-BP from here on) to control FMOD Parameters. This is pretty much the only actor needed to control the OST. ALL the values and parameters you will need are documented here: Reference - FMOD ParametersThe OST Timelines are different for each map. Depending on the map chosen, you may need to adjust the timeline in different ways.There are generally 2 ways to do this: As simple named Parameter with no values These require you to add the Level’s music timeline to the FMOD Ambient / Music Events array of existing T-BP for Ambients/Doors or used by themselves on a dedicated T-BP. You then add the Parameter name to the INParameter/OUTParameter of said element. e.g. Just like you would for GasAmbIN or GasAmbOUT for Ambient Events. These events do not need anything special to be done to them and will advance the OST timeline on the corresponding IN/OUT side of the T-BP. Controlled by AmbSwitch If a Parameter is controlled by AmbSwitch, you do not need to add the music timeline to the FMOD Ambient / Music Events of the T-BP, only FMOD Global Parameter needs to be set to “AmbSwitch”. These are typically used for when you are going deeper into a structure and things need to get muffled. Most of these are dynamic and have values that can be used between 0-3 depending on the map and generally match up with the same level’s Ambient Event. If you are using a Music Timeline and Ambient Event from different maps, you will likely encounter weird behavior. In these cases it’s recommended to use 2 separate T-BPs in the same spot with different values for AmbSwitch to avoid conflicts. Up until this point, the T-BP has just been used for controlling the ambient sounds when you enter through doors, however you can use T-BPs as ways to section off zones and you can be a little more fluid with their size and placement. Not all areas are cut+paste rooms with door thresholds, sometimes we have open areas (think Farm) that need to advance the timeline when players pass a certain threshold.The example map provided does this, In the picture below, I have selected 4 different T-BP with the same variables but have been arranged to form a zone the player can’t avoid if they wish to pass. It affectly makes it so when you pass the blue line (visual representation) from any location, the timeline will progress. In this case it triggers the StreamerENTRY parameter on the IN side of the T-BP.You may want to use a method similar to this if you have a map with multiple spawn locations that eventually converge to the same locations. This is what was done in Hospital. Players can start on different sides of the map, but the timeline will progress the same no matter which spawn they choose as they progress deeper into the map. Regardless of where they start or end, the timeline will hit the same beats as the T-BPs have been set up to activate equally on either side as they cascade deeper into the structure.Sound_LookAtParameterTrigger_BP_CThis is a blueprint that plays a sting when you look at a specific location. It was used in the game for musical stings when players looked at those photos in Streamer, or Blood/Bullet holes in Hospital. These events will ONLY work on those timelines and you cannot mix-and-match them. They are usually static events (only played once and cannot be trigger again).The following maps have events that are compatible with the Music Timelines: Streamer Hospital Dorms Property Description FMOD Event to Change Chuck the timeline you are using in here FMOD Parameter to Change Self explanatory. eg: For Streamer, you would play StreamerAGENCYPICSSEEN to activate the sting DO NOT Edit the scale of these or any of their components! If you require to edit the shape - modify the Box’s Box Extent or LookAtTrigger’s Sphere Radius .Sound_MusicParameterChanger_BP_CThis blueprints acts as a way to dynamically change some specific Timeline parameters as players get closer or further away from them. eg: Muffling the Timeline when the player gets closer to the Jukebox in Gas, you can hear the Jukebox music clearer. Property Description Radius Self-explanatory Event The Timeline event to modify Parameter Name Parameter name to edit. eg: In Gas it would be GasDiegetic Indoor / Outdoor Check If the change needs to take into account being inside or outside Amb Switch Min Value To Check Self-explanatory Amb Switch Max Value To Check Self-explanatory " }, { "title": "Setting up Audio and Working with QSM for Maps", "url": "/posts/mapping_audio/", "categories": "Map Modding", "tags": "maps, audio, qsm", "date": "2024-01-09 00:00:00 +0000", "snippet": "Setting up Audio and Working with QSM for MapsIntroductionReady or Not uses a combination of FMOD and an in-house built audio solver called the Quantum Sound Manager (QSM). QSM is a method to help with reverb and audio occlusion from around the map and takes into consideration room sizes, door states and even whether or not glass is broken and adjust volumes accordingly.This guide will explain the requirements to get QSM working within your map and how to integrate it with FMOD ambiance and events.The Example Map provided in the Template has QSM set up for a generic house, so check it out if you’re curious.The second part of this guide is Setting up Music Events for MapsSetting up FMOD You do not actually need to complete the steps below to implement QSM. However it is likely you will want to mess with some events if you want to tweak Ambient events. The steps below will tell you how to get it working.Currently the Template has placeholders for the FMOD events - you cannot actually listen to them. If you wish to hear them you will need to: Navigate to C:\\SteamLibrary\\steamapps\\common\\Ready Or Not\\ReadyOrNot\\Content\\FMOD and copy the Desktop folder Within your project folder, paste the Desktop folder to ...\\RonTemplate\\Content\\FMODThis should be all you need to do to start hearing FMOD events if you press Play.Actor Overview Any property not listed in the tables below are meant to be private and we shouldn’t modify themReady Or Not Audio Volume A Volume that controls FMOD Events when players are in them, it essentially acts as a trigger volume for child/nested events. Maps require at least one for Reverb and Ambient Sounds that cover the entire playable space ALL FMOD Events should be nested to a Ready Or Not Audio Volume Property Description Reverb Events Unknown use Room Volume These are volumes that are placed within the interior sections of your map. They aim to represent the different shapes and sizes of the rooms they occupy. QSM will use these volumes to determine how the audio will bounce around the room according to the shape of the volumes. They can be comprised of 1 or many different volumes Property Description Room Group ID Used to group multiple Room Volumes covering the same room Reflection Probe Reference to the Reflection Probe object to be assigned for this specific Room Volume (see below) DO NOT Edit the scale of these. If you require to edit the shape, modify the Volume in Brush Edit mode (Shift+4).[NEW] Reflection Probe A probe placed in the middle of the Room Volume to communicate the center and size of the room to QSM There is a Tool available called EUW_Tool_RoomVolumeHelper which will automate the process for you This is not a requirement but Zack HIGHLY RECOMMENDS IT. Property Description Room Size Approximate volumetric size of the room - can be auto generated with the Blueprint mentioned above Portal Volume These volumes act as portals for QSM to pass through into other rooms. These are specifically placed in doorways, open windows, arches &amp; holes and even managing when glass is broken. Property Description Is Outside Enable if the Portal connects to the outside Portal Type Used to determine the direction in which sound will pass through the portal: HORIZONTAL for regular use through doors and windows. VERTICAL for upward sound direction through a well or hole in the ground. Attached Objects Add your doors that are within the Volume to this array. DO NOT ADD TO “Doors”! OLD SPAWNERS: Assign the Portal Volume to BP_Door_Spawner’s Add to Audio Room Portal Breakable Glass Soft Pointer Pointer to the Breakable Glass BP the Portal Volume covers. The Breakable Glass BP is located: Content &gt; ReadyOrNot &gt; Level &gt; Destructibles &gt; Glass &gt; BP_BreakableGlass_v01_C. 1 BP per Portal. DO NOT Edit the scale of these. If you require to edit the shape, modify the Volume in Brush Edit mode (Shift+4).Sound_ParameterTransition_V2_BP_C Blueprint This Blueprint is used to help transition between different FMOD and Reverb states. Specifically used when passing through doors and thresholds into other rooms. They can also be used to activate parameters for the music in the game to make it more dynamic. Property Description FMOD Ambient / Music Events Contains the FMOD Events that control the Transitions. For Ambient sound Outdoor-to-Indoor Transitions - choose which map Ambient sounds to go here (will contain *_Amb in the file name, eg: Gas_Amb_V2 INParameter FMOD Parameter taken from the Amb FMOD Event you added above. You can find these values here: Reference - FMOD Parameters OUTParameter Exactly the same as above, but usually suffix with OUT (eg: GasAmbOUT) Reverb IN Select the drop down that best represents the Room Reverb you are moving into Reverb IN Material Select the drop down that best represents the physical material of the room you are moving into Reverb OUT Select the drop down that best represents the Reverb in the room you are entering from Reverb OUT Material Select the drop down that best represents the physical material of the room you are entering from Global Parameter IN The FMOD modifier for Indoor Audio. Set to 1 as a good default Global Parameter OUT The FMOD modifier for Outdoor Audio. Set to 0 as a good default Use Door Check Feature Enable if the transition between Rooms uses doors. Helps with determining reverb on different door open states. Gobal Parameter Door Check? Leave Disabled. Unsure what it does. Doors Open Unable to modify, but within the official editor, is auto populated via the Construction script. The ‘IN’ part of the BP can be identified by the white spline line inside the box when the BP is UNSELECTED. Distance Along Spline Threshold, Min/Max Range OUTSIDE/INSIDE can be edited but should be left default values. These are spline editing values used for more artistic control on fringe case audio transitions. An example of this is the long corridor in the club that heads towards the dance floor. DO NOT Edit the scale of these. If you require to edit the shape, modify the Box component’s Box Extent. Editing the object scales will mess with the FMOD transitions.[NEW] QSM_Weapon_Reflection_Probe Located Content &gt; FMOD &gt; Events &gt; Levels &gt; Reverbs The best way to describe it is that it’s akin to a sound version of a Map’s Facade. Its a fake Reverb/Echo probe placed outside the map to mimic where sound would Reverb off of back to the player. eg: Bouncing off distance large buildings or a neighbors house, Echos/Reverbs from an underpass or cave outside the map, or just a simulated reverb from a large valley or open field These are more artistically placed around the map to give that je ne sais quoi to the echoes DO NOT Exceed more than 6 of these probes per map. You may usually need less.[NEW] Sound_StarterAmbience_V2_BP_C Blueprint Works very similar to the Transition Blueprint above, however is meant to set the starting values for Ambiance through “AmbSwitch”* when a player loads into a map. It covers the player spawns. Property Description FMOD Ambient / Music Events Contains the FMOD Events that control the Transitions. Mainly for Ambiance but OST Timelines can be used as well STARTINGParameter FMOD Parameter taken from the Amb FMOD Event you added above. You can find these values here: Reference - FMOD Parameters Starting Global Parameter Just set this to “AmbSwitch” Starting Global Parameter Value The value of AmbSwitch to be set when a player loads in Starting Reverb Select the drop down that best represents the Reverb of the starting area Starting Reverb Material Select the drop down that best represents the make of the materials of the starting area Character Reaction Volume Usually used with ai SWAT to trigger [CALL]Env voice lines when you and SWAT are standing within the volume. There is a timer looping trying to run the voice lines, provided that combat isn’t active and another line hasn’t played too recently. There is an example setup in the RoN_ExampleMap More voice lines are available in /Ready Or Not/ReadyOrNot/Content/VO_PC/ in the game Paks You can use your own audio if you include the .wav or .ogg in your Paks Interest Point actors can be placed and linked to provide somewhere for the talker to look at when triggered. Footstep Foley Volume Changes the characters footsteps when they are overlapping it. Can be used for puddles, glass, tall grass or bushes etc. Many usable FMOD events are located in /Content/FMOD/Events/Surfaces/Foliage/Setting up Audio Before beginning, it is highly recommended that each one of these steps are done within a folder (or sub-level) within the World Outliner to keep things ordered. In this particular case you should be renaming assets (F2) as you create them to keep things managable.Part 1 - [NEW] Important Notes about FMOD EventsAll FMOD events must follow these 2 guidelines so they work flawlessly in the map: Always Disable Auto Activate for all Events Always nest/make events a child of a Ready Or Not Audio VolumeThe reasoning is that there are “way too many instances where FMOD for whatever reason stops the audio for certain events since they load before the game initializes” - Zack c. 2024Part 2 - Ready or Not Audio Volume and Level Ambience &amp; Reverb Drag a Ready or Not Audio Volume from the actor’s tab into the scene. Edit the brush to cover the playable area. It is recommended to scale it just a bit over to encapsulate the some of the outside area as a safety net against players Go to Content &gt; FMOD &gt; Levels &gt; Reverbs in the Content Browser and select the ReverbMaster FMOD Event and drag it into your scene. IMPORTANT: Within the World Outliner, find this Event and drag it ONTOP of the Ready or Not Audio Volume to make it an attached actor of it. Decide which Level’s ambiance is appropriate for your map and navigate to Content &gt; FMOD &gt; Levels and enter the appropriate level folder. Find the correct Ambient FMOD Event for your specific level listed here: Reference - FMOD Parameters and drag it into your scene. IMPORTANT: Within the World Outliner, find this Event and drag it ONTOP of the Ready or Not Audio Volume to make it an attached actor of it, just like before.The Main RoN Audio Volume with it’s attached ReverbMaster and Level Ambiance eventsThe Ready or Not Audio Volumes can also be used to control FMOD events that should play persistently around the map but shouldn’t be heard all the time. e.g. The hum of a fridge that was in a room, but you didn’t want to hear it if you were outside. Another example would be hearing the splash of a water feature outside, but only if you were close to it.You can think of them as trigger volumes to control scenarios by setting them up in the same manner as above, by making any relevant FMOD Events an attached actor of the Volume.Remember to always disable Auto Activate.An attached ambient sound eventPart 3 - Setting up Room VolumesRoom Volumes (RV) have a couple of requirements and quirks that you MUST follow: You DO NOT need a RV for the Exterior/Outside portions of your map. Only Interior sections. A room’s RV can consist of 1 or multiple RVs. If you are using multiple RVs for a single room, make sure they share the same Room Group ID. It is best to just keep RV as simple Boxes if you are using many. RVs cannot be concave. RVs of the same ID can overlap, and it is recommended to slightly overlap volumes to be safe. HOWEVER RVs of different IDs CANNOT overlap AND their faces must be touching/meeting (see Figure below). Failure to meet these requirements will mean that QSM will not work correctly. It is HIGHLY recommended that for this process you keep World grid snapping enabled for your entire process to make ‘meeting’ the walls an easier task. Snapping to 5uu is an excellent increment to work fast and accurately. It is recommended that the RVs conform to the shape of the room they are in as closely as possible. It is also recommended that the volumes also slightly extend into the floors, walls &amp; ceilings rather than undershoot them as so the Audio bounces retain their accuracy. Having the RV not extend outside the walls a little bit might cause issues such as footsteps not being heard on the floor or gunshots not being registered inside the room if they hit the ceiling or walls. I have used a spacing of 5uu as a good buffer for my extra extending. Part 4 - [NEW] Setting Up Reflection Probes Go to Content &gt; Mods &gt; Template &gt; Tools and right-click and Run the EUW_Tool_Room_VolumeHelper Click on Make/Assign Probes, it will go through and make and assign probes and place them in their appropriate location to the Volumes they get assigned to. Select all the newly generated Reflection Probes, click on the new Reflection Probes and press Guess Room Sizes (Selected Probe/s) in the tool. That’s it! Though I would double check all the assignments just to be safe.Part 5 - Setting up Portal VolumesPortal Volumes (PV) are relatively easier to set up in comparison to Room Volumes and don’t require as many special rules Drag a Portal Volume from the actor’s tab into the scene. Drag the PV so that it covers the threshold between 2 different Rooms. e.g. Between a doorway or going from an outdoor area to an interior one. Edit the PV in Brush Edit Mode (Shift+4) so that it completely covers the door-frame/window/hole and extends out a little bit. See the picture below for an example: DO NOT Scale the PV, they should only be edited via Brush Edit Mode PVs do not need to be exactly the same size as the hole, and it is fine if it is larger or extends wider/higher than the hole that it covers The PV’s box needs to be present in both rooms it is creating a Portal for. A portal volume (purple) placed intersecting a room volume (blue) If the PV goes from an exterior/outdoor area into an interior area with Room Volumes, Enable the Is Outside property In most cases, leave Portal Type to HORIZONTAL. If you are using Breakable Glass, set the Breakable Glass Soft Pointer to the corresponding BP_BreakableGlass_C Blueprint. If your portal is overlapping a Door actor, add an entry (+) to the Attached Objects array and add your door. If you have double doors, add another entry and the 2nd door. Not doing so will cause the door’s audio to be muffled on one side of the door when interacting with it,and sounds will not be occluded when the door is closed. If you are using the old Door Spawner system, you need to instead, in the door spawner, add the portal to Add to Audio Room Portal Zack recommends to approach doing Portal Volumes by completing the Outdoor-to-Indoor thresholds first for testing. You will need to make sure that all of these thresholds are covered for QSM to correctly identify the Interior and Exterior areas.Part 6 - Setting up Sound_ParameterTransition_V2_BP_C BlueprintsPart 6.1 Placing the Transition BP Drag a Sound_ParameterTransition_V2_BP_C into the scene, located within the Content Browser at Content &gt; Blueprints &gt; Sound. Identify which side of the BP is the IN side by UNSELECTING the BP and noting down what side the white spline line inside the box is on. The side the line is on is your IN direction. When you select the BP there will be splines on either side. Rotate the Transition BP appropriately so you know which part of the BP is IN &amp; OUT You will likely need to resize the BP, but it is important that you DO NOT SCALE it. To change the size select the Box Component of the BP and adjust the Box Extent values instead. The size of the box is an artistic choice but note that as soon as a player steps into it, the transitions will begin. So take careful consideration to not place them in areas that do not make sense logically. The spline values determines the ratio in which the volume of the ambiance changes when moving through the BP. You should make sure that if you edit the Box Component, you also edit the Spline Component points on either end to be WITHIN the Box Component You should only need to change the X value for the spline point’s Location Transition BP’s require different property settings for Outdoor-to-Indoor and Indoor-to-Indoor thresholds. Please read the requirements properly.Part 6.2 Properties for OUTDOOR-to-INDOOR Transitions Add (+) an element to FMOD Ambient / Music Events and add your Ambient Event you selected from step 1. For the same element, type the corresponding INParameter &amp; OUTParameter that is defined within the same FMOD Event These do not have a consistent naming convention, however the OUT parameter is usually named OUT or EXT Eg: Gas_Amb_V2 is GasAmbIN &amp; GasAmbOUT, while Valley_Amb_V2 uses ValleyAmbINT &amp; ValleyAmbEXT You will need to locate these identifiers defined here Reference - FMOD Parameters Select the appropriate reverbs for your rooms for ReverbIN &amp; ReverbOUT For FMOD Global Parameter type in exactly: AmbSwitch Enable Use Door Check Feature if your Transition BP contains doors You cannot add elements to Doors Open, this is supposed to self-populate via the BP’s construction script. Se the Global Parameter IN to be set to 1 &amp; Global Parameter OUT to be set to 0Part 6.3 Properties for INDOOR-to-INDOOR Transitions Select the appropriate reverbs for your rooms for ReverbIN &amp; ReverbOUT That’s it! You don’t need to modify any of the other properties like above. It is actually recommended not to modify anything else as the BP has checks that will mess up audio for smooth Interior transitions.Part 7 - [NEW] Breakable GlassBreakable glass is extremely easy to implement but they need to use Portals to allow sound to allow sound pass through when they’re broken. Create a Portal Volume that tightly fits the area where the breakable glass will go Drop a BP_BreakableGlass_v01_C (located: Content &gt; ReadyOrNot &gt; Level &gt; Destructibles &gt; Glass) into your scene You can select the Material and Mesh for the Blueprint to use Before the Los Suenos Stories DLC3, this was in Content &gt; ThirdParty &gt; BreakableGlass &gt; Blueprints` Select the Portal Volume you wish to match with the glass and under Breakable Glass Soft Point use the eye-dropper to select the Breakable Glass Blueprint in the scene. If your Breakable Glass crosses the threshold of Indoor-Outdoor (like most windows do), Enable Is OutsidePart 8 - [NEW] Placing down QSM_Weapon_Reflection_ProbesAs mentioned in the Actor Overview, these are akin to a sound version of a Map’s Facade. It’s a fake Reverb/Echo probe placed outside the map to mimic where sound (specifically gunshots) would echo/reverb off of back towards the player.Examples: Bouncing off distance large buildings or a neighbors house, echos/reverbs from an underpass or cave outside the map, or just a simulated reverb from a large valley or open field. These are more artistically placed around the map to give it that je ne sais quoi. There really isn’t a science to it, just where you think some reverb and echoes should come from.To set them up: Place a QSM_Weapon_Reflection_Probe in your map from Content &gt; FMOD &gt; Events &gt; Levels &gt; Reverbs. As with all FMOD Events, nest it in a Ready Or Not Audio Volume and Disable Auto Activate. That’s it!Some additional notes, Zack mentions you can place up to around 6 probes in your map, but you shouldn’t exceed 6. Additionally only 2 probes are active at a time based on proximity to the player. They can be nested in a RoNAudioVolume, but do not need to be physically inside it.Part 9 - [NEW] Using the Sound_StarterAmbience_V2_BP_C BlueprintThese work very similar to the Transition Blueprints, however is meant to set the starting values for Ambiance through “AmbSwitch”* when a player loads into a map. Place a Sound_StarterAmbience_V2_BP_C into your scene and make sure it covers the PlayerStart You do not need one BP per PlayerStart (as one can cover many), but it really should be 1 BP per location Do not just encompass the map in one BP, it should be as localized as possible. The rest of it works the same as a Transition Blueprint, just select the Event to edits and the starting AmbSwitch parameters and values that you wish.Tools &amp; TestingRareKiwi has created a bunch of useful tools to help test and debug QSM and OST Values. All these tools are provided in the Blueprint and Tools folders.BP_AudioPropagationQSMTesterContent &gt; Mods &gt; Template &gt; BlueprintsThis is a BP that you place anywhere in your level. When you play your level in the game it will constantly fire a gun shot so you can debug and see if QSM is working correctly. Control Action P Move Here [ (Left Bracket) Trace there ] (Right Bracket) Occlusion Type Del (Delete) Toggle Active Pressing \\ (Backslash) during the mission countdown will crash RoNBP_AudioSamplerContent &gt; Mods &gt; Template &gt; BlueprintsWhen placed in your level, it allows you to test the effect different FMOD Parameters have on FMOD Events. This is meant to be used within the Editor. You can changed what Event to preview by selecting the FMODAudio component in the Details panel. You can use any FMOD Event in here; Timelines, Ambients and regular sound effects!When you are playing in the editor, the Blueprint will auto-populate the sliders to show what you can edit. However the sliders will not update the audio automatically and you will need press the Play button for each change you make.Example Use: The FMOD event Ridgeline_Cicadas can be controlled by AmbSwitch to lower the volume for entering interior sections. It would be hard to figure out the correct values to use without many iterative builds, but using the AudioSampler allows us to quickly identify the values needed without leaving the editor.EUW_Tool_RoomVolumeHelperContent &gt; Mods &gt; ToolsUsed to help keep track and change the Room IDs of Room Volumes. It creates a list of all Room IDs you have and select specific IDs.EUW_Tool_ListRoomIDsContent &gt; Mods &gt; ToolsUsed to help keep track and change the Room IDs of Room Volumes. It creates a list of all Room IDs you have and select specific IDs.What Next? Music!If you got QSM all set up, you should look at the next part of the guide: Setting up Music Events for Maps to allow you add music to your map and let it react dynamically to combat and other parameters." }, { "title": "(OUTDATED) Getting Started with Ready or Not Mapping in UE4", "url": "/posts/mapping_gettingstarted/", "categories": "Map Modding", "tags": "maps, essential, introduction", "date": "2023-12-28 00:00:00 +0000", "snippet": "[OUTDATED] Getting Started with Ready or Not Mapping in UE4 [1.0 RELEASE] This guide is outdated with the release of DLC1 Home Invasion and the engine being upgraded to UE5. Please click here for the updated guide: Getting Started with Ready or Not Mapping in UE5IntroductionReady or Not is currently Unofficially supported by dedicated modders. Due to the hard work of them we are currently able to get around 80-90% of the experience that Official Maps have; there is expected to be a little bit of Jank when creating maps.This guide will step you through the basic set of requirements needed to build custom levels for Ready or Not and complete your first iteration by getting your map into the game. Ready or Not mapping REQUIRES that you download and use Unreal Engine 4.27.2. Do not download or use any other version. If this is your first time creating a map, be aware that the level of experience to create something functioning is considered Intemediate. It is recommended that you spend some time watching and learning some beginner videos for UE4 on youtube before you start asking too many newbie questions.If you need help or have any questions, don’t hesitate to join the RoN Custom Maps Discord!The Level Design Cycle for RoNWe currently provide a template project that contains all the gameplay features/blueprints needed to make RoN maps here: Installation.For the Level Design process, you pretty much do it all within Unreal Engine, and can use whatever (reasonable) method you want to create your level.It is important to note that currently we cannot test gameplay within Unreal Engine and can only do it within the Game. To actually play the level you need to pack your level into a deployable .PAK file. More info here: Cooking &amp; Packaging &amp; InstallingDevelopment ExampleIf you would like to see what it’s like to make a map for Ready or Not, I recorded my entire development for Hell Comes to the Hills.YouTube Playlist: Ready or Not: Custom Map Development by DeltaInstallationUnreal Engine Download and install the Epic Launcher. Open the Launcher, go Unreal Engine on the left side bar, then Library along the top toolbar Under Engine Versions press the + icon and next to the Version Number, click the drop down and select 4.27.2 and InstallThe Template Project Currently we have a pre-release project that you NEED to use for maps to work for 1.0. Do not use the Covered Bones Template available on Nexus. THIS IS LIKELY TO CHANGE A LOT, TO KEEP UP TO DATE, PLEASE JOIN THE DISCORD. Create a Folder anywhere and name it whatever you want. This will be the folder you need to extract the following files into. I will refer to this folder as RoNTemplate. Download and Extract the following into RoNTemplate https://drive.google.com/file/d/17uyZ_hrklBIN1ci88GajcnT1pOeFQJGx/view?usp=sharing https://drive.google.com/file/d/1BsavVwAYh6kq7hUs9wD3o2A5_nY6rWn6/view?usp=sharing Download the following Hotfix. DELETE your /plugins/ folder within RoNTemplate and then Extract the contents of the hotfix to RoNTemplate https://drive.google.com/file/d/1IAD9qjTfN2JJ5yBUZ3R9Jhzi8R0YdgCS/view?usp=sharing Open RoNTemplate and open the ReadyOrNot.uproject. This will launch the Project and may take a couple of minutes to load if this is your first time using Unreal. Just be patient. HELP! I Get 100s of errors when I load up the project!This is normal, it’s just missing some game files that you can extract later on. We also don’t have access to everything. Any errors you get on start-up are fine and will not give you any issues, provided you followed the steps so far exactly.Your First Map If you have seen previous YouTube tutorials it may have said you need to set up the Render Settings, or modify the Packaging settings. With the latest version of the Template, you do not need to change or extract any settings. You should be good to go from the first time you launch.The Folder StructureBefore we continue, it is very important to understand the folder structure of an Unreal Project.Unreal uses this concept of a Content folder, this is where all the game content and maps for the game reside (located at: ...\\RoNTemplate\\Content).When you install a .PAK file you are essentially adding or overriding assets in Content. Any change you make here will likely affect other mods that people use. This a more common occurance when a lot of us are using the same Marketplace or Quixel/Megascans assets.To prevent us from stepping on each other’s work, It is highly suggested that you create a directory for yourself within the Mods folder and place ALL your assets (including 3rd Party/Marketplace/Quixel/Megascans) there. The Mods folder should look like the following:Content Mods Blueprints Reap YourUsername You will see other folders in here such as Blueprints &amp; Reap. DO NOT edit the files in here. Since you will be visiting your folder frequently I would consider changing the the folder color and adding it your favourites within the Content Browser. You can do this by simply right-clicking the folder here.Bare Essentials for Gameplay Following the previous steps, go to your ...\\Mod\\YourUsername directory in the Content Browser and create a new Level then open it Whatever you name it will be what it shows up as in-game Once opened, on the toolbar click on Blueprints &gt; Open Level Blueprint Under Class Defaults, check the details panel and click on Item Data and add the ItemData asset Click Compile, and you can save and exit the window Under the Place Actors tab, chuck down a Geometry floor and a couple of walls using boxes to act as a space to play in If everything is black, press Alt+3 to switch to Unlit Mode Under the Place Actors tab, go to All Classes and search for and place down the following: 5 Player Start Actors This is where your Player and Team Spawn Nav Mesh Bounds Volume Required for your AI to function, whatever this covers will be where your AI can walk World Data Generator Actor This will build the navigation and gameplay elements when you load your map Roster Scenario Spawner Actor This creates your gameplay objectives and spawns In the Content Browser, navigate to ...\\Content\\BlueprintSpawners\\PostRelease and place down 2 BP_AISpawn_Reap_V1 Blueprints Technically not needed, but without it the map will automatically complete when you play it and you wont be able to test it. You can use the AISpawn actor, but Reap’s one has some better control After you place it down in your map you can search it in the Place Actors tab. Additional ThingsLightingCurrently your level doesn’t have any light, so we should set up the basic stuff so we can actually see when we playtest it. Add the following: Lightmass Importance Volume and adjust it to cover the playable area 1 Directional Light to act as a Sun/Moon Set it to Stationary for dynamic shadows to work properly Under Details &gt; Atmosphere and Cloud enable Atmosphere Sun Light 1 Sky Light Actor 1 Sky Atmosphere Actor 1 Exponential Height Fog Actor 1 Sphere Reflection Probe that encompasses the map Without reflections the models/guns in game can look flat and not properly lit. If you set your Directional Light to be the Atmosphere Sun Light, you can use Ctrl+L to change the direction of your sun nowAISpawnsThe 2 BP_AISpawn_Reap_V1 blueprints that we placed down are not configured yet, so lets do that by adding a Civilian and Suspect: Select an AISpawn and under AISpawn &gt; Spawn Array press the + symbol Expand the new array element and also expand Spawned AI This is where you choose what AI to Spawn To begin with change the Data Table to AIDataTable_Gas &amp; the Row Name to Civilian_Gas_Employee_01 Select the other AISpawn and follow the same steps but change the Row Name to Suspect_01_ShotgunYour AISpawn details should look something similar to this: You can select any Data Table and Row Name for your map and you are not restricted to 1 Data Table.DoorsDoors are pretty simple to place down into your map. In the Content Browser, navigate to ...\\Content\\BlueprintSpawners\\PostRelease and place down a BP_Door_Reap_V1 blueprint Within the Details panel, change the Door Type &gt; Row Name to the sort of Door you would like For testing purposes I like to use Wood_Door_Painted The basic Template does not include the Static Meshes so you can preview the door. To get them you will need to follow the steps in Using Ready or Not Game Assets and Content For the AI to actually use doors and stack up properly, it seems the door needs to be connected to an actual room-like structure (ie: enclosed by 3-4 walls). It’s unclear on the exact requirements at the moment, but this seems to be one of them.LevelDataLevelData will show you how your map will look in the Level/Mission Select screen. Currently LevelData does not work and we are waiting for a patch from VOID.Building / BakingIf you’ve been following along so far, then you probably have not built your map. Building a map fixes up changes in Geometry &amp; Volumes, Lighting &amp; Reflections and Pathing. You should do it whenever you want to update/preview changes in your map.To build your map you simply press the Build button on the toolbar. Once the build completes, you should File &gt; Save All Building times can vary, but the largest determining factor is usually Lighting. As map size increases and the quality of Lighting is changed, builds can take anywhere from 2mins all the way up to 6hrs and longer. At the moment the map should probably only take a couple of seconds.CookingCooking is the process of turning the project into content that can be deployed on other machines. We also only want cook content that is only important for the map to keep file size small. We need to configure this first: Go to Edit &gt; Project Settings and on the side tab select Project &gt; Packaging Under Packaging &gt; List of maps to include in a packaged build you should see an element that shows the directory for Reap’s Example.umap. We want to replace this entry with the directory of our Map.umap. If you do not see List of maps to include in a packaged build you may need to press the arrow that looks like this: Press the + and create another entry here and navigate to your map’s BuildData, it should be in the exact same location as your map. You do not need to change any other settings and it should look something like this: Make sure you Save All before proceeding Select File &gt; Cook Content for Windows This could take some time for your first cook as it compiles all the shaders. Just be patient. You should hear it succeed, but a message will not remain on screen when it completes. If it failed the notification will stay on the screen. A common cause of a failed Cook is usual a result of including already Cooked content from this process, so make sure you haven’t included it in any of your directories. Even creating materials that reference cooked textures will create a cook to fail.Packaging &amp; Installing your MapPackaging will turn our cooked content into a single compressed file that we can actually use to play in game and distribute to other people. There are a bunch of Unreal packers out in the wild, but only use the following method for maps. Create a folder somewhere to act as your staging location for packing, name doesn’t matter but I use Paking. Within this folder create a new folder using the following naming convention: pakchunk99-YOURMAPNAME the 99 after pakchunk indicates the load order of paks. We keep maps at 99. Replace YOURMAPNAME with whatever your map’s name is. This will not show up in game, but will help identify your map/mod to people downloading your mod. Sometimes it is required to append _P at the end of the name if you are replacing files (i.e. P for Patching). But since you shouldn’t be replacing any files this is unneeded. Go to C:\\Program Files\\Epic Games\\UE_4.27\\Engine\\Binaries\\Win64 and create a .bat file here with the following arguments: @if \"%~1\"==\"\" goto skip @setlocal enableextensions @pushd %~dp0 @echo \"%~1\\*.*\" \"../../../ReadyOrNot/\" &gt;filelist.txt .\\UnrealPak.exe \"%~1.pak\" -create=filelist.txt -compress @popd @pause :skip Create a Shortcut to the .bat file you created and move it to your staging folder from step 1. Navigate to your Template/Project folder and go to: ...\\RoNTemplate\\Saved\\Cooked\\WindowsNoEditor\\ReadyOrNot and copy ONLY the Content folder Paste your Content folder into your pakchunk99-YOURMAPNAME folder Drag your pakchunk99-YOURMAPNAME folder onto your .bat shortcut. A command window will pop up and tell you when it is complete. If successful you should have a new file in your staging directory named pakchunk99-YOURMAPNAME.pak Copy your pakchunk99-YOURMAPNAME.pak to C:\\SteamLibrary\\steamapps\\common\\Ready Or Not\\ReadyOrNot\\Content\\Paks Your map should now be available in the gameThis is an example of what a Staging folder can look like: You will be jumping between these folders a lot, I really recommend putting your Staging folder, Project Cooked folder Ready or Not Pak directory to your Quick Access bar.Testing your Map I highly recommend that you download the Console Unlocker - Camera Mod by QuantumNuke75. It will give you ability to use a Free-Look camera and also use basic Unreal Engine Console Commands. Both functions are extremely helpful for testing.The easiest way to test your map is to simply load up the game and select it from the Mission Select screen. If all works well then it should take a couple of seconds to build WorldGen and plops you into the map.If you installed the Console Unlocker mod, you can also load into it faster by hitting ~ and typing open YOURMAPNAME and pressing execute. YOURMAPNAME should be what the .umap name is called within your project. NOT the package name. For Hell Comes to the Hills the command for opening it is open Hell_Comes_to_the_Hills.Common Issues with a Map not LoadingMake sure you did the following: Using the up-to-date version of the template linked above in this guide. You are using the packing method described above in this guide. Only include the Content folder from \\RoNTemplate\\Saved\\Cooked\\WindowsNoEditor\\ReadyOrNot You have all the actors mentioned in Bare Essentials for Gameplay.If your map is still not not launching, then you may want to reach out for help on the Mapping Discord linked above.Updating your Map after PlaytestingAnd Voilà! You’ve just gone through your first iteration of RoN Mapping!There are just some final important steps needed to know when you re-cook and package your map to test updates: After you recook your map, it is recommended that you delete the Content folder within your staged pakchunk99-YOURMAPNAME folder instead of overriding it. Overriding your folders may leave residual files and settings that may mess with your playtest BEFORE you launch the game. Navigate to C:\\Users\\USERNAME\\AppData\\Local\\ReadyOrNot\\Saved\\SaveGames and delete the WorldGen.sav file that has the same map name as your map (e.g. Hell Comes to the Hills filename looks like Hell_Comes_to_the_Hills_WorldGen_40173.sav). This step is critical! Each time the game launches your map for the first time, it generates World Data and stores it so the map launches faster the next time you play it. However the game does not know when your map has been changed. So you will likely be playing on a map with outdated build information resulting in quite a few bugs. The WorldGen contains information such as how doors are positions and connected, room sizes and layouts, stacking points, navigation, hiding spots and cover and a probably a lot of other things we don’t know about yet. So it is important to make sure you generate new World data with each iteration! Just like with the other folders, it is recommended you add the SaveGames directory to your quick access, as you will be visiting it quite a fair bit!Using Ready or Not Game Assets and ContentIf you want to use RoN game assets you will need to extract them yourself using umodel: https://www.gildor.org/en/projects/umodelTo get the assets: Open umodel and select your ...\\ReadyOrNot\\Content\\Paks folder Click Tools &gt; Scan Content and select Unreal Engine 4.27 Tick Flat View in the top-left corner. Sort by Stat (Static Meshes) Select all with Stat = 1 Select Tools &gt; Save Selected PackagesYou can repeat steps 4-6 for Skel (Skeletal Meshes)Once you are done copy the saved files to your project. For umodel the Game folder is the Content folder for your Project. So you can just copy the contents of Game into your Content folder.Restarting the Editor may take some time as the project discovers and indexes all the cooked assets.You can simply place down these meshes in your level but they may not have materials. However, when you load the game they will be textured fine. This is just a limitation we need to work around. Make sure you are keeping the directories the same from Game to Content. Cooked assets are the actual game files the game needs to reference for them to work. Do not put them in your Mods\\Username folder. You may want to repeat for some Tex (Textures) as well. But be warned that you will not have the materials to display onto the meshes. You will need rebuild the materials from scratch, and saving the Textures is not usually worth the time and hassle. It is generally not recommended to extract/save everything as it will take a very long time to do and will likely crash/fail to do so. Putting ALL the assets into your project will also significantly increase file size &amp; launching time when you open UE. If for some reason the assets are not loading double check the project settings so that it can use cooked content: https://docs.unrealengine.com/4.27/en-US/WorkingWithContent/CookedContentVideo Guide by Reap: https://www.youtube.com/watch?v=-xQKyV7_6fEWhere to Next?We have other guides that cover some more in-depth aspects of mapping that you can check out below:Additional Game Mechanics COMING SOONMap Optimization COMING SOONSetting up Audio and Working with QSM COMING SOONSetting up Music Events for Levels COMING SOON" }, { "title": "Quick Cook Setup", "url": "/posts/quickcook/", "categories": "Map Modding", "tags": "maps", "date": "2023-01-18 23:00:00 +0000", "snippet": "This is a guide to setup and use the quick cook editor scripting widget.The widget automates repetitive cooking, copying, paking and starting the game to load a specific level. Also supports separate profiles for maps or mods.Quick Cook Setup: Download the .zip containing the widget and python dependencies. Extract the .zip contents into your UE4 Project’s content folder so that you have two sub folders as shown; .../Content/QuickCook .../Content/Python Restart UE4 if it was open to ensure the new python modules are available. In UE4; Navigate to /Content/QuickCook/ in the content browser. Then right-click \"QuickCook\" and select \"Run Editor Utility Widget\" Fill out the configuration to match your setup for: Project Folder: Should be your covered bones folder etc containing the .uproject Staging Folder: Should be the parent of the after-cooking copy folder which you use with UnrealPak.exe to create .paks. This should be the parent folder of your pakchunk99-YOURMOD folder etc. Unreal Engine Dir: Should be where your engine files for UE 4.27 are located. Game Folder: Should be the top directory of your Ready Or Not game installation. {: .left } This configuration will be saved and loaded automatically to your UE4 Project’s directory at;...\\Saved\\QuickCook\\QuickCook.cfg You should add /Content/QuickCook/ to your “Directories to never cook” in your project settings.Quick Cook Usage: This widget doesn’t modify or bypass your project’s “Directories to never cook” or “List of maps to include in a packaged build” Therefore, please ensure you have manually cooked, named your staged mod folder and paked it successfully before using this tool.Profiles: Open your map. Opening a map will try to load a profile with matching name. To create your own, under “PAK NAME” enter your staging folder name (i.e. your pak name without .pak) In the right field enter your map name exactly as seen in the top-left tab or content browser. Press the Save button. Profiles are saved as .ini files in the project’s ...\\Saved\\QuickCook\\ Add the folders you wish to be synced when pressing the Copy button from ...\\Saved\\Cooked\\ to the profile’s folder within “Staging Folder”Although you can’t drag folders from the content browser, you CAN drag an asset within on to the None next to “Drag Here to Add” to quickly add their parent folder. Press Save Folders are copied relative to .../Saved/Cooked/WindowsNoEditor/ to allow copying Engine content if needed.The popular pak.bat includes /ReadyOrNot/ which these tools wont work with.To modify an existing staged folder simply make sure your cooked copy of /Content/ is inside a /ReadyOrNot/ folder.Eg; .../pakchunk99-YOURMOD/ReadyOrNot/Content/To modify your pak.bat simply replace \"../../../ReadyOrNot/\" with \"../../../\" The Copy Button uses the dirsync python command syncThis syncs folders one way and only if files have changed data rather than by date to increase speed.Usage Notes: For Play to work correctly ensure QuickMap is installed and configured. Check box state and game mode selection state is saved to config, not profile. Check boxes below Copy, Pak and Play allow the tool to continue after the button to the left has finished it’s action.This let’s you in one click, press cook, then (after some time) automatically spawn in your level in game with a chosen gamemode. Freemode skips the 10 second game countdown and disables AI. No loadouts are loaded. Teleport requires a /QuickCook/QuickTeleport blueprint placed in your level. If ticked, it will move your player in Freemode to your UE4 viewport camera’s location Windowed requires a /QuickCook/QuickTeleport blueprint placed in your level. If ticked, it will run r.SetRes with the selected optionsQuickMap SetupQuickmap is an empty level that can be loaded before the game’s MainMenu level to enable extra game launch parameter options such as level loading. Download the pakchunk99-QuickLoad.pak from here or Nexus Mods or mod.io If in a .zip, extract it, then copy it your game’s pak folder like any other mod. /Ready Or Not/ReadyOrNot/Content/Paks/ Open %localappdata%\\ReadyOrNot\\Saved\\Config\\Windows\\Engine.ini [UE5] This is now \\Windows\\ instead of 4.27 \\WindowsNoEditor\\ Add an empty line then add this override; [/Script/EngineSettings.GameMapsSettings]GameDefaultMap=/Game/QuickCook/QuickMap.QuickMap Save the Engine.ini Be sure to remove this line, or update QuickLoad after a major update if the MainMenu level name changes." }, { "title": "Map Modding (OUTDATED)", "url": "/posts/mapmodding/", "categories": "Map Modding", "tags": "maps", "date": "2022-08-07 12:00:00 +0000", "snippet": "Map Modding This version of the mapping guide is outdated since the release of 1.0. For an updated guide and download please check out Getting Started with Ready or Not MappingSpecial thanks to:ACowBoyBishop#7664 and Vegriv#8646 for testing and help! Thanks to matthew9324#3567 for C++ help and RoN Dev Zack Bower#0466 for FMOD integration.Guide written by The Real Sourc3#7480.If you need help don’t hesitate to visit the RoN Custom Maps Discord and tag me :)I heavily advise to watch the videos related to the newest Covered Bones template on Nexus.Folder StructureFolder structure in UE4 4.27.2 needs to be as shown under to work. Content is the base folder your UE4 projects starts from.YourProjectName is only a placeholder for what you name your project when you make it in the New Project menu in Epic’s UE4 Launcher.The project name for the Meth house map for example is listed as RoN_Meth.To make a map you should start by downloading the newly updated Covered Bones Mapping template from NexusIt includes all the C++ files and Folder Structs like listed below and should provide you with a strong basis to start map modding.The Folder struct below is only the nessescary files required for the map to work (using all features) but the Covered Bones includes more files for conveniency.To distinguish the old Bare Bones from the new updated template, it’s now called Covered Bones.Content BlueprintSpawners BP_Door.uasset bp_door_reap.uasset CustomGameModeOverride.uasset BP_GameModeOverride.uasset BombSpawner.uasset BP_SpawnEvidence.uasset BP_SpawnActor.uasset BP_SpawnSelectedActor.uasset Blueprints DataTables DoorDataTable.uasset DoorType.uasset TrapDataTable.uasset AI_DataTable.uasset AI_DataTable_V3.uasset AI AI_DataTable_Club.uasset AI_DataTable_DataCenter.uasset AI_DataTable_Dealer.uasset AI_DataTable_Farm.uasset AI_DataTable_Gas.uasset AI_DataTable_Hospital.uasset AI_DataTable_Hotel.uasset AI_DataTable_Importer.uasset AI_DataTable_Meth.uasset AI_DataTable_Penthouse.uasset AI_DataTable_Port.uasset AI_DataTable_Ridgeline.uasset AI_DataTable_Valley.uasset Environment BP_Door_New.uasset IncapacitatedHuman.uasset Gameplay COOP BP_BombActor.uasset COOPModes GM_COOP_ActiveShooter GM_COOP_BarricadedSuspects GM_COOP_BombThreat GM_COOP_HostageRescue GM_COOP_Raid Games GM_COOP.uasset Logic MethLogic BP_Evidence_Meth_Contraband.uasset BP_Evidence_Meth_Contraband_2.uasset PortLogic BP_Evidence_Port_Dossier.uasset RidgelineLogic BP_Evidence_Ridgeline_Ricin.uasset ValleyLogic BP_Evidence_Valley_HardDrive.uasset BP_Evidence_Valley_HardDrive_02.uasset BP_Evidence_Valley_Laptop.uasset Sound Unused ModMusic_BP.uasset ModSound_BP.uasset E_WorldGenType.uasset FMOD // Sound banks and events located here Mods YourProjectName (CoveredBones) Levels // To make your level appear mod main menu place it here: YourMapName.umap YourMapName_BuildData.uasset MoreDoor.umap MoreDoor_BuildData.uasset // Custom models, materials and textures are placed here in sorted folders. ReadyOrNot Data // Misc useful data items are located here Project SettingsProject settings are important when making maps. They tell the engine how to interact with the assets and how they are cooked. When making maps you will need to change some of these to fit what content you want to include in your map. Some of the stuff are not optional. They will break certain elements of your game if they’re cooked. Don’t worry though - it’s nothing permanent.Go to the top to Settings drop down button and pick Project Settings (2nd from the top).Navigate to Packaging and scroll down to Ini Section Blacklist - there will be a tiny bar with an arrow on it to expand the menu further. Click on it and scroll down to Directories To Never Cook and add 2 array elements. Edit them with the 3 dots to this:The Folders in the Bare Bones Template that need this treatment are:(!! Ignore the /Game/Materials and /Game/ReadyOrNot/Assets/Shared if they’re not there !!)For custom materials to work we need to edit some Packaging settings that can be found in Project Settings.Look for the tick box called Share Material Shader Code and make sure it is NOT ticked. It should be ticked off in the BB template by default.You’re then free to use all kinds of materials with both translucency and emissive properties without the need of instancing game master materials, making Quixel and Megascans importing a lot more user friendly.GameModesBlueprints must be constructed manually as no blueprints can be imported from the base game.With the Bare Bones project the gamemode blueprint will be called GM_COOP.If you don’t have one, create an empty GameMode from the GameMode base class and rename it, then place it in the corresponding folder structure listed above.GameMode Override:At the top of your editor screen you will find the Blueprints tab, where you can edit Asset Blueprints and World Blueprints. In order for your game to work you must override the default gamemode and pick World Override: and pick the GM_COOP gamemode blueprint class.I have added a new way to set the gamemode as by default the game comes with Barricaded Suspects and Raid as the only available game modes. This tool is found in BlueprintSpawners and is called GameModeOverride. It does what it says - override the gamemode - and thus that gamemode will be the only gamemode for the level, despite what it says on the map in the lobby. This asset is dragged out somewhere in your level (doesn’t matter where) and you select your intended game mode and provide the literal map name as it appears top left on the tab in the editor. If you want the game to be Bomb Threat you should also add up to 2 BombSpawner.uassets in your level that spawns vanilla game defusable bombs in the level.World Geometry:If you make a new level instead of using the template’s included test map, just note that the standard level of UE4 includes a floor which is a static mesh. This will usually not show up in-game and you’ll fall through the world upon launch.If you want static / physics meshes in your world you must either reference base game meshes under the ReadyOrNot folder or provide your own in the correct folders.For prototyping or if you don’t have access to a lot of high poly assets it can be desirable to use BSP brushes. These are usually just convex hull geometry that you can piece together. You can actually make most of your map with this, then add models to enhance the level afterwards. I included some basic materials too to get you going.To make a walkable floor you have to use the Place Actor menu’s Geometry tab and choose the Box primitive.Use the right side menu to adjust the size of the floor or use the Brush Editing Mode (Shift + 4) to adjust the shape and size of your primitive.You only really need a floor, but it can be favorable to include walls and ceilings to get a sense of scale as well as for AI generation.A trick would be to use the included SM_Farm_Door_A door model to align doorways and ceilings for the scale.LightingInclude at least one light if not using the “sun” light standard to the scene. This helps bake the correct lightdata on your geometry. Without any light you can sometimes recieve weird shadow artifacts or weird colors. This also helps those weird people who don’t put any attachments on their guns.I added the GoodSky asset pack from UE4 Marketplace into the template, because it’s really handy to configure day/night using it; even adding a thunderstorm in a few clicks.In addition to that you’d need to place a Directional Light into the level for the actual light.You can add multiple lights in your scene, but adjust the Attenuation Radius so that too many don’t overlap. UE4 is very limited when it comes to light overlapping, so you’ll need to tinker with this to get a good feel for it.If a red X is displayed on the light it will not render in the final product or be glitched.World Generation and AI NavigationWorld Gen:This is probably one of the more complex steps as it involves messing a bit with the World Blueprint so I made the title a bit bigger.In the new update the devs added world generation to custom maps so I will need to test a bit with that, but the previous way to go was to include RosterScenarioSpawner and WorldDataGenerator C++ Actors in the map so that they would generate these points. The Bare Bones template should already have this included but if it doesn’t or you create a new map from scratch you’ll need to add these manually by going to the bottom of the Content section and look for C++ Classes and dragging these out into your world.(Still need to add more info to this chapter - unfinished)Navigation:To make the AI know which part of your map is intended to walk on you’ll need to set up a volume that touches the floor that you want them to be able to navigate.This volume is called Nav Mesh Bounds Volume and can be found in the Volumes Tab in Place Actors. This volume should ideally intersect the walkable floor. Navigation area only generates inside of this volume so make sure that all your walkable floor is encompassed in this volume. It also doesn’t matter if the volume is sticking out underneath of the floor or is not the same size, the engine pulls navigation info from the Project Settings when it generates paths.After building the paths from the Build button you can display the walkable paths generated by pressing P.Adding Props / Models Locate the prop[s] that you want to use on your map. These will have the .uasset format as any other file. However, make sure the .uasset you are looking at is the static mesh, not texture file or anything else. You can verify this by opening that file in UModel. If the class says StaticMesh, you’re good to go.An easier route is to download the Mapping Reference Project made by RareKiwi and delete the assets from folder after cooking. Make the folder struct the same as the asset file path. Go to Place Actors &gt; Basic and drag the Cube to the Content Browser and click Copy Here. You can use this in your level wherever and upon loading into your map, this will turn into the appropriate asset. Only go beyond this step if you want to see the asset within the editor. Export the static mesh you want to use as a .psk using UModel. Using Blender and the .psk plugin for it, export the model as a .fbx. Import the .fbx into UE4 with the same name as the asset you are attempting to use within your map. Make sure the file is in the same directory as the sibling file in the game files.Adding DoorsTo get a door into the game you place all the provided files into the folder structure as shown above.Set up the BP_Door in the Blueprint Editor under BeginPlay like this:Blueprint Pastebin - BP_DoorThis will make a BP_Door_New entity be spawned at the location of this blueprint with all the provided variables from BP_Door.The BP_Door gets these variables from the DoorDataTable and the TrapDataTable - so if you can’t see these variables be sure to look on the right side and see that the Data Table is linked to the blueprint.The red arrow in the BP shows which way the trap will be placed and marks the back side of the door. Place an instance of BP_Door onto the map and change the desired values: Door Type: Use the DoorDataTable in the data table block and select the wanted door. Trap Type: Doors can have pre-attached traps. The types to choose from comes from the TrapDataTable and are Explosive, Flashbang, Alarm, NoTrap. Note that the NoTrap doesn’t disable the trap, it makes it random. Lockchance, can be 0.0 - 1.0 We’re unsure if this value does anything, but we would expect higher probability of locking the closer to 1. Lockable: If the door can be locked or not. If you want a door to always be open you tick this box to False. NoSpawnTrap: If ticked it will disable any traps from pre-attaching to this door. Leave unticked if you want the TrapType to propigate. UseBrokenDoorMesh: We’re unsure if this does anything other than spawning the ruined door from the training course in the lobby map. MinOpenClose / MaxOpenClose: Probably has something to do with the max angle the door can swing, but I have yet to notice any difference after changing these values.. Evidence ActorsIf you’ve played the game for more than 5 minutes you may have come across the different kinds of evidence that you can pick up in the world. These are the smaller kinds of objects that are linked to drugs, videos/photos, lists and more. In the new Covered Bones there is a provided blueprint to spawn these kinds of actors.Simply drag out one BP_SpawnEvidence.uasset per evidence actor into your desired location in your map, and select your preferred evidence (oh and due to my negligence the white and red meth bags were swapped on the list - whoops)The evidence types should have intuitive icons when you select between them :)MultiplayerMultiplayer works by default if you place enough spawn points in your map. This spawn point is called PlayerStart and you’ll need at least 5 for normal multiplayer function.Building and CookingAt this point the map should be ready for rendering and packaging (you don’t really need doors but maps are very lacklusting without).You firstly need to Build the data into the map by pressing the Build button at the top of the screen. It will take some time to finish.Once it is done you can cook the files.You cook the map so that the game can recognise the level as a playable map.Before cooking be sure to select the Content folder as the cooker will cook everything down from that folder.Go to top left at File and choose under Project -&gt; Cook Content For Windows.The cooked project will be located in your projects folder under &lt;yourprojectname&gt;/Saved/Cooked/WindowsNoEditor/To make the map appear in game you must pak the project folder with the pak bat file mentioned in The Basics.Only pak the Project folder with the Content folder inside, not the MetaData or AssetRegistry and it should work from the mat :)Name the pak to pakchunk99-Mods-&lt;yourprojectname&gt;_P - Replace the brackets and what’s in them with your project’s name.For now, delete the FMOD folder from your cooked folder unless you are testing FMOD stuff. And if you do, delete everything except your custom banks and events.If you don’t delete game-default assets everything from the game will be overwritten with empty data since the banks in this folder are only for reference.That will result in your game having no sound other than VO.MaterialsTo “paint” your walls/models/etc. you’ll need it to display a material. A material in UE4 is a set of textures layered on top of eachother to display color, depth and light interaction. Inside the asset it uses a block with nodes attached to it to get the information. This information is set up in a visual Blueprint form to make the process easier.You drag connections between the material attributes nodes to link them together. I have added a TV simulated material woth a bunch of cool layering to convey a realistic look that you’re free to use, mix n’ match.To paint an object you can drag the material from the content browser out onto the surface directly or use the side menus and select multiple surfaces to paint at the same time.Chapter not finished.Post Processing and visual techPost processing in UE4 is the method to give your maps the extra umph and sell the immersion visually. It’s how you get areas to feel different and lift the ambience for the player. The goal of post processing is to enhance what’s already there to reflect your intended visuals. I might be a little cryptic here, but that’s for the better.Let’s examplify this: If your lore is set in the Middle East it would not make sense that the light has the same color as it does further north like UK, it might be a little orange-shifted to give the “desert-feel”. Maybe you want some fog and haze to emulate distant sandstorms.Or enhanced clarity. Maybe the lighting is dialed in right for realism, but has the wrong color, saturation and contrast. Take a look at this basic example:I can’t tell you what exactly you should do for your map to look real. It is very contextual, so it varies from map to map. But I can tell you how certain elements work to achieve some effects. The first element that you should have to enable custom post processing is most obviously a Post Process Volume actor. It allows you to change a lot of values regarding filmic and rendering. It contains a long set of variables that you can change to get the desired effects:For the most part we will use what’s in the Color Grading section, because it has the most effect. Scrolling down to Color Grading Changing Temperature, Tint and Saturation, Contrast, Gain, Gamma will be our main focus point. Most scene “moods” can be achieved here..Note that the effects in Global has a drop down to change overall values more specifically, and for the most part we should only care about the slider under the color-cirle to change the value of that parameter. If you need to do some color balancing in that area you’d mostly want to do it in Saturation and Gain.FMOD Sound Integation(WIP)For this you’ll need FMOD for UE4 If you don’t know how to install FMOD visit the RoN Custom Maps Discord and check out the Guides Links or watch THIS VIDEOWhen you have installed FMOD correctly, you can make sound come into your map by placing a FMOD Audio Player from the Place Actors menu. You’ll also need to reference a sound that’s already in game* for it to play. If you want this sound to always play regardless of your location (like theme music) you don’t really need to do anything but to check that the “Start Activated” checkbox is ticked.To get the sounds from Ready Or Not into unreal editor for referencing and preview (yes you can preview the audio!) you need to copy over some banks from the game’s directory into your project. Navigate to your Steam/Steamapps/Common/Ready Or Not/ReadyOrNot/Content/FMOD/Desktop folder and select all the bank files in the folder and copy them.Then go to your project and go to the Content/FMOD/Desktop folder and paste in the banks…Navigate to the Events folder to verify that it works, you should be able to double-click an asset and preview the sound in the editor.If you want to make a dynamically changing ambience based on the area you enter you will need to use a simple blueprint actor for this. I covered that briefly in the video above, but the idea is to blend or stop all other ambiences when you step into a new one. Using a box collision that only overlaps the Pawn channel will make the triggering happen. To fade in a sound you can use a timeline to manipulate the volume but ideally you want to fade in based on the distance to the other ambience actor but for normal cues 2 seconds of fade time will do.For sound transitioning there is a transitioning volume located in Mods/Audio/Atmos that you can use to simplify this process - with that actor you can select what sound you transition to and from and you can walk back and forth through it. Place down the default ambience actor too for the sound to be played when u spawn into the level.### Custom Sounds! So there is a way to get custom sounds and music playing in game right now and will be standard with the next release version of the Covered Bones Template. For now I will link the assets you need to make this work. You still need the FMOD plugin for this. Thanks to RareKiwi#5360 and crazy4videogames#3909 for figuring out the last steps of this puzzle!#### Audio Files Setup: Make a new folder in your main (Content) folder and name it something like MySpicyAudio or something you can remember. Go to the Explorer window in Windows where you can see the files and browse to your covered bones project and go into the MySpicyAudio folder. Drag out your preferred sound (.wav, .mp3 or .ogg formats) and put it into the folder like shown below:The default wave sound file that will be included in the upcoming version of bare bones will be a 1 second long clip of a fire alarm, just to show it working:Unreal Editor will prompt you about importing the asset, so just click Import and it should appear in the Content menu. If you have set the sound up correctly you should see that the source file says FireAlarm.wav and that the path says /Game/MySpicyAudio and not the path to the location you imported it from or else it won’t play.Sound Blueprints Setup:Once you have obtained a file to play you will need to create a folder path (if it doesn’t already exist!) that will look like: Mods/Blueprints/Sound/Unused!Note that it should be in the Mods folder. Other locations might not work or cause the blueprints to misbehave…Game music needs to be fixed before I upload the ModMusic_BP, but you can download the ModSound_BP and the FireAlarm.wav here (extract in Content folder): ZIP file archiveUsing The Blueprint:Drag the blueprint out in the world where you want it to play from - a fire alarm usually plays best from above head height.In the details panel on the side you can edit some of the parameters; if it should loop, if it’s 3D (not playing everywhere) and more settings related to the max audible distance. Amongst these settings you need to set the Sound To Use as a Sound Name - The way to set up the sound name is to reference its location, name and file extension. So for the included fire alarm file you should change the name to MySpicyAudio/FireAlarm.wav - any other file you add to your custom audio folder would need to be set up the same way.If it works in the editor it will most likely work in game too. Re-cook the build and verify that the sound files and bp’s were copied over. Look in the discord and ask if you’re getting stuck :)" }, { "title": "UAsset Automation", "url": "/posts/uassetautomation/", "categories": "UAsset Modding", "tags": "uasset, python, automation", "date": "2022-07-19 00:00:00 +0000", "snippet": "UAsset AutomationJSON Parsing via PythonOnce you have a firm understanding of manually editing UAssets, you can semi-easily automate tasks. To start, you’ll need some Python, or other programming knowledge. I’ll be using Python for this tutorial because of the simple to use json library that comes with Python 3+. I highly recommend doing this if you need to change a lot of data every time the game updates. If you would like specific help with this, ask QuantumNuke75#3593 on Discord. Note that the code down below may not be pretty, as it’s gone under numerous changes as the game updates.Ammo ModYour first line should be the import statement.import jsonNext, you’ll want to open the file. To do this, replace FILE_NAME with the location of your JSON file that you extracted with UAssetGUI.file = open('FILE_NAME')At the bottom of the file, you’ll want to export your JSON file, which you can then load back up in UAssetGUI and save it as a .uasset.json.dump(data, open(\"export.json\", \"w\"))But, you’ll then want to load this file as a JSON file. data will become a Python dictionary.data = json.load(file)Within this data variable will be layers of dictionaries, lists, and key-value pairs witin the dictionaries. From this, you’ll be able to easily automate adding, data, changing values, or anything. Now we’ll need to loop through every item in the export datatable, which is where the majority of the data we need is held.for item in data[\"Exports\"][0][\"Table\"][\"Data\"]:Now we need to loop through every value for every item, since the ammo count for a gun is just one of many values an item has.\tfor item_data in item[\"Value\"]:Now, we check for specific tags, in our case, these tags are MagazineCountDefault(0) and MagazineCountMax(0). Once we’ve found these tags, we can set the values of these to whatever we want. In this specific case, the code is getting the value, and adding a number of mags to it.\t\tif item_data[\"Name\"] == \"MagazineCountDefault(0)\": amount = int(item_data[\"Value\"]) if 3 &lt; amount &lt; 30: item_data[\"Value\"] = num_mags continue if item_data[\"Name\"] == \"MagazineCountMax(0)\": amount = int(item_data[\"Value\"]) if 3 &lt; amount &lt; 30: item_data[\"Value\"] = num_mags continueThe full code is below:import jsonnum_mags = 15file = open('ItemDataTable.json')data = json.load(file)# For every item in the export table.for item in data[\"Exports\"][0][\"Table\"][\"Data\"]: # For every piece of the item data. for item_data in item[\"Value\"]: # If the item's name is MagazineCount if item_data[\"Name\"] == \"MagazineCountDefault(0)\": amount = int(item_data[\"Value\"]) if 3 &lt; amount &lt; 30: item_data[\"Value\"] = num_mags continue if item_data[\"Name\"] == \"MagazineCountMax(0)\": amount = int(item_data[\"Value\"]) if 3 &lt; amount &lt; 30: item_data[\"Value\"] = num_mags continuejson.dump(data, open(f\"ammo_export_{num_mags}.json\", \"w\")) More Ammo is an outdated mod, and this code will no longer effect anything in the game.Everything UnlockedI’ll be skipping basic portions of parsing, and will explain more complicated changes instead. Adding data with this method is significantly harder than just changing values. There are two different files we need to edit for Everything Unlocked, ItemDataTable.uasset and ItemData.uasset.ItemDataIn order to add entries to the ItemData we’ll need know what data to add. Every weapon has the following distinct attributes: name, gun blueprint location, default class name, class name, and the item type. In order to make this easier, a struct class was created.class ItemDataStruct: def __init__(self, name, location, default, clas, type): self.name = name self.location = location self.default = default self.clas = clas self.type = typeThis class holds all the information needed to add a specific gun. Now, we need to add a bunch of values. Since we are adding both primary weapons, secondary weapons, tacticals, and helmets accessory options, it’s important to distinguish them all. We’ll store each category of items in their separate arrays.primary_weapons = []primary_weapons.append(ItemDataStruct(\"P90\", \"/Game/Blueprints/Items/WeaponsRevised/Primary_P90(0)\", \"Default__Primary_P90_C(0)\", \"Primary_P90_C(0)\", \"SMG\"))primary_weapons.append(ItemDataStruct(\"Primary_M16A4\", \"/Game/Blueprints/Items/WeaponsRevised/Primary_M16A4(0)\", \"Default__Primary_M16A4_C(0)\", \"Primary_M16A4_C(0)\", \"AR\"))primary_weapons.append(ItemDataStruct(\"Primary_Saiga12\", \"/Game/Blueprints/Items/WeaponsRevised/Primary_Saiga12(0)\", \"Default__Primary_Saiga12_C(0)\", \"Primary_Saiga12_C(0)\", \"Shotgun\"))secondary_weapons = []secondary_weapons.append(ItemDataStruct(\"P250\", \"/Game/Blueprints/Items/WeaponsRevised/Secondary_P250(0)\", \"Default__Secondary_P250_C(0)\", \"Secondary_P250_C(0)\", \"Pistol\"))tacticals = []tacticals.append(ItemDataStruct(\"9Banger\", \"/Game/Blueprints/Items/WeaponsRevised/Grenade_9Banger_V2(0)\", \"Default__Grenade_9Banger_V2_C(0)\", \"Grenade_9Banger_V2_C(0)\", \"Grenade\"))helmets = []helmets.append(ItemDataStruct(\"Helmet_UpArmor\", \"/Game/Blueprints/Items/ArmorRevised/Helmet_UpArmor(0)\", \"Default__Helmet_UpArmor_C(0)\", \"Helmet_UpArmor_C(0)\", \"Helmet\"))Now we can begin parsing through the data. Similarly to More Ammo, we’ll be accessing the data in the same way but instead we’ll checking if the item is a PrimaryWeapons(0), SecondaryWeapon(0), TacticalItems(0), or HeadSelection(0).if items[\"Name\"] == \"PrimaryWeapons(0)\":elif items[\"Name\"] == \"SecondaryWeapons(0)\":elif items[\"Name\"] == \"TacticalItems(0)\":elif items[\"Name\"] == \"HeadSelection(0)\":I’ll only be covering how to automate the primary weapons to prevent this guide from getting longer. Each category is very similar, with some slight changes. Once we’ve establish that we’re in the PrimaryWeapons(0) category, we can begin making changes. Now we can parse through all the weapon structs we created for primary weapons.for weapon_struct in primary_weapons:The second thing we’ll need to to is add the imports. Without imports, the game will have no idea what you’ve added to the table. However, we need to get the current import number.last_import_index = len(data[\"Imports\"])Once we’ve done that, we can add all the imports we need.dic_1 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': '/Script/CoreUObject(0)', 'ClassName': 'Package(0)', 'ObjectName': weapon_struct.location, 'OuterIndex': 0}last_import_index += 1dic_2 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': '/Script/Engine(0)', 'ClassName': 'BlueprintGeneratedClass(0)', 'ObjectName': weapon_struct.clas, 'OuterIndex': -last_import_index}last_import_index += 1dic_3 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': weapon_struct.location, 'ClassName': weapon_struct.clas, 'ObjectName': weapon_struct.default, 'OuterIndex': -(last_import_index-1)}last_import_index += 1data[\"Imports\"].append(dic_1)data[\"Imports\"].append(dic_2)data[\"Imports\"].append(dic_3)Now we can add the actual weapons to ItemData. We first need to distinguish between what type of weapon we have, this changes what Type, CultureInvariantString, and ItemClass we need. We’ll also be copying a related gun entry so we don’t have to create everything from scratch.last_copy = Nonetype = NoneCultureInvariantString = Noneitem_class = Noneif weapon_struct.type == \"SMG\":\ttype = \"EWeaponType::WT_SubmachineGun(0)\"\tCultureInvariantString = \"SMG\"\titem_class = \"EItemClass::IC_SMG(0)\"\tlast_copy = copy.deepcopy(items[\"Value\"][0])elif weapon_struct.type == \"AR\":\ttype = \"EWeaponType::WT_Rifles(0)\"\tCultureInvariantString = \"Rifle\"\titem_class = \"EItemClass::IC_AssaultRifle(0)\"\tlast_copy = copy.deepcopy(items[\"Value\"][12])elif weapon_struct.type == \"Shotgun\":\ttype = \"EWeaponType::WT_Shotgun(0)\"\tCultureInvariantString = \"Shotgun\"\titem_class = \"EItemClass::IC_Shotgun(0)\"\tlast_copy = copy.deepcopy(items[\"Value\"][7])Now, we set the related data in the copy.# Set gun typelast_copy[\"Value\"][0][\"Value\"][0][\"Value\"] = type# Set Categorylast_copy[\"Value\"][4][\"Value\"] = item_class#Set namelast_copy[\"Value\"][1]['Value'] = weapon_struct.name# Set culture invariant stringlast_copy[\"Value\"][3][\"CultureInvariantString\"] = CultureInvariantStringThen, we set the import reference to the imports we just created, and append the new weapon to the table.# Set import reflast_copy[\"Value\"][5][\"Value\"] = -(last_import_index-1)# Append item to tableitems[\"Value\"].append(last_copy)The final code:import copy, jsonfrom ItemDataStruct import ItemDataStructf = open('json/ItemData.json')data = json.load(f)primary_weapons = []primary_weapons.append(ItemDataStruct(\"P90\", \"/Game/Blueprints/Items/WeaponsRevised/Primary_P90(0)\", \"Default__Primary_P90_C(0)\", \"Primary_P90_C(0)\", \"SMG\"))primary_weapons.append(ItemDataStruct(\"Primary_M16A4\", \"/Game/Blueprints/Items/WeaponsRevised/Primary_M16A4(0)\", \"Default__Primary_M16A4_C(0)\", \"Primary_M16A4_C(0)\", \"AR\"))primary_weapons.append(ItemDataStruct(\"Primary_Saiga12\", \"/Game/Blueprints/Items/WeaponsRevised/Primary_Saiga12(0)\", \"Default__Primary_Saiga12_C(0)\", \"Primary_Saiga12_C(0)\", \"Shotgun\"))secondary_weapons = []secondary_weapons.append(ItemDataStruct(\"P250\", \"/Game/Blueprints/Items/WeaponsRevised/Secondary_P250(0)\", \"Default__Secondary_P250_C(0)\", \"Secondary_P250_C(0)\", \"Pistol\"))tacticals = []tacticals.append(ItemDataStruct(\"9Banger\", \"/Game/Blueprints/Items/WeaponsRevised/Grenade_9Banger_V2(0)\", \"Default__Grenade_9Banger_V2_C(0)\", \"Grenade_9Banger_V2_C(0)\", \"Grenade\"))helmets = []helmets.append(ItemDataStruct(\"Helmet_UpArmor\", \"/Game/Blueprints/Items/ArmorRevised/Helmet_UpArmor(0)\", \"Default__Helmet_UpArmor_C(0)\", \"Helmet_UpArmor_C(0)\", \"Helmet\"))last_import_index = len(data[\"Imports\"])# For every item in the table.for items in data[\"Exports\"][0][\"Data\"]: if items[\"Name\"] == \"PrimaryWeapons(0)\": for weapon_struct in primary_weapons: # START IMPORTS dic_1 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': '/Script/CoreUObject(0)', 'ClassName': 'Package(0)', 'ObjectName': weapon_struct.location, 'OuterIndex': 0} last_import_index += 1 dic_2 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': '/Script/Engine(0)', 'ClassName': 'BlueprintGeneratedClass(0)', 'ObjectName': weapon_struct.clas, 'OuterIndex': -last_import_index} last_import_index += 1 dic_3 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': weapon_struct.location, 'ClassName': weapon_struct.clas, 'ObjectName': weapon_struct.default, 'OuterIndex': -(last_import_index-1)} last_import_index += 1 data[\"Imports\"].append(dic_1) data[\"Imports\"].append(dic_2) data[\"Imports\"].append(dic_3) # END IMPORTS last_copy = None type = None CultureInvariantString = None item_class = None if weapon_struct.type == \"SMG\": type = \"EWeaponType::WT_SubmachineGun(0)\" CultureInvariantString = \"SMG\" item_class = \"EItemClass::IC_SMG(0)\" last_copy = copy.deepcopy(items[\"Value\"][0]) elif weapon_struct.type == \"AR\": type = \"EWeaponType::WT_Rifles(0)\" CultureInvariantString = \"Rifle\" item_class = \"EItemClass::IC_AssaultRifle(0)\" last_copy = copy.deepcopy(items[\"Value\"][12]) elif weapon_struct.type == \"Shotgun\": type = \"EWeaponType::WT_Shotgun(0)\" CultureInvariantString = \"Shotgun\" item_class = \"EItemClass::IC_Shotgun(0)\" last_copy = copy.deepcopy(items[\"Value\"][7]) # Set gun type last_copy[\"Value\"][0][\"Value\"][0][\"Value\"] = type # Set Category last_copy[\"Value\"][4][\"Value\"] = item_class #Set name last_copy[\"Value\"][1]['Value'] = weapon_struct.name # Set culture invariant string last_copy[\"Value\"][3][\"CultureInvariantString\"] = CultureInvariantString # Set import ref last_copy[\"Value\"][5][\"Value\"] = -(last_import_index-1) items[\"Value\"].append(last_copy) elif items[\"Name\"] == \"SecondaryWeapons(0)\": for weapon_struct in secondary_weapons: # START IMPORTS dic_1 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': '/Script/CoreUObject(0)', 'ClassName': 'Package(0)', 'ObjectName': weapon_struct.location, 'OuterIndex': 0} last_import_index += 1 dic_2 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': '/Script/Engine(0)', 'ClassName': 'BlueprintGeneratedClass(0)', 'ObjectName': weapon_struct.clas, 'OuterIndex': -last_import_index} last_import_index += 1 dic_3 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': weapon_struct.location, 'ClassName': weapon_struct.clas, 'ObjectName': weapon_struct.default, 'OuterIndex': -(last_import_index - 1)} last_import_index += 1 data[\"Imports\"].append(dic_1) data[\"Imports\"].append(dic_2) data[\"Imports\"].append(dic_3) # END IMPORTS last_copy = copy.deepcopy(items[\"Value\"][0]) type = None CultureInvariantString = None item_class = None if weapon_struct.type == \"Pistol\": type = \"EWeaponType::WT_PistolsLethal(0)\" CultureInvariantString = \"Semi-Automatic\" item_class = \"EItemClass::IC_Pistol(0)\" # Set Weapon Type last_copy[\"Value\"][0][\"Value\"][0][\"Value\"] = type # Set ItemClass last_copy[\"Value\"][4][\"Value\"] = item_class # Set name last_copy[\"Value\"][1]['Value'] = weapon_struct.name # Set culture invariant string last_copy[\"Value\"][3][\"CultureInvariantString\"] = CultureInvariantString # Set import ref last_copy[\"Value\"][5][\"Value\"] = -(last_import_index - 1) items[\"Value\"].append(last_copy) elif items[\"Name\"] == \"TacticalItems(0)\": for item_struct in tacticals: # START IMPORTS dic_1 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': '/Script/CoreUObject(0)', 'ClassName': 'Package(0)', 'ObjectName': item_struct.location, 'OuterIndex': 0} last_import_index += 1 dic_2 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': '/Script/Engine(0)', 'ClassName': 'BlueprintGeneratedClass(0)', 'ObjectName': item_struct.clas, 'OuterIndex': -last_import_index} last_import_index += 1 dic_3 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': item_struct.location, 'ClassName': item_struct.clas, 'ObjectName': item_struct.default, 'OuterIndex': -(last_import_index - 1)} last_import_index += 1 data[\"Imports\"].append(dic_1) data[\"Imports\"].append(dic_2) data[\"Imports\"].append(dic_3) # END IMPORTS last_copy = copy.deepcopy(items[\"Value\"][0]) item_class = \"EItemClass::IC_Grenade(0)\" # Set Name last_copy[\"Value\"][0][\"Value\"] = item_struct.name #Set ItemClass last_copy[\"Value\"][10][\"Value\"] = item_class # Set import ref last_copy[\"Value\"][13][\"Value\"] = -(last_import_index - 1) print(len(last_copy[\"Value\"])) items[\"Value\"].append(last_copy) elif items[\"Name\"] == \"HeadSelection(0)\": for item_struct in helmets: # START IMPORTS dic_1 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': '/Script/CoreUObject(0)', 'ClassName': 'Package(0)', 'ObjectName': item_struct.location, 'OuterIndex': 0} last_import_index += 1 dic_2 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': '/Script/Engine(0)', 'ClassName': 'BlueprintGeneratedClass(0)', 'ObjectName': item_struct.clas, 'OuterIndex': -last_import_index} last_import_index += 1 dic_3 = {'$type': 'UAssetAPI.Import, UAssetAPI', 'ClassPackage': item_struct.location, 'ClassName': item_struct.clas, 'ObjectName': item_struct.default, 'OuterIndex': -(last_import_index - 1)} last_import_index += 1 data[\"Imports\"].append(dic_1) data[\"Imports\"].append(dic_2) data[\"Imports\"].append(dic_3) # END IMPORTS item_class = \"EItemClass::IC_Headgear(0)\" last_copy = copy.deepcopy(items[\"Value\"][0]) # Set Name last_copy[\"Value\"][0][\"Value\"] = item_struct.name # Set Item Class last_copy[\"Value\"][3][\"Value\"] = item_class # Set import ref last_copy[\"Value\"][4][\"Value\"] = -(last_import_index - 1) items[\"Value\"].append(last_copy)json.dump(data, open(f\"output/everything_unlocked_itemdata.json\", \"w\"))ItemDataTableThis is an easier table to edit, but required more data. To start, you’ll need a dictionary of attachments mapped to their respective socket for each category of attachment: sight, muzzle, underbarrel. You’ll also need a dictionary of item names, mapped to a list of sockets they have.Here’s an example of the underbarrel attachment list, which we’ll be using as an example:all_under = {-38:\"combat_grip\",-39:\"combat_grip\",-65:\"mp5_foregrip\",-66:\"mp5_foregrip\",-70:\"mp5_foregrip\",-81:\"light_socket\",-82:\"laser_socket\",-83:\"laser_socket\",-86:\"foregrip_socket\",-87:\"afg_mlok_grip\",-90:\"foregrip_socket\",-91:\"pointer_socket\",-92:\"pointer_socket\",-102:\"foregrip_VFG_socket\",-103:\"foregrip_socket\",-104:\"vfg_mlok_grip\",-136:\"foregrip_socket\"}And here’s an example of the weapon names mapped to attachments (Note: This list may be outdated.):weapon_to_attachments = {'M1911A1':{'RMRPistol_Socket', 'comp_socket', 'supressor_socket', 'light_socket', 'laser_socket', 'SROPistol_Socket', 'flash_socket', 'Reflex_Socket'},'G19':{'RMRPistol_Socket', 'comp_socket', 'supressor_socket', 'light_socket', 'laser_socket', 'SROPistol_Socket', 'flash_socket', 'Reflex_Socket'}}Now we parse through the ItemDataTable and look for the corresponding attachment AvailableUnderbarrelAttachments(0). Once we do, we check the weapon_to_attachments dictionary, and add all the attachments to the weapon.for item in data[\"Exports\"][0][\"Table\"][\"Data\"]: for item_data in item[\"Value\"]:\t if item_data[\"Name\"] == \"AvailableUnderbarrelAttachments(0)\": name = item[\"Value\"][0][\"CultureInvariantString\"] try: comp_attachments = weapon_to_attachments[name] except: continue attachments_to_add = [] for under in all_under: if all_under[under] in comp_attachments: attachments_to_add.append(under) for attachment in attachments_to_add: copied = copy.deepcopy(attachment_dic_format) copied[\"Value\"] = attachment if copied not in item_data[\"Value\"]: item_data[\"Value\"].append(copied) continueFull code below. As a bonus, weapon inertia was also changed for items, making unlocked weapons more usable.import copy, jsonfile = open('json/ItemDataTable.json')data = json.load(file)all_scopes = {-42:\"SRO_FBI_Socket\",-43:\"RMR_FBI_Socket\",-44:\"RMRPistol_Socket\",-45:\"RMR_Socket\",-46:\"RMRPistol_Socket\",-47:\"SRO_Socket\",-48:\"SROPistol_Socket\",-49:\"SROPistol_Socket\",-50:\"SRORaised_socket\",-51:\"Delta_Socket\",-52:\"ACOG_Socket\",-53:\"atac_Socket\",-54:\"HAMR_Socket\",-55:\"Harris_Socket\",-56:\"M5B_Socket\",-57:\"sdr_Socket\",-105:\"Scope_Socket\",-106:\"Reflex_Socket\",-107:\"EXPS3_socket\",-108:\"Holosight_XPS3\",-109:\"Rail_Socket\",-110:\"Rail_Socket\",-111:\"Rail_Socket\",-112:\"Reflex_Socket\",-113:\"Reflex_Socket\",-114:\"Reflex_Socket\",-115:\"Reflex_Socket\",-116:\"Reflex_Socket\",-117:\"Reflex_Socket\",-118:\"Reflex_Socket\",-119:\"MicroT2_Socket\",-120:\"MicroT2_FBI_Socket\",-121:\"MicroT2Raised_Socket\",-122:\"EXPS3_MP5_optic\",-123:\"SRO_MP5_optic\",-124:\"mp5_optic\",-125:\"MicroT2_mp5_optic\",-126:\"Reflex_Socket\",-127:\"Reflex_Socket\",-128:\"Reflex_Socket\",-129:\"SRSRaised_socket\"}all_muzzles = {-28:\"muzzle_socket\",-29:\"asr_socket\",-30:\"asr_socket\",-31:\"sfmb_socket\",-32:\"sfmb_socket\",-33:\"shotgunbrake_socket\",-40:\"brake_socket\",-60:\"socom338_socket\",-61:\"tag_mp9suppressor\",-62:\"PBS_socket\",-63:\"socom338_socket\",-64:\"socom338_socket\",-78:\"comp_socket\",-79:\"comp_socket\",-80:\"flash_socket\",-84:\"supressor_socket\",-85:\"supressor_socket\",-88:\"compensator_socket\",-97:\"Barrel_Socket\",-100:\"Barrel_Socket\",-101:\"supressor_socket\",-130:\"Choke_Socket\",-131:\"tube_socket\",-135:\"supressor_socket\"}all_under = {-38:\"combat_grip\",-39:\"combat_grip\",-65:\"mp5_foregrip\",-66:\"mp5_foregrip\",-70:\"mp5_foregrip\",-81:\"light_socket\",-82:\"laser_socket\",-83:\"laser_socket\",-86:\"foregrip_socket\",-87:\"afg_mlok_grip\",-90:\"foregrip_socket\",-91:\"pointer_socket\",-92:\"pointer_socket\",-102:\"foregrip_VFG_socket\",-103:\"foregrip_socket\",-104:\"vfg_mlok_grip\",-136:\"foregrip_socket\"}weapon_to_attachments = {'M1911A1':{'RMRPistol_Socket', 'comp_socket', 'supressor_socket', 'light_socket', 'laser_socket', 'SROPistol_Socket', 'flash_socket', 'Reflex_Socket'},'G19':{'RMRPistol_Socket', 'comp_socket', 'supressor_socket', 'light_socket', 'laser_socket', 'SROPistol_Socket', 'flash_socket', 'Reflex_Socket'},'G18 Auto':{'light_socket', 'laser_socket', 'comp_socket', 'RMRPistol_Socket', 'supressor_socket', 'flash_socket', 'Reflex_Socket', 'SROPistol_Socket'},'SKL_Pistol_M92FS':{'light_socket', 'brake_socket', 'comp_socket', 'supressor_socket'},'P250':{'comp_socket', 'supressor_socket', 'light_socket', 'laser_socket', 'brake_socket'},'P99':{'comp_socket', 'Delta_Socket', 'supressor_socket', 'laser_socket', 'light_socket', 'flash_socket', 'Reflex_Socket', 'Harris_Socket'},'.357 Magnum':{'muzzle_socket', 'pointer_socket', 'Reflex_Socket', 'supressor_socket'},'Taser':{'laser_socket'},'USP45':{'RMRPistol_Socket', 'comp_socket', 'supressor_socket', 'light_socket', 'laser_socket', 'SROPistol_Socket', 'brake_socket'},'P92X':{'RMRPistol_Socket', 'supressor_socket', 'light_socket', 'laser_socket', 'SROPistol_Socket', 'brake_socket'},'G36C':{'asr_socket', 'RMR_Socket', 'pointer_socket', 'HAMR_Socket', 'laser_socket', 'light_socket', 'combat_grip', 'socom338_socket', 'M5B_Socket', 'sfmb_socket', 'foregrip_socket', 'EXPS3_socket', 'SRO_Socket', 'Reflex_Socket'},'M14':{'Rail_Socket', 'foregrip_socket', 'laser_socket', 'supressor_socket'},'M24':{'ACOG_Socket', 'Scope_Socket', 'Reflex_Socket', 'supressor_socket'},'M4A1':{'asr_socket', 'pointer_socket', 'HAMR_Socket', 'ACOG_Socket', 'supressor_socket', 'MicroT2Raised_Socket', 'laser_socket', 'light_socket', 'combat_grip', 'compensator_socket', 'M5B_Socket', 'sfmb_socket', 'socom338_socket', 'foregrip_socket', 'Reflex_Socket'},'AK102':{'pointer_socket', 'HAMR_Socket', 'ACOG_Socket', 'supressor_socket', 'laser_socket', 'light_socket', 'foregrip_socket', 'Reflex_Socket', 'Harris_Socket'},'MK1 Carbine':{'asr_socket', 'pointer_socket', 'SRSRaised_socket', 'laser_socket', 'socom338_socket', 'combat_grip', 'sfmb_socket', 'foregrip_socket'},'ARN-18':{'asr_socket', 'laser_socket', 'socom338_socket', 'combat_grip', 'sfmb_socket', 'EXPS3_socket', 'vfg_mlok_grip', 'Reflex_Socket', 'afg_mlok_grip'},'SA-58':{'asr_socket', 'sdr_Socket', 'pointer_socket', 'MicroT2Raised_Socket', 'laser_socket', 'light_socket', 'combat_grip', 'socom338_socket', 'M5B_Socket', 'sfmb_socket', 'foregrip_socket', 'EXPS3_socket', 'SRO_Socket', 'atac_Socket', 'Reflex_Socket'},'GA416':{'asr_socket', 'sdr_Socket', 'pointer_socket', 'ACOG_Socket', 'SRSRaised_socket', 'laser_socket', 'socom338_socket', 'combat_grip', 'M5B_Socket', 'sfmb_socket', 'EXPS3_socket', 'vfg_mlok_grip', 'atac_Socket', 'Reflex_Socket', 'afg_mlok_grip'},'M16A4':{'HAMR_Socket', 'ACOG_Socket', 'Scope_Socket', 'supressor_socket', 'Reflex_Socket'},'SCAR-H':{'asr_socket', 'pointer_socket', 'SRSRaised_socket', 'socom338_socket', 'combat_grip', 'sfmb_socket', 'foregrip_socket', 'atac_Socket'},'SLR47':{'pointer_socket', 'laser_socket', 'combat_grip', 'PBS_socket', 'afg_mlok_grip'},'SR-16':{'asr_socket', 'Harris_Socket', 'pointer_socket', 'HAMR_Socket', 'ACOG_Socket', 'supressor_socket', 'SRSRaised_socket', 'laser_socket', 'light_socket', 'combat_grip', 'socom338_socket', 'M5B_Socket', 'sfmb_socket', 'foregrip_socket', 'EXPS3_socket', 'vfg_mlok_grip', 'Reflex_Socket', 'afg_mlok_grip'},'Pepperball Gun':{'pointer_socket', 'combat_grip', 'M5B_Socket', 'foregrip_socket', 'Reflex_Socket'},'B1301':{'Choke_Socket', 'MicroT2_Socket', 'RMR_Socket', 'pointer_socket', 'shotgunbrake_socket', 'SRO_FBI_Socket', 'RMR_FBI_Socket', 'MicroT2_FBI_Socket', 'brake_socket', 'SRO_Socket'},'B1301 \"Entryman\"':{'Choke_Socket', 'MicroT2_Socket', 'RMR_Socket', 'pointer_socket', 'shotgunbrake_socket', 'SRO_FBI_Socket', 'RMR_FBI_Socket', 'MicroT2_FBI_Socket', 'brake_socket', 'SRO_Socket'},'M4 Super 90':{'Choke_Socket', 'Barrel_Socket', 'supressor_socket', 'light_socket', 'foregrip_socket', 'Reflex_Socket'},'M590-A':{'tube_socket', 'supressor_socket', 'light_socket', 'foregrip_socket', 'Reflex_Socket'},'Saiga 12':{'pointer_socket', 'Reflex_Socket'},'870 CQB':{'RMR_Socket', 'supressor_socket', 'light_socket', 'shotgunbrake_socket', 'brake_socket', 'SRO_Socket', 'Reflex_Socket'},'MP5/10MM':{'MicroT2_Socket', 'RMR_Socket', 'pointer_socket', 'laser_socket', 'foregrip_VFG_socket', 'combat_grip', 'socom338_socket', 'foregrip_socket', 'SRO_Socket'},'MP5A3':{'MicroT2_Socket', 'RMR_Socket', 'pointer_socket', 'laser_socket', 'foregrip_VFG_socket', 'combat_grip', 'socom338_socket', 'foregrip_socket', 'EXPS3_socket', 'SRO_Socket'},'MP9':{'MicroT2_Socket', 'RMR_Socket', 'pointer_socket', 'tag_mp9suppressor', 'laser_socket', 'SRO_Socket'},'MPX':{'pointer_socket', 'supressor_socket', 'light_socket', 'socom338_socket', 'combat_grip', 'SRORaised_socket', 'vfg_mlok_grip', 'Reflex_Socket', 'afg_mlok_grip'},'P90':{'RMR_Socket', 'pointer_socket', 'socom338_socket', 'light_socket', 'Reflex_Socket'},'57 USG':{'RMRPistol_Socket', 'supressor_socket', 'light_socket', 'laser_socket', 'socom338_socket', 'SROPistol_Socket'},'MK16':{'asr_socket', 'Barrel_Socket', 'pointer_socket', 'HAMR_Socket', 'supressor_socket', 'MicroT2Raised_Socket', 'laser_socket', 'light_socket', 'socom338_socket', 'compensator_socket', 'sfmb_socket', 'foregrip_socket', 'Reflex_Socket', 'Harris_Socket'},'ARWC':{'asr_socket', 'sdr_Socket', 'pointer_socket', 'HAMR_Socket', 'SRSRaised_socket', 'laser_socket', 'light_socket', 'combat_grip', 'socom338_socket', 'sfmb_socket', 'EXPS3_socket', 'vfg_mlok_grip', 'atac_Socket', 'Reflex_Socket', 'afg_mlok_grip'},'UMP-45':{'comp_socket', 'pointer_socket', 'supressor_socket', 'MicroT2Raised_Socket', 'SRSRaised_socket', 'laser_socket', 'light_socket', 'combat_grip', 'SRORaised_socket', 'foregrip_socket', 'EXPS3_socket', 'Reflex_Socket'},'PFC9':{'SROPistol_Socket', 'laser_socket', 'comp_socket', 'light_socket', 'RMRPistol_Socket', 'supressor_socket'}}attachment_dic_format = {'$type': 'UAssetAPI.PropertyTypes.ObjectPropertyData, UAssetAPI', 'Name': '3', 'DuplicationIndex': 0, 'Value': -95}# For every item in the table.for item in data[\"Exports\"][0][\"Table\"][\"Data\"]: # For every piece of the item data. for item_data in item[\"Value\"]: # # Set inertia # if item_data[\"Name\"] == \"InertiaDragAimRotation(0)\": item_data[\"Value\"] = 0.8 continue elif item_data[\"Name\"] == \"InertiaDragAimLocation(0)\": item_data[\"Value\"] = 0.15 continue elif item_data[\"Name\"] == \"InertiaDragStrafeRotation(0)\": item_data[\"Value\"] = 0.4 continue elif item_data[\"Name\"] == \"InertiaDragStrafeLocation(0)\": item_data[\"Value\"] = 0.2 continue # Attachments elif item_data[\"Name\"] == \"AvailableScopeAttachments(0)\": name = item[\"Value\"][0][\"CultureInvariantString\"] try: comp_attachments = weapon_to_attachments[name] except: continue attachments_to_add = [] for scope in all_scopes: if all_scopes[scope] in comp_attachments: attachments_to_add.append(scope) for attachment in attachments_to_add: copied = copy.deepcopy(attachment_dic_format) copied[\"Value\"] = attachment if copied not in item_data[\"Value\"]: item_data[\"Value\"].append(copied) continue elif item_data[\"Name\"] == \"AvailableMuzzleAttachments(0)\": name = item[\"Value\"][0][\"CultureInvariantString\"] try: comp_attachments = weapon_to_attachments[name] except: continue attachments_to_add = [] for muzzle in all_muzzles: if all_muzzles[muzzle] in comp_attachments: attachments_to_add.append(muzzle) for attachment in attachments_to_add: copied = copy.deepcopy(attachment_dic_format) copied[\"Value\"] = attachment if copied not in item_data[\"Value\"]: item_data[\"Value\"].append(copied) continue elif item_data[\"Name\"] == \"AvailableUnderbarrelAttachments(0)\": name = item[\"Value\"][0][\"CultureInvariantString\"] try: comp_attachments = weapon_to_attachments[name] except: continue attachments_to_add = [] for under in all_under: if all_under[under] in comp_attachments: attachments_to_add.append(under) for attachment in attachments_to_add: copied = copy.deepcopy(attachment_dic_format) copied[\"Value\"] = attachment if copied not in item_data[\"Value\"]: item_data[\"Value\"].append(copied) continuejson.dump(data, open(f\"output/everything_unlocked_itemdatatable.json\", \"w\"))" }, { "title": "Tools", "url": "/posts/tools/", "categories": "Misc", "tags": "umodel, fmodel, psk", "date": "2022-07-19 00:00:00 +0000", "snippet": "Modding ToolsUModelAllows for accessing UE4 game files. Link: https://www.gildor.org/en/projects/umodel#files[UE5.3] Outdated for Unreal Engine 5.3 There is a build made by the community that works for UE5+, but use it at your own riskhttps://www.gildor.org/smf/index.php/topic,7906.0.html“For viewing custom materials use specific build (link, updated)”FModelAllows for accessing and exporting UE5 game files.Link: https://fmodel.app [UE5.3] Needs a Mappings.usmap for full functionality If crashing occurs, navigate to %appdata%/Roaming and delete the FModel folder.Universal Unreal UnlockerUnlocks the console in UE4 games.Link: https://framedsc.com/GeneralGuides/universal_ue4_consoleunlocker.htm [UE5.3] Outdated for Unreal Engine 5.3UE4SSCan unlock the console in UE4/UE5 games and much more.Dumpers, Scripting SystemLink: https://github.com/UE4SS-RE/RE-UE4SSGuide: UE4SS Ready Or Not ConfigurationBlender PSK PluginGives option to import .psk, psa, pskx files into Blender.Link: https://github.com/Befzz/blender3d_import_psk_psaQuantumPAKAllows for easy PAKing and UNPAKing of files without needing to install UE4 or creating batch files.Link: QuantumPAK [UE5.3] Outdated for Unreal Engine 5.3Setup: Extract the zip. Download UnrealPakTool from here. Extract the contents of UnrealPakTool, and move all of the contents within the UnrealPakTool folder to ...\\UnrealPaker\\Engine\\Binaries\\Win64. Run QuantumPAK.exe.UAssetGUIAllows editing raw .uasset files. Use responsibly.Link: https://github.com/atenfyr/UAssetGUI [UE5.3] Needs a Mappings.usmap for full functionalityQuickCook + QuickMapAutomates Cooking, Copying, Paking and opening the game to a specific level within a UE4 widget.Guide: Quick Cook Usage GuideLink: QuickCookV5.zipQuickMap: pakchunk99-QuickLoadV4.zip Nexus Mods mod.ioFMOD AudioFMOD Bank ToolsAllows unpacking and repacking of FMOD banks.Link: https://www.nexusmods.com/rugbyleaguelive3/mods/2?tab=docs Limited to single FSB banks Use version 0.0.1.40.0.1.6 is known to result in an infinite progress bar when trying to repack.FSB Files Extractor (fsbext)Allows raw unpacking and repacking of FMOD fsb files.Link: https://aluigi.altervista.org/papers.htm#fsbextBat scripts: fsbextbats.zip Includes makeFSB.bat and extractFSB.bat To use bat, place fsbext.zip contents with bat files in /fsbext for examplebmsbankQuickBMS script to export and inject multiple fsb files from FMOD banks.Link: bmsbank.zip Includes bank.bms, quickbms.exe, extractBank.bat, injectBank.batOriginal scriptQuickBMSAudacityFree multi track audi editing software.Latest: https://www.audacityteam.org/download/windows/2.4.2: https://archive.org/download/audacity-2.4.2/audacity-win-2.4.2.exe 2.4.2 has no telemetryOther ToolsQuantum Mod Manager v3.9A simple mod manager made for Ready or Not. Quickly enable and disable mods, and create and save profiles.Link: Quantum Mod ManagerSetup: Run QuantumModManager.exe. Select the Paks folder located within your Ready or Not install location if the folder selection window pops up." }, { "title": "Texture Modding", "url": "/posts/texturemodding/", "categories": "Texture Modding", "tags": "texture", "date": "2022-07-19 00:00:00 +0000", "snippet": "Texture ModdingTexture ReplacementTexture replacement is the easiest to mod. An example can be found in Example Mod. If you are doing more than recoloring, you will also need to edit the normal and ORM maps. When ripping files from the game, look for files that contain T_, BaseColor, _B, as these files are usually the texture files. Modify the texture however you would like with GIMP, Photoshop, or any other image editing software. You can also use Substance Painter, and doing such will make texturing much easier. As with overriding any other object from the game, make sure to replicate the location of the texture. If you don’t, the changes won’t apply. Create a .pak file, and everything should work properly." }, { "title": "Sound Modding", "url": "/posts/soundmodding/", "categories": "Sound Modding", "tags": "sound, fmod", "date": "2022-07-19 00:00:00 +0000", "snippet": "Sound ModdingVoiceover ModdingVoice over modding is incredibly easy.Simply navigate to …/Ready Or Not/ReadyOrNot/Content/VO/… and replace any lines you wish to replace.FMOD Modding with FMOD Bank Tool FMOD Bank Tool will only work on the first FSB in a bank. See below for compatible single FSB banks; CmndMenu, Data Center, Dealer Level, Farm Level, Fast Food, Gas Level, Hotel Civ Lines, Importer Level, Killhouse Level, Lobby Level, MainMenu, Meth Apartments, Meth Level, Police Station Level, Port Level, PVP Lines, Ridgeline, RUS, School Level, SWAT Lines, Training Level Extract an FMOD Bank with FMOD Bank Tool from .../Ready Or Not/ReadyOrNot/Content/FMOD/Desktop/…. Edit or replace any sounds you wish. Make sure the file you are replacing with is the same format as the original file. Using FMOD Bank Tools, repack all the files and replace the FMOD Bank within the game files.FMOD Modding with Bank Injection and FSB tools Use this method for banks with multiple .fsb and .wav files. See below for notable multi-FSB banks; Agency, Club, Global Amb, Hospital, Hotel Level, Interactions, Master, Penthouse, Shield, SWAT, Tools, UI, Valley Level, WeaponsBank and FSB Extraction Setup a directory to extract and repack from with no file permission issues.I’m working from C:/Files/ronFMOD/Put your FMOD tool folders here (bmsbank and fsbext) for ease of use.Also create a /banks or individual project folder. /ronFMOD /banks /bmsbank /fsbext Copy .bank file/s from the game’s install location to your /banks folder .bank are located in .../Ready Or Not/ReadyOrNot/Content/FMOD/Desktop/ Open the /bmsbank tool folder in another window, then drag a bank from /banks onto /bmsbank/extractBank.bat Usually two .fsb files should now be in /banks/out/&lt;BANKNAME&gt;/00000000.fsb and 00000001.fsb for example Navigate to /banks/out/&lt;BANKNAME&gt;/Open the /fsbext folder in another window,Drag the .fsb containing desired audio onto /fsbext/extractFSB.bat For weapon SFX it is 00000001.fsbA .dat file will be created for rebuilding the fsb later.Extracted audio files should be in /banks/out/&lt;BANKNAME&gt;/&lt;FSBNAME&gt;/ and .wav, not .ogg file format. Windows will optimize the folder to music, reducing navigation speed and sorting. You can change the properties on this folder or all sub directories of /ronFMOD to General.Audio Editing Use a program such as Audacity to open, edit and export your .wav files Audio length needs to match the source Project Rate is usually 48000Hz Encoding needs to match the source which for RoN .wav, I think, is Signed 16-bit PCM. Check file sizes are identical to confirm. Video of mostly relevant Audacity editingFSB Rebuild and Bank Injection Navigate to /banks/out/&lt;BANKNAME&gt;/With the /fsbext folder open in another window, drag &lt;FSBNAME&gt;.dat onto /fsbext/makeFSB.bat For weapon SFX it is 00000001.dat Navigate to /banks/out/&lt;BANKNAME&gt;/new/Copy your new fsb to /banks/in/&lt;BANKNAME&gt;/ Confirm the size is identical to the original just outside of /new Navigate to /banks/With the /bmsbank folder open in another window, drag your .bank onto /bmsbank/injectBank.bat to inject your modified .fsb into the file. Backup the original .bank from .../Ready Or Not/ReadyOrNot/Content/FMOD/Desktop/ Change the file extension of your backup to something else like .bankoriginal for example to keep it in the same folder. Copy your injected .bank file from /banks to your games .../FMOD/Desktop/ folder.Confirm the filesize matches the original file." }, { "title": "Skeletal Mesh Modding", "url": "/posts/skeletalmeshmodding/", "categories": "Skeletal Mesh Modding", "tags": "skeletal mesh", "date": "2022-07-19 00:00:00 +0000", "snippet": "Skeletal Mesh ModdingSkeletal Mesh Replacement Extract the model as a .psk using UModel. Import file into Blender using the Blender PSK plugin. Change the units into Metric, Meters, with a scale of 0.01. Scale the model and skeleton by 100. Unparent the skeleton from the model. Import the model you want to replace the normal model with, and resize it to fit properly. Delete the old model. And apply all transforms with Ctrl + A. Parent the skeleton to the new model using Ctrl + P. I recommend not automatically weight painting, and doing everything manually. Also make sure the root bone is the correct one. For guns this should be J_Gun. For other skeletal meshes, this will be something different. You can view the root bone in UModel. If you have another bone as the root, rename it to Armature, this makes Blender ignore that bone. Paint the weights accordingly. For guns you’ll most likely want to paint each moving piece with a value of 1.0. Export the file as an .fbx without leaf bones. Import the file into UE4. In order to make material files work, they must be instances of preexisting materials in the game. Instance a material, edit as you would like. Hook up your texture assets. This will be talked about in Material Replacement. Cook the content, and put the texture, material, and mesh files in the correct places. Make sure to add a _P to the end of your .pak file name. This makes it a patch file." }, { "title": "Material Modding", "url": "/posts/materialmodding/", "categories": "Material Modding", "tags": "material", "date": "2022-07-19 00:00:00 +0000", "snippet": "Material ModdingMaterial Replacement Using FModel, locate the master material you wish to use. Ensure that the material name somewhat correlates to what you are modding. For example, an attachment should have the master material Weapon_1P_Toprain_MASTER. Alternatively, you can use UModel to export the material and look at the .txt file. In that file, while still using FModel, locate three parameters. These parameters will point to the Normal, Texture, and ORM maps. If you are using UModel instead, you can also view these parameters. In UE4, create a fake master material with the same name in the same location as where it is within the game. You will not be exporting this file unless you uncheck the Share Material Shader Code in Project Settings &gt; Packaging. In that master material, make sure to create three texture parameters named the same as the parameters you found using FModel or UModel. Make sure to hook up these nodes accordingly. Create a new material instance with the master material being the Parent, and pass in the relevant Normal, Texture, and ORM maps. Assign this material to the model you are overriding." }, { "title": "FAQ", "url": "/posts/faq/", "categories": "General Information", "tags": "faq", "date": "2022-07-19 00:00:00 +0000", "snippet": "FAQQ: How do I install/uninstall mods?Navigate to your Ready or Not install directory and go to …/ReadyOrNot/Content/Paks/… and drag in any .pak mods which you wish to install. If you want to uninstall, simply delete the mods from that directory.Q: Can I still play online with mods?Yes, although you’ll need to disable Server Side Checksum in settings in order to join or host modded lobbies.Q: Can other people see my mods?Most are not visible to other players unless they also have the mod installed.Q: Will I get banned for using mods?No, unless you cheat via other means. Mods are supported by the developers.Q: Where can I find mods?NexusMods is the recommended place to find mods. Any other website may not be safe and can harm the creators of the mod.Q: Should I start modding?Depends on your willingness to learn. Modding can be difficult to get into, but isn’t too hard either. The SDK is coming on or post game release, which will be when mods are officially supported. Along with the SDK will come ease of modding, which we do not currently have." }, { "title": "Batch Files", "url": "/posts/batchfiles/", "categories": "General Information", "tags": "batch", "date": "2022-07-19 00:00:00 +0000", "snippet": "Batch Files 5.3 These UnrealPak bat files are placed in your engine folder, next to UnrealPak.exeYou can create file shortcuts for easier access....\\UE_5.3\\Engine\\Binaries\\Win64\\Pak Dragged FolderDownload: Pak.bat Example folder contents: ...\\pakchunk99-Mod_ExampleMod_P\\Content\\...@setlocal ENABLEDELAYEDEXPANSION@if \"%~1\"==\"\" goto skip@setlocal enableextensions@pushd %~1(for /R %%f in (*) do @set \"filePath=%%f\" &amp; set \"relativePath=!filePath:%~1=!\" &amp; @echo \"%%f\" \"../../../ReadyOrNot!relativePath!\")&gt;\"%~dp0/filelist.txt\"@pushd %~dp0::-compresslevel=4 for Normal, -compresslevel=-4 for uncompressed hyperfast paking.\\UnrealPak.exe \"%~1.pak\" -create=filelist.txt -compress -compressionformats=Oodle -compressmethod=Kraken -compresslevel=4@popd@pause:skip Do not include any symbols besides - _ in your full folder paths.Broken Folder Structure Example: C:\\Mods, Bats &amp; Stuff\\pakchunk99-Mod_ExampleMod_P\\ You can change ../../../ReadyOrNot to ../../..This allows you to include engine assets for a level’s master material dependencies for example, but you need to then add a top \\ReadyOrNot\\ folder before paking.For example: ...\\pakchunk99-Mod_ExampleLevel\\ReadyOrNot\\Content\\...Extract to the Pak’s containing folder with folders intactDownload: Unpak.bat@if \"%~1\"==\"\" goto skip@setlocal enableextensions@pushd %~dp0md \"%~dpn1\\\".\\UnrealPak.exe %1 -extract \"%~dpn1\\\\\" -extracttomountpoint@popd@pause:skipBatch Files 4.27Extract to Win64@if \"%~1\"==\"\" goto skip@setlocal enableextensions@pushd %~dp0.\\UnrealPak.exe %1 -extract \"%~n1\"@popd@pause:skipExtract to Custom Directory@if \"%~1\"==\"\" goto skip::REPLACE WITH YOUR DIRECTORY TO EXTRACT TO@set output_location=C:\\Program Files (x86)\\Steam\\steamapps\\common\\Ready Or Not\\ReadyOrNot\\Content\\Paks@setlocal enableextensions@pushd %~dp0@echo %output_location%/%~n1.\\UnrealPak.exe %1 -extract \"%output_location%\\%~n1\"@popd@pause:skip The following create Pak batch files may need to be updated for the Ready Or Not UE5.3/Home Invasion updatePak to Same Directory@if \"%~1\"==\"\" goto skip@setlocal enableextensions@pushd %~dp0@echo \"%~1\\*.*\" \"../../../ReadyOrNot/\" &gt;filelist.txt.\\UnrealPak.exe \"%~1.pak\" -create=filelist.txt -compress@popd@pause:skipPak to Custom Directory@if \"%~1\"==\"\" goto skip::REPLACE WITH YOUR DIRECTORY@set output_location=C:\\Program Files (x86)\\Steam\\steamapps\\common\\Ready Or Not\\ReadyOrNot\\Content\\Paks@setlocal enableextensions@pushd %~dp0@echo %output_location%%~n1.pak@echo \"%~1\\*.*\" \"../../../ReadyOrNot/\" &gt;filelist.txt.\\UnrealPak.exe \"%output_location%\\%~n1.pak\" -create=filelist.txt -compress@popd@pause:skip" }, { "title": "AI Modding", "url": "/posts/aimodding/", "categories": "AI Modding", "tags": "ai", "date": "2022-07-19 00:00:00 +0000", "snippet": "AI Modding Go to your extracted game pak, enter .../ReadyOrNot/Config/…, and open AILevelData.ini. Edit the AILevelData.ini file however you would like. Create a new pakchunk mod folder, just as you would with any other mod. However, make sure to add _P to the end of the folder name. Inside that folder, create the directory Config, and put your AILevelData.ini file inside. Pak the mod.Alternatively, you may use this website to generate the mods for you." }, { "title": "Adding Weapons", "url": "/posts/adding_weapons/", "categories": "UAsset Modding", "tags": "weapon, uasset", "date": "2022-07-19 00:00:00 +0000", "snippet": "UAsset Editing: Adding New Weapons (WIP)Tutorial Provided by 0w0-YuiRequirements UAssetGUI/Asset Editor (Reccomend use both to get higher efficiency) UModel/FModel (Recommend UModel Here, FModel includes bugs will affect the modding) python (Optional) JSON Viewer (Optional, I use VS Code) [UE5.3] UassetGUI and FModel now need a Mappings.usmap for full functionalityGetting StartPreparations You need a weapon replacement mod first. I will list some definitions before the tutorial start. It will be easier to understand. Save IDT and UI using UModel “Save selected packages”. Navigate to “Game\\Blueprints\\Items\\WeaponRevised”, and export the blueprint of the weapon you’re replacing. Defined_Name Description IDT “Game\\Blueprints\\DataTables\\ItemDataTable.uasset” UI “Game\\ReadyOrNot\\UI\\Planning\\ItemData.uasset” WP-BP “Game\\Blueprints\\Items\\WeaponRevised”(UAssets Exported from this Location) AT-BP “Game\\Blueprints\\Items\\WeaponRevised”(UAssets Exported from this Location) Index The index of weapon in DataTable. (You will need to come up with your own index to replace the Index in the Tutorial, make sure there are no index with the same name in the IDT) Understanding How the Blueprint WorkData include in .uasset, I call it headers Name Map/Header List: Include all object names used in this Blueprint. Import Data/Linked Class: To link other file (Blueprint, Model, Skeleton, etc.) to this Blueprint. Export Data/Code Blocks: Manage external file access to this Blueprint.Data include in .uexp Export Data/Block 1: This is where the data acutally saved..uasset point to .uexp, if you rename the file, they will broken. The right way is open the editor, and use “save as” to rename.Tutorials Close the UAssetGUI open before. Launch the Asset Editor, choose 4.25 at top right. Open IDT. Find the weapon you are replacing at “\\Code Block\\Block 1\\DataTable&lt;WeaponName&gt;”, select it at the left side, and export sub (Edit-&gt;Export Sub) Choose one method Go to the exported sub open it, rename the “\\CoreItem\\NameString” and “CoreItem\\SubTypeString” to Index Import the sub (Edit-&gt;Import sub), rename the index at “\\Code Block\\Block 1\\DataTable”. (You can skip next step 5 if you choose this method) " } ]
